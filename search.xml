<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codility] AbsDistinct</title>
      <link href="/2020/01/16/algorithm-codility-lesson15-1/"/>
      <url>/2020/01/16/algorithm-codility-lesson15-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Lession15-AbsDistinct"><a href="#Lession15-AbsDistinct" class="headerlink" title="Lession15. AbsDistinct"></a>Lession15. AbsDistinct</h2><h2 id="Caterpillar-method"><a href="#Caterpillar-method" class="headerlink" title="Caterpillar method"></a>Caterpillar method</h2><p>주어진 A배열의 값들을 절대값을 취한 후 중복 없는 갯수를 구하면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(A)</span>:</span></span><br><span class="line">    set_num = set()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        abs_N = abs(A[i])</span><br><span class="line">        <span class="keyword">if</span> abs_N <span class="keyword">not</span> <span class="keyword">in</span> set_num:</span><br><span class="line">            set_num.add(abs_N)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> len(set_num)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codility </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codility] TieRopes</title>
      <link href="/2020/01/16/algorithm-codility-lesson16-2/"/>
      <url>/2020/01/16/algorithm-codility-lesson16-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Lession16-MaxNonoverlappingSegments"><a href="#Lession16-MaxNonoverlappingSegments" class="headerlink" title="Lession16. MaxNonoverlappingSegments"></a>Lession16. MaxNonoverlappingSegments</h2><h3 id="Greedy-algorithms"><a href="#Greedy-algorithms" class="headerlink" title="Greedy algorithms"></a>Greedy algorithms</h3><p>이 문제는 첫 번째 문제보다 더 쉽다…</p><p>고려해야하는 부분이 없다.</p><p>A배열의 로프들을 확인하면서 K보다 작으면 그 다음 순서랑 묶어준다.</p><p>K이상의 값이 되었을 때 갯수를 증가 시키고 묶는 값을 0로 해서 반복해주면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(K, A)</span>:</span></span><br><span class="line">    sumV = <span class="number">0</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(A)):</span><br><span class="line">        sumV += A[i]</span><br><span class="line">        <span class="keyword">if</span> sumV &gt;= K:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            sumV = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codility </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codility] MaxNonoverlappingSegments</title>
      <link href="/2020/01/16/algorithm-codility-lesson16-1/"/>
      <url>/2020/01/16/algorithm-codility-lesson16-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Lession16-MaxNonoverlappingSegments"><a href="#Lession16-MaxNonoverlappingSegments" class="headerlink" title="Lession16. MaxNonoverlappingSegments"></a>Lession16. MaxNonoverlappingSegments</h2><h3 id="Greedy-algorithms"><a href="#Greedy-algorithms" class="headerlink" title="Greedy algorithms"></a>Greedy algorithms</h3><p>A 배열에는 시작점이 들어가 있고, B 배열에는 끝점이 들어가 있다.</p><p>주어진 갯수만큼 선들이 있으며, <strong>겹치지 않고 가질 수 있는 최대의 갯수</strong>를 구하는 문제이다.</p><img src="/2020/01/16/algorithm-codility-lesson16-1/problem01.png" class="slug"><h3 id="해결-소스"><a href="#해결-소스" class="headerlink" title="해결 소스"></a>해결 소스</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    N = len(A)</span><br><span class="line">    <span class="keyword">if</span> N == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> N == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    LINE = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        LINE.append([A[i], B[i]])</span><br><span class="line"></span><br><span class="line">    LINE.sort(key=<span class="keyword">lambda</span> x: (x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    end_point = LINE[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    cnt = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N):</span><br><span class="line">        <span class="keyword">if</span> end_point &lt; LINE[i][<span class="number">0</span>]:</span><br><span class="line">            end_point = LINE[i][<span class="number">1</span>]</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure><h3 id="소스-설명"><a href="#소스-설명" class="headerlink" title="소스 설명"></a>소스 설명</h3><h4 id="범위-설정"><a href="#범위-설정" class="headerlink" title="범위 설정"></a>범위 설정</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N = len(A)</span><br><span class="line"><span class="keyword">if</span> N == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> N == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>배열의 크기가 선의 갯수이기에 N을 만들었다.</p><p>N의 범위는 0 &lt;= N &lt;= 30,000이므로 0일 때는 갯수가 0, 1일 때는 갯수가 1이기에 바로 처리해주었다.</p><p>바로 처리해주지 않고 아래로 내려가면 인덱스 오류가 발생한다.</p><h4 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">LINE.append([A[i], B[i]])</span><br><span class="line">        </span><br><span class="line">LINE.sort(key=<span class="keyword">lambda</span> x: (x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p>탐욕적으로 생각해보았을 때 최대의 갯수만 가지면 된다.</p><p>시간복잡도를 고려, 라인의 끝점이 작으면서 시작점이 작은 순으로 정리한 후에 처리하면 된다고 생각하였다.</p><p>sort함수를 이용하여 끝점을 처음 기준, 다음은 시작점을 기준으로 정렬해주었다.</p><h4 id="갯수-세기"><a href="#갯수-세기" class="headerlink" title="갯수 세기"></a>갯수 세기</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">end_point = LINE[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">cnt = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N):</span><br><span class="line">    <span class="keyword">if</span> end_point &lt; LINE[i][<span class="number">0</span>]:</span><br><span class="line">        end_point = LINE[i][<span class="number">1</span>]</span><br><span class="line">        cnt += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>가장 먼저 온 라인이 가장 작을 것이므로 갯수를 하나 증가시키며, 끝점으로 잡아준다.</p><p>이제 for문을 통해 그 다음 라인부터 확인하며 시작점이 현재 내가 가지고 있는 끝점보다 클 경우에는 갯수를 증가시키며 끝점을 바꿔준다.</p><p>그렇게 다 돌고 난 후 return cnt를 하면 완성</p><img src="/2020/01/16/algorithm-codility-lesson16-1/result.png" class="slug">]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codility </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Class</title>
      <link href="/2020/01/11/python-middle-class/"/>
      <url>/2020/01/11/python-middle-class/</url>
      
        <content type="html"><![CDATA[<p>파이썬의 클래스와 Java의 클래스를 비교해가면서 알아보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    __num = <span class="number">5</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_num</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        self.__num = num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line">print(test.get_num()) <span class="comment">#5</span></span><br><span class="line"><span class="comment">#print(test.__num) #AttributeError: 'Test' object has no attribute '__num'</span></span><br></pre></td></tr></table></figure><p>위의 파이썬 소스는 아래의 Java 소스와 같다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    private int num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    public Test() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public int getNum() &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNum(int num) &#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TestMain &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Test test = new Test();</span><br><span class="line">        System.out.println(test.getNum()); //<span class="number">5</span></span><br><span class="line">//      System.out.println(test.num); //컴파일 에러 - num has private access</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="파이썬-class의-유연성"><a href="#파이썬-class의-유연성" class="headerlink" title="파이썬 class의 유연성"></a>파이썬 class의 유연성</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test.test = <span class="string">"테스트"</span></span><br><span class="line">print(test.test) <span class="comment">#테스트</span></span><br><span class="line">test.f = <span class="keyword">lambda</span> : print(<span class="string">"함수 확인"</span>)</span><br><span class="line">test.f() <span class="comment">#함수 확인</span></span><br></pre></td></tr></table></figure><p>사용해야할 때는 위와 같이 사용하고 난 후, 지워야할 때는 <code>del</code>을 이용해서 지워주면 된다.</p><h3 id="클래스-상속-type"><a href="#클래스-상속-type" class="headerlink" title="클래스 상속 type"></a>클래스 상속 type</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(type(test)) <span class="comment">#&lt;class '__main__.Test'&gt;</span></span><br><span class="line">print(type(Test)) <span class="comment">#&lt;class 'type'&gt;</span></span><br><span class="line">print(type(int)) <span class="comment">#&lt;class 'type'&gt;</span></span><br></pre></td></tr></table></figure><p>인스턴스는 클래스를 상속 받고, 클래스는 type을 상속 받는다.</p><p>그러면 type이 최상위일까 생각을 하였는데 type 코드를 보면 <code>class type(object):</code>으로 쓰여져 있는 것을 볼 수 있다. <strong>최상위 객체는 object</strong>이다.</p><h2 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h2><p>파이썬에서 오버라이딩은 Annotation이 필요없다.</p><h2 id="Overloading"><a href="#Overloading" class="headerlink" title="Overloading"></a>Overloading</h2><p>파이썬은 오버로딩을 지원하지 않는다.</p><p>사용하기 위해서는 별도의 라이브러리를 써야한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first</span><span class="params">(self, f=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> f <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'first met'</span>, f</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'first method'</span></span><br></pre></td></tr></table></figure><p>위와 같이 하는 것도 하나의 방도이다.</p><h2 id="Pratice"><a href="#Pratice" class="headerlink" title="Pratice"></a>Pratice</h2><p>클래스에 대해서 이해하기 위해 실습을 하나 진행</p><p>자바에서 공부했던 클래스를 파이썬으로 구현해보자.</p><p><a href="https://github.com/TaeJuneJoung/Java/tree/master/src/Chater5" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/Java/tree/master/src/Chater5</a></p><p>Customer과 VIPCustomer을 구현해보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span>:</span></span><br><span class="line"></span><br><span class="line">    __cutomerID = <span class="number">10000</span></span><br><span class="line">    __customerName = <span class="literal">None</span></span><br><span class="line">    __customerGrade = <span class="literal">None</span></span><br><span class="line">    __bonusPoint = <span class="number">0</span></span><br><span class="line">    __bonusRatio = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="string">""" Constructor """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setCustomerGrade(<span class="string">"SILVER"</span>)</span><br><span class="line">        self.setbonusRatio(<span class="number">0.01</span>)</span><br><span class="line">        self.setCustomerID(self.getCustomerID() + <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">""" Method """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calcPricer</span><span class="params">(self, price)</span>:</span></span><br><span class="line">        self.__bonusPoint += int(price * self.__bonusRatio)</span><br><span class="line">        <span class="keyword">return</span> price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showCustomerInfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.getCustomerName()&#125;</span>님의 등급은 <span class="subst">&#123;self.getCustomerGrade()&#125;</span>이며, 적립된 보너스 포인트는 <span class="subst">&#123;self.getBonusPoint()&#125;</span>점 입니다.'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">""" Getter &amp; Setter """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCustomerID</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__cutomerID</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCustomerID</span><span class="params">(self, customerID)</span>:</span></span><br><span class="line">        self.__customerID = customerID</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCustomerName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__customerName</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCustomerName</span><span class="params">(self, customerName)</span>:</span></span><br><span class="line">        self.__customerName = customerName</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCustomerGrade</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__customerGrade</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCustomerGrade</span><span class="params">(self, customerGrade)</span>:</span></span><br><span class="line">        self.__customerGrade = customerGrade</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getBonusPoint</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__bonusPoint</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setBonusPoint</span><span class="params">(self, bonusPoint)</span>:</span></span><br><span class="line">        self.__bonusPoint = bonusPoint</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getbonusRatio</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__bonusRatio</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setbonusRatio</span><span class="params">(self, bonusRatio)</span>:</span></span><br><span class="line">        self.__bonusRatio = bonusRatio</span><br><span class="line"><span class="keyword">from</span> Customer <span class="keyword">import</span> Customer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VIPCustomer</span><span class="params">(Customer)</span>:</span></span><br><span class="line">    </span><br><span class="line">    __agentID = <span class="number">1</span></span><br><span class="line">    __saleRatio = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="string">""" Constructor """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="comment">#        super().__init__() #쓰지 않으면 부모의 기본생성자 호출하지 않음</span></span><br><span class="line">        self.setCustomerGrade(<span class="string">'VIP'</span>)</span><br><span class="line">        self.setbonusRatio(<span class="number">0.05</span>)</span><br><span class="line">        self.setSaleRatio(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">""" Method """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calcPricer</span><span class="params">(self, price)</span>:</span></span><br><span class="line">        self.setBonusPoint(int(price * self.getbonusRatio()))</span><br><span class="line">        <span class="keyword">return</span> int(price - price * self.getSaleRatio())</span><br><span class="line"></span><br><span class="line">    <span class="string">""" Getter &amp; Setter """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAgentID</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__agentID</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setAgentID</span><span class="params">(self, agentID)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> agentID &gt; <span class="number">0</span> <span class="keyword">and</span> type(agentID) == int:</span><br><span class="line">            self.__agentID = agentID</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"컨설턴트ID는 숫자며, 자연수여야 합니다."</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSaleRatio</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__saleRatio</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSaleRatio</span><span class="params">(self, saleRatio)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> saleRatio &gt;= <span class="number">0.0</span> <span class="keyword">and</span> saleRatio &lt; <span class="number">1.0</span>:</span><br><span class="line">            self.__saleRatio = saleRatio</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"할인율 오류가 발생하였습니다."</span>)</span><br><span class="line"><span class="keyword">from</span> Customer <span class="keyword">import</span> Customer</span><br><span class="line"><span class="keyword">from</span> VIPCustomer <span class="keyword">import</span> VIPCustomer</span><br><span class="line"></span><br><span class="line">customerLee = Customer()</span><br><span class="line">customerLee.setCustomerName(<span class="string">"이순신"</span>)</span><br><span class="line"></span><br><span class="line">customerKim = VIPCustomer()</span><br><span class="line">customerKim.setCustomerName(<span class="string">"김유신"</span>)</span><br><span class="line"></span><br><span class="line">print(customerLee.showCustomerInfo())</span><br><span class="line"><span class="comment">#이순신님의 등급은 SILVER이며, 적립된 보너스 포인트는 0점 입니다.</span></span><br><span class="line">print(customerKim.showCustomerInfo())</span><br><span class="line"><span class="comment">#김유신님의 등급은 VIP이며, 적립된 보너스 포인트는 0점 입니다.</span></span><br><span class="line"></span><br><span class="line">priceLee = customerLee.calcPricer(<span class="number">10000</span>)</span><br><span class="line">priceKim = customerKim.calcPricer(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;customerLee.getCustomerName()&#125;</span>님의 지불하실 금액은 <span class="subst">&#123;priceLee&#125;</span>원 입니다.'</span>)</span><br><span class="line"><span class="comment">#이순신님의 지불하실 금액은 10000원 입니다.</span></span><br><span class="line">print(customerLee.showCustomerInfo())</span><br><span class="line"><span class="comment">#이순신님의 등급은 SILVER이며, 적립된 보너스 포인트는 100점 입니다.</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;customerKim.getCustomerName()&#125;</span>님의 지불하실 금액은 <span class="subst">&#123;priceKim&#125;</span>원 입니다.'</span>)</span><br><span class="line"><span class="comment">#김유신님의 지불하실 금액은 9000원 입니다.</span></span><br><span class="line">print(customerKim.showCustomerInfo())</span><br><span class="line"><span class="comment">#김유신님의 등급은 VIP이며, 적립된 보너스 포인트는 500점 입니다.</span></span><br></pre></td></tr></table></figure><h2 id="isinstance-issubclass"><a href="#isinstance-issubclass" class="headerlink" title="isinstance / issubclass"></a>isinstance / issubclass</h2><p>위의 코드를 이용하여 확인해보자.</p><h3 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a>isinstance</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isinstance(object, type)</span><br><span class="line">print(isinstance(Customer, VIPCustomer)) <span class="comment">#False</span></span><br><span class="line">print(isinstance(customerLee, Customer)) <span class="comment">#True</span></span><br><span class="line">print(isinstance(customerKim, Customer)) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">print(isinstance(customerLee, VIPCustomer)) <span class="comment">#False</span></span><br><span class="line">print(isinstance(customerKim, VIPCustomer)) <span class="comment">#True</span></span><br></pre></td></tr></table></figure><h3 id="issubclass"><a href="#issubclass" class="headerlink" title="issubclass"></a>issubclass</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">issubclass(sub type, super type)</span><br><span class="line">print(issubclass(VIPCustomer, Customer)) <span class="comment">#True</span></span><br><span class="line">print(issubclass(Customer, VIPCustomer)) <span class="comment">#False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Class </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Dictionary</title>
      <link href="/2020/01/11/python-middle-dict/"/>
      <url>/2020/01/11/python-middle-dict/</url>
      
        <content type="html"><![CDATA[<h2 id="생성방법"><a href="#생성방법" class="headerlink" title="생성방법"></a>생성방법</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123; <span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span> &#125;</span><br><span class="line">d2 = dict([(<span class="string">'a'</span>,<span class="number">1</span>), (<span class="string">'b'</span>,<span class="number">2</span>), (<span class="string">'c'</span>,<span class="number">3</span>)])</span><br><span class="line">d3 = dict(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">d4 = dict(zip([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">print(d1 == d2 == d3 == d4) <span class="comment">#True</span></span><br></pre></td></tr></table></figure><p>파이썬 3.7부터 dictionary의 순서를 보장하고 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">d2 = &#123;<span class="string">'c'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'a'</span>:<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">print(d1, d2) <span class="comment">#&#123;'a': 1, 'b': 2, 'c': 3&#125; &#123;'c': 1, 'b': 2, 'a': 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Default-Dictionary"><a href="#Default-Dictionary" class="headerlink" title="Default Dictionary"></a>Default Dictionary</h3><p>주어진 사람들의 혈액형별 숫자를 구하는 식을 나타내시오.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">person_list = [<span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'AB'</span>, <span class="string">'B'</span>, <span class="string">'O'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'AB'</span>, <span class="string">'A'</span>]</span><br><span class="line">person_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> blood <span class="keyword">in</span> person_list:</span><br><span class="line">    <span class="keyword">if</span> blood <span class="keyword">in</span> person_dict:</span><br><span class="line">        person_dict[blood] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        person_dict[blood] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(person_dict) <span class="comment">#&#123;'A': 5, 'AB': 2, 'B': 3, 'O': 1&#125;</span></span><br></pre></td></tr></table></figure><h4 id="setdefault-k-default"><a href="#setdefault-k-default" class="headerlink" title="setdefault(k, default)"></a>setdefault(k, default)</h4><p>k : 키 값</p><p>default : default값</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">person_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> blood <span class="keyword">in</span> person_list:</span><br><span class="line">    person_dict[blood] = person_dict.setdefault(blood, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(person_dict) <span class="comment">#&#123;'A': 5, 'AB': 2, 'B': 3, 'O': 1&#125;</span></span><br></pre></td></tr></table></figure><h4 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict()"></a>defaultdict()</h4><p>인자는 3가지를 받을 수 있으나, 아래의 예제만 보자면 함수를 넣으면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#사용법, 쉬운 예제</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">d = defaultdict(<span class="keyword">lambda</span>: <span class="number">5</span>)</span><br><span class="line">print(d[<span class="string">'a'</span>]) <span class="comment">#5</span></span><br><span class="line">print(d[<span class="string">'c'</span>]) <span class="comment">#5</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">person_dict = defaultdict(int)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> blood <span class="keyword">in</span> person_list:</span><br><span class="line">    person_dict[blood] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(person_dict) <span class="comment">#defaultdict(&lt;class 'int'&gt;, &#123;'A': 5, 'AB': 2, 'B': 3, 'O': 1&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="Dictionary-sort"><a href="#Dictionary-sort" class="headerlink" title="Dictionary sort"></a>Dictionary sort</h3><p>버전 3.7이전에는 딕셔너리는 순서를 보장하지 않았다.</p><p>이전의 버전에서는 순서를 유지하기 위해서 OrderedDict라는 것을 생성해서 사용했다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">od = OrderedDict() <span class="comment">#OrderedDict 객체 생성</span></span><br><span class="line">od[<span class="string">'c'</span>] = <span class="number">1</span></span><br><span class="line">od[<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line">od[<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(od) <span class="comment">#OrderedDict([('c', 1), ('b', 2), ('a', 3)])</span></span><br></pre></td></tr></table></figure><p>사용법은 딕셔너리와 똑같다. items()를 통해 for문을 이용할 수도 있고 키값으로 값에 접근도 가능하다.</p><h4 id="왜-알아야하는가"><a href="#왜-알아야하는가" class="headerlink" title="왜 알아야하는가?"></a>왜 알아야하는가?</h4><p>버전 3.7에서는 순서를 보장하는데 굳이 왜 순서를 보장하는 이전의 방법을 알아야하는가?</p><ol><li><strong>순서 보장, 값의 비교</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">d1 = &#123; <span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span> &#125;</span><br><span class="line">d2 = dict([(<span class="string">'b'</span>,<span class="number">2</span>), (<span class="string">'a'</span>,<span class="number">1</span>), (<span class="string">'c'</span>,<span class="number">3</span>)])</span><br><span class="line">d3 = dict(b=<span class="number">2</span>, c=<span class="number">3</span>, a=<span class="number">1</span>)</span><br><span class="line">d4 = dict(zip([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line">print(d1) <span class="comment">#&#123;'a': 1, 'b': 2, 'c': 3&#125;</span></span><br><span class="line">print(d2) <span class="comment">#&#123;'b': 2, 'a': 1, 'c': 3&#125;</span></span><br><span class="line">print(d3) <span class="comment">#&#123;'b': 2, 'c': 3, 'a': 1&#125;</span></span><br><span class="line">print(d4) <span class="comment">#&#123;'a': 1, 'b': 2, 'c': 3&#125;</span></span><br><span class="line"></span><br><span class="line">print(d1 == d2) <span class="comment">#True</span></span><br><span class="line">print(d1 == d2 == d3 == d4) <span class="comment">#True</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">od1 = OrderedDict() <span class="comment">#OrderedDict 객체 생성</span></span><br><span class="line">od1[<span class="string">'c'</span>] = <span class="number">1</span></span><br><span class="line">od1[<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line">od1[<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">od2 = OrderedDict()</span><br><span class="line">od2[<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line">od2[<span class="string">'c'</span>] = <span class="number">1</span></span><br><span class="line">od2[<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(od1) <span class="comment">#OrderedDict([('c', 1), ('b', 2), ('a', 3)])</span></span><br><span class="line">print(od2) <span class="comment">#OrderedDict([('a', 3), ('c', 1), ('b', 2)])</span></span><br><span class="line">print(od1 == od2) <span class="comment">#False</span></span><br></pre></td></tr></table></figure><p>OrderedDict는 순서도 보장하지만, 값에 대한 순서 비교도 보장하고 있음을 알 수 있다.</p><ol><li><strong>저장 순서 변경 가능</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">od = OrderedDict() <span class="comment">#OrderedDict 객체 생성</span></span><br><span class="line">od[<span class="string">'c'</span>] = <span class="number">1</span></span><br><span class="line">od[<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line">od[<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(od) <span class="comment">#OrderedDict([('c', 1), ('b', 2), ('a', 3)])</span></span><br><span class="line"></span><br><span class="line">od.move_to_end(<span class="string">'b'</span>, last=<span class="literal">True</span>)</span><br><span class="line">print(od) <span class="comment">#OrderedDict([('c', 1), ('a', 3), ('b', 2)])</span></span><br><span class="line"></span><br><span class="line">od.move_to_end(<span class="string">'a'</span>, last=<span class="literal">False</span>)</span><br><span class="line">print(od) <span class="comment">#OrderedDict([('a', 3), ('c', 1), ('b', 2)])</span></span><br></pre></td></tr></table></figure><p><code>move_to_end(key, last=True/False)</code>를 이용하여 저장 순서를 변경할 수도 있다.</p><p>last를 True로 하면 제일 뒤로 보내지고, False로 하면 제일 앞으로 보내지게 된다.</p><h2 id="zip함수"><a href="#zip함수" class="headerlink" title="zip함수"></a>zip함수</h2><p><strong><code>zip(\*iterable)</code></strong>은 동일한 개수로 이루어진 자료형을 묶어 주는 역할을 하는 함수</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">c = <span class="string">"ABC"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(a,b,c):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[출력]</span></span><br><span class="line"><span class="string">('a', 1, 'A')</span></span><br><span class="line"><span class="string">('b', 2, 'B')</span></span><br><span class="line"><span class="string">('c', 3, 'C')</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Dictionary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Inheritance</title>
      <link href="/2020/01/10/java-inheritance/"/>
      <url>/2020/01/10/java-inheritance/</url>
      
        <content type="html"><![CDATA[<p>상속은 재활용성과 유지보수, 확장성에 좋다고들 한다.</p><p>그러나 재활용성에 대해서는 논의가 많다. 코드의 재활용을 위해서 상속을 사용한다기보다는 <strong>연관된 일련의 클래스에 대한 공통적인 규악을 정의한다</strong>고 아는 것이 좋다.</p><p><strong>상위 클래스</strong> : parent class, base class, super class</p><p><strong>하위 클래스</strong> : child class, derived class, sub class</p><p>하위 클래스의 생성자에서는 무조건 상위 클래스의 생성자가 호출되어야 한다.</p><p>상위 클래스의 인스턴스가 먼저 생성되고, 하위 클래스의 인스턴스가 생성된다.</p><h2 id="객체지향이-재활용의-관점에서-실패한-이유"><a href="#객체지향이-재활용의-관점에서-실패한-이유" class="headerlink" title="객체지향이 재활용의 관점에서 실패한 이유"></a>객체지향이 재활용의 관점에서 실패한 이유</h2><ul><li>클래스 하나를 재활용하는 것이 새롭게 디자인하는 것보다 더 큰 노력이 든다.</li><li>재활용성을 고려해서 클래스를 디자인할 경우, 설계에 필요한 시간이 몇 배 더 길어진다.</li></ul><p>재활용에 대한 이슈는 객체지향 패러다임에서 CBD라는 패러다임으로 옮겨 간지 오래이다. CBD 역시 객체지향을 기반으로 형성된 패러다임이기 때문에 중요하다.</p><p><strong>CBD(Component Based Development)</strong></p><p>클래스 단위의 재활용을 논의하지 않고, 자바의 패키지 혹은 그 이상의 규모에 대한 재활용을 논의한다.</p><h2 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h2><p>상위 클래스의 생성자, method 호출</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AAA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num1;</span><br><span class="line">    AAA()&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span> <span class="keyword">extends</span> <span class="title">AAA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num2;</span><br><span class="line">    BBB()&#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">//쓰지 않을 시, 자동으로 컴파일러가 추가</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본생성자의 경우에만 자동으로 컴파일러가 추가한다. 파라미터가 있을 경우에는 <code>super()</code> 안에 인자를 넣어줘야 한다.</p><h2 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h2><p>상위 클래스에 정의된 메소드의 구현 내용이 하위 클래스에서 구현할 내용과 맞지 않는 경우,</p><p>하위 클래스에서 동일한 이름의 메서드를 재정의 할 수 있다.</p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>: toString 메서드는 인스턴스의 정보를 문자열의 형태로 반환하기 위한 메서드</p><p>가급적이면 toString 메서드를 오버라이딩 해서 인스턴스에 대한 정보를 적절히 표현할 수 있도록 하는 것이 좋다.</p><h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h2><p>상속 관계를 바탕으로 형변환이 가능한지를 묻는 연산자이다.</p><p>return : true/false</p><h2 id="Ploymorphism-다형성"><a href="#Ploymorphism-다형성" class="headerlink" title="Ploymorphism, 다형성"></a>Ploymorphism, 다형성</h2><p>하나의 코드가 여러 자료형으로 구현되어 실행되는 것</p><p>같은 코드에서 여러 실행 결과가 나온다.</p><p>정보은닉, 상속과 더불어 객체지향 프로그래밍의 가장 큰 특징 중 하나이다.</p><p>객체지향 프로그래밍의 유연성, 재활용성, 유지보수성에 기본이 되는 특징</p><h3 id="다형성의-장점"><a href="#다형성의-장점" class="headerlink" title="다형성의 장점"></a>다형성의 장점</h3><ul><li><p>하나의 코드가 다양한 구현을 실행</p><p>다양한 여러 클래스를 하나의 자료형(상위 클래스)으로 선언하거나 형변환하여 각 클래스가 동일한 메서드를 오버라이딩 한경우</p></li><li><p>유지보수 용이</p><p>유사한 클래스가 추가되는 경우 유지보수에 용이하며, 각 자료형마다 다른 메서드를 호출하지 않으므로 코드에서 많은 if문이 사라진다.</p></li></ul><h3 id="IS-A관계-is-a-relationship-inheritance"><a href="#IS-A관계-is-a-relationship-inheritance" class="headerlink" title="IS-A관계(is a relationship : inheritance)"></a>IS-A관계(is a relationship : inheritance)</h3><p>: 일반적인 개념과 구체적인 개념과의 관계</p><p>‘일반 고객 / 골든 고객 / VIP 고객’ 이런 식으로 고객의 정보가 있을 때의 관계를 나타냅니다.</p><h3 id="HAS-A관계-composition"><a href="#HAS-A관계-composition" class="headerlink" title="HAS-A관계(composition)"></a>HAS-A관계(composition)</h3><p>HAS-A관계는 상속의 조건은 되지만, 복합 관계로 이를 대신하는 것이 일반적이다.</p><p><strong>HAS-A관계 : 상속</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** HAS-A관계 : Inheritance **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HASInheritance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Police police = <span class="keyword">new</span> Police(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        police.shot();</span><br><span class="line">        police.putHandcuff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bullet; <span class="comment">//장전된 총알의 수</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Gun</span><span class="params">(<span class="keyword">int</span> bullet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bullet = bullet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"빵!"</span>);</span><br><span class="line">        <span class="keyword">this</span>.bullet--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Police</span> <span class="keyword">extends</span> <span class="title">Gun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> handcuffs; <span class="comment">//소유한 수갑의 수</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Police</span><span class="params">(<span class="keyword">int</span> bullet, <span class="keyword">int</span> handcuffs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bullet);</span><br><span class="line">        <span class="keyword">this</span>.handcuffs = handcuffs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putHandcuff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"체포!"</span>);</span><br><span class="line">        <span class="keyword">this</span>.handcuffs--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HAS-A관계 : 복합 관계</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** HAS-A관계 : Composite **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HASComposite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PoliceComposite haveGun = <span class="keyword">new</span> PoliceComposite(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">//총알5 수갑3</span></span><br><span class="line">        haveGun.shot();</span><br><span class="line">        haveGun.putHandcuff();</span><br><span class="line"></span><br><span class="line">        PoliceComposite dontHaveGun = <span class="keyword">new</span> PoliceComposite(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">//총알0 수갑3</span></span><br><span class="line">        dontHaveGun.shot();</span><br><span class="line">        dontHaveGun.putHandcuff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GunComposite</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bullet; <span class="comment">//장전된 총알의 수</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GunComposite</span><span class="params">(<span class="keyword">int</span> bullet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bullet = bullet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"빵!"</span>);</span><br><span class="line">        <span class="keyword">this</span>.bullet--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoliceComposite</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> handcuffs; <span class="comment">//소유한 수갑의 수</span></span><br><span class="line">    Gun pistol; <span class="comment">//소유하고 있는 권총</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PoliceComposite</span><span class="params">(<span class="keyword">int</span> bullet, <span class="keyword">int</span> handcuffs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handcuffs = handcuffs;</span><br><span class="line">        <span class="keyword">if</span>(bullet != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pistol = <span class="keyword">new</span> Gun(bullet);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.pistol = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putHandcuff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"체포!"</span>);</span><br><span class="line">        <span class="keyword">this</span>.handcuffs--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.pistol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"틱!(총알 없음)"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pistol.shot();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상속으로 묶인 두 개의 클래스는 강한 연관성을 띤다.</p><p>Gun Class를 상속하는 Police 클래스로는 총을 소유하는 경찰만 표현 가능하다.</p><p>하지만, 복합 관계의 경우에는 권총을 소유하지 않은 경찰도 표현이 가능하다.</p><p>경찰이 총만이 아닌 경관봉을 들어야할 때도 있는 점들을 고려한다면 복합 관계로 구현하는 것이 더 편리할 것이다.</p><h3 id="다운-캐스팅"><a href="#다운-캐스팅" class="headerlink" title="다운 캐스팅"></a>다운 캐스팅</h3><p><strong>하위 클래스로 형 변환</strong></p><p>묵시적으로 상위 클래스 형변환도니 인스턴스가 원래 자료형(하위 클래스)으로 변환되어야 할 때 다운 캐스팅이라 함</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Customer vc = <span class="keyword">new</span> VIPCustomer(); <span class="comment">//묵시적</span></span><br><span class="line">VIPCustomer vCustomer = (VIPCustomer)vc; <span class="comment">//명시적</span></span><br><span class="line">Eagle eagle = (Eagle) hAnimal;</span><br></pre></td></tr></table></figure><p>이렇게 해도 컴파일 에러가 발생하지 않다가 실행하면</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.ClassCastException: Chater5.ploymorphism.Human cannot be cast to Chater5.ploymorphism.Eagle</span><br></pre></td></tr></table></figure><p>오류가 발생한다.</p><p>이러한 일을 방지하기 위해서 <strong>instanceof</strong>을 사용한다.</p><p>오버라이딩을 사용할 수 있을 때는 다형성을 사용하여 처리하고, 안될 경우에는 다운 캐스팅을 이용하면 된다.</p><p>소스 참고 링크</p><p><a href="https://github.com/TaeJuneJoung/Java/blob/master/src/Chapter5/ploymorphism/AnimalTest.java" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/Java/blob/master/src/Chapter5/ploymorphism/AnimalTest.java</a></p><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><h3 id="final-class"><a href="#final-class" class="headerlink" title="final class"></a>final class</h3><p>클래스에 final선언을 해주면 “이 클래스를 상속하는 것을 허용하지 않음”이라는 뜻이 담기게 된다.</p><ul><li>상속X</li></ul><h3 id="final-method"><a href="#final-method" class="headerlink" title="final method"></a>final method</h3><p>메서드에 final선언을 해주면 “이 메서드를 오버라딩 하는 것을 허용하지 않음”이라는 뜻이 담기게 된다</p><ul><li>오버라이딩X</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Inheritance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Packing &amp; Unpacking</title>
      <link href="/2020/01/10/python-middle-packing/"/>
      <url>/2020/01/10/python-middle-packing/</url>
      
        <content type="html"><![CDATA[<h2 id="패킹-Packing"><a href="#패킹-Packing" class="headerlink" title="패킹, Packing"></a>패킹, Packing</h2><p>파이썬에서 기본 패킹은 튜플로 이루어진다.</p><p>튜플 패킹 : 하나 이상의 값을 튜플로 묶는 행위</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(a) <span class="comment">#(1, 2, 3)</span></span><br></pre></td></tr></table></figure><p><code>*</code> : 연산자로 쓰이기도 하지만, 패킹으로 쓰이기도 한다.</p><p>언패킹으로 쓰일 때는 함수 인자 전달에 대해서 쓰일 때라고 보면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a, b, *c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">print(a) <span class="comment">#1</span></span><br><span class="line">print(b) <span class="comment">#2</span></span><br><span class="line">print(c) <span class="comment">#[3, 4, 5, 6, 7]</span></span><br><span class="line">a, *b, c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line">print(a) <span class="comment">#1</span></span><br><span class="line">print(b) <span class="comment">#[2, 3, 4, 5, 6]</span></span><br><span class="line">print(c) <span class="comment">#7</span></span><br></pre></td></tr></table></figure><p>함수 반환도 동일하다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line">*a, b = f()</span><br><span class="line">print(a) <span class="comment">#[1,2,3,4]</span></span><br><span class="line">print(b) <span class="comment">#5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b, *c)</span>:</span></span><br><span class="line">    print(<span class="string">'a:'</span>,a,<span class="string">'\tb:'</span>,b, <span class="string">'\tc:'</span>,c)</span><br><span class="line">    <span class="comment">#a: 1    b: 2    c: (3, 4, 5, 6, 7)</span></span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h2 id="언패킹-Unpacking"><a href="#언패킹-Unpacking" class="headerlink" title="언패킹, Unpacking"></a>언패킹, Unpacking</h2><p>튜플 언패킹 : 튜플에 묶여 있는 값들을 풀어내는 행위</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">#[1,2,3] 리스트로도 가능</span></span><br><span class="line"></span><br><span class="line">print(a, b, c) <span class="comment">#1 2 3</span></span><br></pre></td></tr></table></figure><p><strong>Set</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;</span><br><span class="line">print(type(&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>&#125;)) <span class="comment">#&lt;class 'set'&gt;</span></span><br><span class="line">print(a, b, c) <span class="comment">#3 5 7</span></span><br></pre></td></tr></table></figure><p><strong>Dictionary</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = &#123;<span class="number">4</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">5</span>,<span class="number">3</span>:<span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">print(a, b, c) <span class="comment">#4 2 3</span></span><br></pre></td></tr></table></figure><p><code>*</code>이 언패킹으로 쓰일 때</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,b,c,d,e)</span>:</span></span><br><span class="line">    print(a, b, c, d, e)</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">f(*a) <span class="comment">#1 2 3 4 5</span></span><br></pre></td></tr></table></figure><p>Argument에 *를 쓰지 않는다면 아래와 같은 에러가 발생한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,b,c,d,e)</span>:</span></span><br><span class="line">    print(a, b, c, d, e)</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">f(a)</span><br><span class="line">TypeError: f() missing <span class="number">4</span> required positional arguments: <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="keyword">and</span> <span class="string">'e'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Packing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Array</title>
      <link href="/2020/01/09/java-array/"/>
      <url>/2020/01/09/java-array/</url>
      
        <content type="html"><![CDATA[<p>배열은 <code>Fix Length</code>이기에 길이를 크게 해서 값을 더하고 싶은 경우</p><p>큰 길이의 배열을 선언하고 이전의 값들을 가지고 와서 넣어주고 추가하면 된다.</p><h2 id="배열의-선언과-초기화"><a href="#배열의-선언과-초기화" class="headerlink" title="배열의 선언과 초기화"></a>배열의 선언과 초기화</h2><h3 id="1차-배열"><a href="#1차-배열" class="headerlink" title="1차 배열"></a>1차 배열</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">//Error</span></span><br><span class="line"><span class="keyword">int</span>[] arr3 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr4 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="2차-배열"><a href="#2차-배열" class="headerlink" title="2차 배열"></a>2차 배열</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br></pre></td></tr></table></figure><p>2차열 배열에서 가로의 길이가 정해지지 않았다.</p><p>가로의 길이는 위와 같이 선언/초기화 후에 정해줘도 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>이렇게 할 수 있으며, 가로의 길이가 일정하지 않은 배열을 <strong>Ragged Array(가변 배열)</strong>라고 한다.</p><h2 id="Array-Copy"><a href="#Array-Copy" class="headerlink" title="Array Copy"></a>Array Copy</h2><h3 id="얕은-복사"><a href="#얕은-복사" class="headerlink" title="얕은 복사"></a>얕은 복사</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(원본, 원본 어디서부터, 복사 담길 객체, 시작점, 길이);</span><br></pre></td></tr></table></figure><h3 id="깊은-복사"><a href="#깊은-복사" class="headerlink" title="깊은 복사"></a>깊은 복사</h3><p>for문을 이용하여 값을 하나하나 넣어주면 된다.</p><h2 id="For-each문"><a href="#For-each문" class="headerlink" title="For-each문"></a>For-each문</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> e : arr) &#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(배열 arr의 모든 요소 각각을 e라 할 때 : arr이 반복의 대상) &#123;</span></span><br><span class="line"><span class="comment">    출력값</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>for-each문은 파이썬에서</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = range(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line"><span class="keyword">for</span> i in num:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>이렇게 쓴 것과 유사하다.</p><p>인덱스 접근이 어렵다는 단점이 있다.</p><h2 id="Main-method"><a href="#Main-method" class="headerlink" title="Main method"></a>Main method</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p><code>String[] args</code>는 배열임을 알 수 있다.</p><p>args는 실행을 하면서 뒤에 붙는 문자열이 띄어쓰기를 기준으로 붙는다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Test AAA BBB CCC</span><br></pre></td></tr></table></figure><p>Test 클래스를 실행하면서 뒤에 “AAA BBB CCC” 라는 문자열을 넣게 된다면</p><p>args[0] = “AAA”, args[1] = “BBB”, args[2] = “CCC” 이렇게 args는 값을 가지고 있게 된다.</p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>다음은 배열을 선언하거나 초기화한 것이다. 잘못된 것을 고르고 그 이유를 설명하시오.</p><ol><li>int[] arr[];</li><li>int[] arr = {1,2,3, };</li><li>int[] arr = new int[5];</li><li>int[] arr = new int[5]{1,2,3,4,5};</li><li>int arr[5];</li><li>int[] arr[] = new int[3] [];</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//는 할 수 있다.</span></span><br><span class="line"><span class="comment">//괄호 &#123;&#125;안의 데이터의 개수에 따라 자동적으로 크기가 지정되기 때문</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>]; <span class="comment">//배열을 선얼할 때는 배열의 크기를 지정할 수 없다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 답은 */</span></span><br><span class="line"><span class="comment">// 4, 5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Console I/O</title>
      <link href="/2020/01/09/java-console-io/"/>
      <url>/2020/01/09/java-console-io/</url>
      
        <content type="html"><![CDATA[<h2 id="Console-Output"><a href="#Console-Output" class="headerlink" title="Console Output"></a>Console Output</h2><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><table><thead><tr><th>서식 문자</th><th>출력의 형태</th></tr></thead><tbody><tr><td>%d</td><td>10진수 정수 형태의 출력</td></tr><tr><td>%o</td><td>8진수 정수 형태의 출력</td></tr><tr><td>%x</td><td>16진수 정수 형태의 출력</td></tr><tr><td>%f</td><td>실수의 출력</td></tr><tr><td>%e</td><td>e표기법 기반의 실수 출력</td></tr><tr><td>%g</td><td>출력의 대상에 따라서 %e 또는 %f 형태의 출력</td></tr><tr><td>%s</td><td>문자열 출력</td></tr><tr><td>%c</td><td>문자 출력</td></tr></tbody></table><h2 id="Console-Input"><a href="#Console-Input" class="headerlink" title="Console Input"></a>Console Input</h2><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            str = br.readLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            str = <span class="string">"Exception 발생"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BufferedReader를 다루기에는 익숙하지 않으면 불편한 점이 다소 있다.</p><ul><li>자바I/O</li><li>Wrapper 클래스</li><li>String 처리</li><li>예외 처리</li></ul><p>에 대해서 알고 있어야 하기 때문이다.</p><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>이러한 불편한 점을 쉽게 처리해주는 것이 Scanner이다.</p><p>(단, 속도나 메모리에 대해서는 BufferedReader가 성능이 더 좋다는 점을 잊어서는 안된다.)</p><ul><li>Scanner(File source)</li><li>Scanner(InputStream source)</li><li>Scanner(Readable source)</li><li>Scanner(String source)</li></ul><p>Scanner는 키보드의 입력만을 위해서 만들어진 클래스가 아니다.</p><p>다양한 입력을 받아 처리할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Console I/O </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Overloading, 오버로딩</title>
      <link href="/2020/01/09/java-overloading/"/>
      <url>/2020/01/09/java-overloading/</url>
      
        <content type="html"><![CDATA[<h2 id="Overloading"><a href="#Overloading" class="headerlink" title="Overloading"></a>Overloading</h2><ol><li><p>Method 이름이 같아야 한다</p></li><li><p>매개변수의 갯수 또는 타입이 달라야 한다</p></li><li><p>리턴타입이 다른 경우는 오버로딩에 성립되지 않는다.</p><blockquote><p>메서드 호출문을 기준으로 호출되어야할 메서드를 구분할 수 없기 때문이다.</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">" "</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test(<span class="number">5</span>, <span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이럴 경우에는 안될 것 같지만, 자동 형변환이 이뤄져서 <code>5 97</code>이라는 결과값이 나오게 된다.</p><p>그렇다면 오버로딩을 해서 2번째 인자에 char형식을 받게 되면 어떠한 결과가 나올까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">" "</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">" "</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test(<span class="number">5</span>, <span class="string">'a'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과값은 타입에 맞게 들어가서 <code>5 a</code>가 나온다.</p><p>오버로딩의 가장 대표적인 Method로는 <strong><code>System.out.println()</code></strong>이 있다.</p><h2 id="참고-생성자와-this"><a href="#참고-생성자와-this" class="headerlink" title="참고. 생성자와 this"></a>참고. 생성자와 this</h2><h3 id="Constructor-생성자"><a href="#Constructor-생성자" class="headerlink" title="Constructor, 생성자"></a>Constructor, 생성자</h3><ul><li>객체를 생성할 때 new 키워드와 함께 호출(객체 생성 외에는 호출X)</li><li>인스턴스를 초기화하는 코드가 구현됨(주로 멤버 변수 초기화)</li><li>반환값 X, 상속X</li><li>생성자는 클래스 이름과 동일</li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><ul><li>자신의 메모리를 가리킴 -&gt; 인스턴스 변수</li><li>생성자에서 다른 생성자를 호출 -&gt; super와 유사한 역할을 함</li><li>인스턴스 자신의 주소를 반환</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Overloading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Static</title>
      <link href="/2020/01/08/java-static/"/>
      <url>/2020/01/08/java-static/</url>
      
        <content type="html"><![CDATA[<h2 id="Static-변수"><a href="#Static-변수" class="headerlink" title="Static 변수"></a>Static 변수</h2><p><strong>Static 변수, 클래스 변수, 정적 변수</strong>라고도 불린다.</p><p>static으로 선언된 변수는 메모리 공간에 하나만 존재하며, 어디서나 접근이 가능한 변수이다.</p><p>(단, 어디서나 접근이 가능하려면 접근 제어자 public이 선언되어야 한다.)</p><p>static 변수는 처음 프로그램이 로드 될 때 데이터 영역에 생성 됨</p><img src="/2020/01/08/java-static/java-static01.jpg" class="slug"><p>인스턴스의 생성과 상관없이 사용할 수 있으므로 클래스 이름으로 참조</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.serialNum = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>클래스 변수, 정적 변수라고도 함</p><h3 id="Static-변수-접근방법"><a href="#Static-변수-접근방법" class="headerlink" title="Static 변수 접근방법"></a>Static 변수 접근방법</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessWay</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccessWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        increaseCnt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increaseCnt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        num++; <span class="comment">//방법1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccessWay way = <span class="keyword">new</span> AccessWay();</span><br><span class="line">        way.num++; <span class="comment">//방법2</span></span><br><span class="line">        AccessWay.num++; <span class="comment">//방법3</span></span><br><span class="line">        System.out.println(AccessWay.num); <span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static-변수와-인스턴스-변수"><a href="#static-변수와-인스턴스-변수" class="headerlink" title="static 변수와 인스턴스 변수"></a>static 변수와 인스턴스 변수</h3><img src="/2020/01/08/java-static/java-static02.jpg" class="slug"><p>데이터 영역에 위치한 동일한 메모리 참조</p><h3 id="프로그램에서-변수의-유형"><a href="#프로그램에서-변수의-유형" class="headerlink" title="프로그램에서 변수의 유형"></a>프로그램에서 변수의 유형</h3><p>static변수는 인스턴스가 생성되기 이전에 별도의 메모리 공간에 할당되어 초기화까지 완료</p><p>-&gt; <strong>static 변수가 초기화되는 시점은 JVM에 의해서 클래스가 메모리 공간에 올라가는 순간</strong></p><p> 때문에, static변수를 생성자를 통해서 초기화하면 안된다.</p><p> -&gt; 생성자를 통해서 초기화를 하면, 인스턴스가 생성될 때마다 새로운 값이 대입되어 버리기 때문이다.</p><p>클래스 내부 또는 외부에서 참조의 용도로만 선언된 변수는 <code>static final</code>로 선언한다.</p><img src="/2020/01/08/java-static/java-static03.jpg" class="slug"><h2 id="Static-Method"><a href="#Static-Method" class="headerlink" title="Static Method"></a>Static Method</h2><h3 id="System-out-println"><a href="#System-out-println" class="headerlink" title="System.out.println()"></a>System.out.println()</h3><p><code>System.out.println()</code>에 대해서 자세히 알아보자.</p><p><strong>System</strong>은 java.lang이라는 패키지 안에 있는 클래스의 이름이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.System.out.println(<span class="string">"이렇게 해도 된다."</span>);</span><br></pre></td></tr></table></figure><p>이렇게 하지 않아도 나오는 이유는 컴파일러가 자동으로 해주게 설정되어 있기 때문이다.</p><p>컴파일러가 자동으로 <code>import java.lang.*;</code>을 해주고 있기에 쓰지 않고도 사용이 가능하다.</p><p><code>println()</code>이 method 역할을 하고 있는 것을 보면 out은 static 참조 변수일 것이다.</p><p><strong>out</strong>은 java.io 패키지에서 PrintStream Class를 참조 받는 변수이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> PrintStream out = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p><strong>println()</strong>은 PrintStream Class에 있는 method로서 오버로딩 되어 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    newLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">boolean</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        print(x);</span><br><span class="line">        newLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 오버로딩 method...</span></span><br></pre></td></tr></table></figure><h3 id="public-static-void-main"><a href="#public-static-void-main" class="headerlink" title="public static void main"></a>public static void main</h3><p><strong>main 메소드는 인스턴스의 생성과 상관없이 JVM에 의해 호출이 되므로 반드시 static으로 선언해야 한다.</strong></p><p>main을 담고 있는 class는 찾을 수 없다. 어디서 담고 있든 상관 없고 위의 내용이 가장 중요하다.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Static </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Encapsulation</title>
      <link href="/2020/01/08/java-encapsulation/"/>
      <url>/2020/01/08/java-encapsulation/</url>
      
        <content type="html"><![CDATA[<p>캡슐화의 예시를 종합감기약을 예시로 들수 있다.</p><p>종합감기약을 먹으면 코감기와 재채기, 두통이 낫는다. <del>(책의 예시에서는 코감기가 두 번…(?))</del></p><h2 id="Non-Encapsulation"><a href="#Non-Encapsulation" class="headerlink" title="Non-Encapsulation"></a>Non-Encapsulation</h2><p>아래의 소스는 캡슐화를 적용하지 않은 소스다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinivelCap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"콧물 감기가 낫습니다!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SneezeCap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"재치기가 낫습니다!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnuffleCap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"코감기가 낫습니다!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColdPatiend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSinivelCap</span><span class="params">(SinivelCap cap)</span> </span>&#123; cap.take(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSneezeCap</span><span class="params">(SneezeCap cap)</span> </span>&#123; cap.take(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSnuffleCap</span><span class="params">(SnuffleCap cap)</span> </span>&#123; cap.take(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotEncapsulation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ColdPatiend sufferer = <span class="keyword">new</span> ColdPatiend();</span><br><span class="line">        sufferer.takeSinivelCap(<span class="keyword">new</span> SinivelCap()); <span class="comment">//콧물 감기가 낫습니다!</span></span><br><span class="line">        sufferer.takeSneezeCap(<span class="keyword">new</span> SneezeCap()); <span class="comment">//재치기가 낫습니다!</span></span><br><span class="line">        sufferer.takeSnuffleCap(<span class="keyword">new</span> SnuffleCap()); <span class="comment">//코감기가 낫습니다!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전체적으로 보면은 종합감기약 같지만 결국은 기능에 맞는 알약을 하나하나 먹는 것과 같다. 그래서 3개의 알약을 먹게 된다. 종합감기약과는 다른 의미가 되어버린다.</p><h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><p>그러면 이제 캡슐화(Encapsulation)을 이용해서 종합감기약의 기능을 구현해보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinivelCap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"콧물 감기가 낫습니다!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SneezeCap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"재치기가 낫습니다!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnuffleCap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"코감기가 낫습니다!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pill</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SinivelCap sinivelCap;</span><br><span class="line">    <span class="keyword">private</span> SneezeCap sneezeCap;</span><br><span class="line">    <span class="keyword">private</span> SnuffleCap snuffleCap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sinivelCap = <span class="keyword">new</span> SinivelCap();</span><br><span class="line">        sneezeCap = <span class="keyword">new</span> SneezeCap();</span><br><span class="line">        snuffleCap = <span class="keyword">new</span> SnuffleCap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sinivelCap.take();</span><br><span class="line">        sneezeCap.take();</span><br><span class="line">        snuffleCap.take();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColdPatient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takePill</span><span class="params">(Pill pill)</span> </span>&#123; pill.take(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encapsulation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ColdPatient coldPatient = <span class="keyword">new</span> ColdPatient();</span><br><span class="line">        coldPatient.takePill(<span class="keyword">new</span> Pill());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 콧물 감기가 낫습니다!</span></span><br><span class="line"><span class="comment">        * 재치기가 낫습니다!</span></span><br><span class="line"><span class="comment">        * 코감기가 낫습니다!</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>캡슐화는 보기에는 쉬우나, 범위를 결정하는 것이 쉽지 않다. 경험있는 프로그래머를 구분하는 첫 번째 기준이 된다고 한다.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Encapsulation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Named Tuple</title>
      <link href="/2020/01/08/python-middle-named-tuple/"/>
      <url>/2020/01/08/python-middle-named-tuple/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Test = namedtuple(<span class="string">'Test'</span>, [<span class="string">'ItsOne'</span>, <span class="string">'ItsTwo'</span>])</span><br><span class="line">t = Test(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">print(t) <span class="comment">#Test(ItsOne=3, ItsTwo=7)</span></span><br><span class="line"></span><br><span class="line">print(t[<span class="number">0</span>], t[<span class="number">1</span>]) <span class="comment">#3 7</span></span><br><span class="line">print(t.ItsOne, t.ItsTwo) <span class="comment">#3 7</span></span><br></pre></td></tr></table></figure><p>리스트를 사용하지 않고 아래와 같이 문자열에 담아서 전달해도 적용된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test = namedtuple(<span class="string">'Test'</span>, <span class="string">'ItsOne ItsTwo'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    t[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">TypeError: <span class="string">'Test'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><p>튜플과 동일하게 값을 저장된 값을 수정할 수 없다.</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Named Tuple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Generators</title>
      <link href="/2020/01/07/python-middle-generators/"/>
      <url>/2020/01/07/python-middle-generators/</url>
      
        <content type="html"><![CDATA[<p><strong>iterator 객체의 한 종류</strong></p><p>제너레이터를 만드는 2가지 방법</p><ul><li>제너레이터 함수: 제네레이터를 만들기 위한 함수 정의</li><li>제너레이터 표현식: 제너레이터를 만들기 위한 식</li></ul><p>제너레이터의 최대 핵심이자 장점 -&gt; <strong>lazy evaluation</strong></p><h2 id="제너레이터-함수"><a href="#제너레이터-함수" class="headerlink" title="제너레이터 함수"></a>제너레이터 함수</h2><p>일반 함수와 다른 점은 <code>yield</code>로 인해 제너레이터 함수가 된다는 점.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'One!'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'Two!'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    print(<span class="string">'Three!'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">gen = generator() <span class="comment">#제너레이터 객체 생성</span></span><br><span class="line"></span><br><span class="line">print(next(gen))</span><br><span class="line">print(next(gen))</span><br><span class="line">print(next(gen))</span><br><span class="line">print(next(gen))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">One!</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">Two!</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">Three!</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "test.py", line 14, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(next(gen))</span></span><br><span class="line"><span class="string">StopIteration</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>for문도 iterator을 이용하지만, Generator는 쓸때마다 next를 써야하는 불편함이 있기에 장점이 없다면 쓰고 싶지 않다. 그렇다면 써야하는 이유는 무엇일까?</p><p>결론적으로 말하자면 <strong>메모리 때문</strong>이다.</p><p><strong>제너레이터를 사용하지 않았을 때]</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pows</span><span class="params">(s)</span>:</span></span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        r.append(i**<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">N = range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">st = pows(N)</span><br><span class="line"></span><br><span class="line">print(st)</span><br><span class="line">print(sys.getsizeof(st)) <span class="comment">#184</span></span><br></pre></td></tr></table></figure><p><strong>제너레이터 사용]</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pows</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">yield</span> i**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">N = range(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">st = pows(N)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> st:</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line">print(sys.getsizeof(st)) <span class="comment">#112</span></span><br></pre></td></tr></table></figure><p>메모리 사용량을 본다면 차이가 생겼음을 알 수 있다. 적은 데이터로도 저렇게 차이가 나는데 정말 많은 데이터를 가지고 한다면 큰 차이가 생길 것이다.</p><h3 id="yield-from"><a href="#yield-from" class="headerlink" title="yield from"></a>yield from</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pows</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br></pre></td></tr></table></figure><p>위의 for문을 간단하게 해결할 수 있는 방법이 있다.(파이썬 3.3이상 지원)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pows</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> s</span><br></pre></td></tr></table></figure><p>s에 함수를 넣어도 되지만, for문으로 i의 값에 제곱을 한다거나 변화하는 방법을 바로 적용하지 못하는 점은 다소 아쉽다.</p><h2 id="제너레이터-표현식"><a href="#제너레이터-표현식" class="headerlink" title="제너레이터 표현식"></a>제너레이터 표현식</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 제너레이터 함수</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> s</span><br><span class="line"></span><br><span class="line">s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">res = show(s)</span><br><span class="line"></span><br><span class="line">print(type(res)) <span class="comment">#&lt;class 'generator'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 제너레이터 표현식</span></span><br><span class="line">res = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">print(type(res)) <span class="comment">#&lt;class 'generator'&gt;</span></span><br></pre></td></tr></table></figure><p>제너레이터 표현식은 메모리를 효율적으로 사용할 수 있으며, 함수를 별도로 정의해야하는 불편함도 없다.</p><p><code>next()</code>을 써야하는 불편함(?)은 있다고 생각하는가? <strong>lazy evaluation</strong>의 장점을 버리지 말자.</p><h3 id="제너레이터-표현식-사용-예시"><a href="#제너레이터-표현식-사용-예시" class="headerlink" title="제너레이터 표현식 사용 예시"></a>제너레이터 표현식 사용 예시</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(s)</span>:</span></span><br><span class="line">    sumV = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        sumV += i</span><br><span class="line">    <span class="keyword">return</span> sumV</span><br><span class="line"></span><br><span class="line">s = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">res = sum(s)</span><br><span class="line">print(res) <span class="comment">#55</span></span><br><span class="line"></span><br><span class="line">print(sys.getsizeof(s)) <span class="comment">#184</span></span><br></pre></td></tr></table></figure><p>위와 같이 쓰는 것을 제너레이터 표현식으로 사용하여 쓸 수도 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(s)</span>:</span></span><br><span class="line">    sumV = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        sumV += i</span><br><span class="line">    <span class="keyword">return</span> sumV</span><br><span class="line"></span><br><span class="line">s = (i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">res = sum(s)</span><br><span class="line">print(res) <span class="comment">#55</span></span><br><span class="line"></span><br><span class="line">print(sys.getsizeof(s)) <span class="comment">#112</span></span><br></pre></td></tr></table></figure><p>원하는 값도 얻으면서 메모리도 줄일 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Generators </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Map &amp; Filter</title>
      <link href="/2020/01/07/python-middle-map-filter/"/>
      <url>/2020/01/07/python-middle-map-filter/</url>
      
        <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><strong><code>map(Function, Iterable Object)</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">M, N = map(int, input().split())</span><br><span class="line">arr = list(map(int, input().split()))</span><br></pre></td></tr></table></figure><p>알고리즘 할때 가장 많이 쓰는 map용법이다.</p><p>첫번째 인자에 함수가 들어가니 만든 함수를 넣을 수도 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">N = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">res = list(map(pow, N))</span><br><span class="line">print(res) <span class="comment">#[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><p>함수 파라미터 갯수만큼 2번째 인자가 그만큼 더 필요할 수도 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(n, m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n + m</span><br><span class="line"></span><br><span class="line">N = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">M = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">res = list(map(sum, N, M))</span><br><span class="line">print(res) <span class="comment">#[6, 6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure><p>함수 이름을 <code>sum</code>이라 한다면 내장되어 있는 sum함수를 사용할 수 없다. 그러니, 이전에 다룬 Lambda를 이용해서 사용하자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">M = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">res = list(map(<span class="keyword">lambda</span> n, m: n+m, N, M))</span><br><span class="line">print(res) <span class="comment">#[6, 6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>값을 걸러내는 기능</p><p><strong><code>filter(Function, Iterable Object)</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">res = list(filter(<span class="keyword">lambda</span> x: x%<span class="number">3</span>, N))</span><br><span class="line">print(res) <span class="comment">#[1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="Comprehension-변환"><a href="#Comprehension-변환" class="headerlink" title="Comprehension 변환"></a>Comprehension 변환</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">N = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">res = list(filter(<span class="keyword">lambda</span> x: x%<span class="number">3</span>, map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, N)))</span><br><span class="line">print(res) <span class="comment">#[1, 4, 16, 25]</span></span><br></pre></td></tr></table></figure><p>으로 나타낼 수 있는 것을 Comprehension을 사용하여 나타낼 수도 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">N = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">res = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> N <span class="keyword">if</span> i%<span class="number">3</span>]</span><br><span class="line">print(res) <span class="comment">#[1, 4, 16, 25]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Filter </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] OOP Training</title>
      <link href="/2020/01/07/java-oop-training/"/>
      <url>/2020/01/07/java-oop-training/</url>
      
        <content type="html"><![CDATA[<p><strong>Object-oriented Programming, 객체 지향 프로그래밍</strong></p><p>먼저, 궁금했던 점에 대해서 기재</p><ol><li><strong>출력문에서 5/3이면 int형으로 나오는지, double형으로 나오는지</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">5</span>/<span class="number">3</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(((Object) (<span class="number">5</span>/<span class="number">3</span>)).getClass().getTypeName()); <span class="comment">//java.lang.Integer</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">5</span>/<span class="number">3</span>;</span><br><span class="line">System.out.println(res); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> res = <span class="number">5</span>/<span class="number">3</span>;</span><br><span class="line">System.out.println(res); <span class="comment">//1.0</span></span><br></pre></td></tr></table></figure><p>예상으로는 자동형변환이 이뤄져서 <code>double</code> 타입이 나올거라고 생각하였지만, <code>int</code>형이 나왔다.</p><p>double형으로 선언을 하여도 받아오는 값은 1.0이었다.</p><p>소수점이 계산된 값을 가져오기 위해서는 처음부터 숫자를 소수로 주어지거나 형변환을 명시적으로 주어 처리해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println((<span class="keyword">double</span>)<span class="number">5</span>/<span class="number">3</span>); <span class="comment">//1.6666666666666667</span></span><br><span class="line">System.out.println(<span class="number">5.0</span>/<span class="number">3</span>); <span class="comment">//1.6666666666666667</span></span><br></pre></td></tr></table></figure><ol><li><strong>반올림 방법</strong></li></ol><p>그렇다면 반올림은 <code>Math.round()</code>을 통해 하면 될텐데, 2째 자리까지 보여지게 하려면 어떻게 해야할까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Math.round(<span class="number">5.0</span>/<span class="number">3</span>*<span class="number">100</span>)/<span class="number">100.0</span>); <span class="comment">//1.67</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 이해를 돕기위해 소수점 셋째자리까지</span></span><br><span class="line">System.out.println(Math.round(<span class="number">5.0</span>/<span class="number">3</span>*<span class="number">1000</span>)/<span class="number">1000.0</span>); <span class="comment">//1.667</span></span><br></pre></td></tr></table></figure><p>위와 같이 보여질 자리수만큼 곱해주었다가 나눠주면 된다.</p><h2 id="Problem-01"><a href="#Problem-01" class="headerlink" title="Problem 01."></a>Problem 01.</h2><p>다음은 컴퓨터 게임의 병사(marine)를 클래스로 정의한 것이다. 이 클래스의 멤버 중에 static을 붙여야 하는 것은 어떤 것들이고 그 이유는 무엇인가? (단, 모든 병사의 공격력과 방어력은 같아야 한다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Marine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>; <span class="comment">//위치 좌표(x,y)</span></span><br><span class="line">    <span class="keyword">int</span> hp = <span class="number">60</span>; <span class="comment">//현재 체력</span></span><br><span class="line">    <span class="keyword">int</span> weapon = <span class="number">6</span>; <span class="comment">//공격력</span></span><br><span class="line">    <span class="keyword">int</span> armor = <span class="number">0</span>; <span class="comment">//방어력</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">weaponUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weapon++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">armorUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        armor++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>모든 병사의 공격력과 방어력은 같다고 하였기에 인스턴스 변수가 아닌 static으로 선언해준다. 인스턴스 변수일 경우에는 각 객체마다 가지고 있는 공격력과 방어력이 다를 수 있기에…</p><p>그리고 static변수로 바꿔준 공격력과 방어력 변수를 사용하는 Instance Method에 static Method로 변경해준다.</p><p><strong>답안]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Marine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>; <span class="comment">//위치 좌표(x,y)</span></span><br><span class="line">    <span class="keyword">int</span> hp = <span class="number">60</span>; <span class="comment">//현재 체력</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> weapon = <span class="number">6</span>; <span class="comment">//공격력</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> armor = <span class="number">0</span>; <span class="comment">//방어력</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">weaponUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        weapon++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">armorUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        armor++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Problem-02"><a href="#Problem-02" class="headerlink" title="Problem 02."></a>Problem 02.</h2><p>다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오)</p><ol><li>모든 생성자의 이름은 클래스의 이름과 동일해야한다.</li><li>생성자는 객체를 생성하기 위한 것이다.</li><li>클래스에는 생성자가 반드시 하나 이상 있어야 한다.</li><li>생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다.</li><li>생성자는 오버로딩 할 수 없다.</li></ol><p>생성자는 객체를 생성할 때 사용되기는 하지만, 객체를 초기화할 목적으로 사용된다.</p><p>객체를 생성하는 것은 <code>new</code> 연산자이다.</p><p>생성자는 오버로딩이 가능하여 하나의 클래스에 여러 개의 생성자를 정의할 수 있다.</p><p><strong>답안]</strong> 2, 5</p><h2 id="Problem-03"><a href="#Problem-03" class="headerlink" title="Problem 03."></a>Problem 03.</h2><p>다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오)</p><ol><li>객체 자신을 가리키는 참조변수이다.</li><li>클래스 내에서라면 어디서든 사용할 수 있다.</li><li>지역변수와 인스턴스변수를 구별할 때 사용한다.</li><li>클래스 메서드 내에서는 사용할 수 없다.</li></ol><p>this는 클래스 멤버(static이 붙은 변수나 메소드)에는 사용할 수 없다.</p><p><strong>답안]</strong> 2</p><h2 id="Problem-04"><a href="#Problem-04" class="headerlink" title="Problem 04."></a>Problem 04.</h2><p>다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오)</p><ol><li>메서드의 이름이 같아야 한다.</li><li>매개변수의 개수나 타입이 달라야 한다.</li><li>리턴타입이 달라야 한다.</li><li>매개변수의 이름이 달라야 한다.</li></ol><p>오버라이딩의 조건</p><ol><li><p>메서드 이름이 같아야 한다.</p></li><li><p>매개변수의 개수 또는 타입이 달라야 한다.</p></li><li><p>매개변수는 같고 리턴타입이 다른 경우는 오버로딩이 성립되지 않는다.</p><p>(리턴타입은 오버로딩을 구현하는데 아무런 영향을 주지 못한다.)</p></li></ol><p><strong>답안]</strong> 3, 4</p><h2 id="Problem-05"><a href="#Problem-05" class="headerlink" title="Problem 05."></a>Problem 05.</h2><p>다음 중 아래의 add 메서드를 올바르게 오버로딩 한 것은? (모두 고르시오)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a+b; &#125;</span><br></pre></td></tr></table></figure><ol><li>long add(int x, int y) { return x+y; }</li><li>long add(long a, long b) { return a+b; }</li><li>int add(byte a, byte b) { return a+b; }</li><li>int add(long a, int b) { return (int)(a+b); }</li></ol><p>오버라이딩의 조건</p><ol><li><p>메서드 이름이 같아야 한다.</p></li><li><p>매개변수의 개수 또는 타입이 달라야 한다.</p></li><li><p>매개변수는 같고 리턴타입이 다른 경우는 오버로딩이 성립되지 않는다.</p><p>(리턴타입은 오버로딩을 구현하는데 아무런 영향을 주지 못한다.)</p></li></ol><p><strong>답안]</strong> 2, 3, 4</p><h2 id="Problem-06"><a href="#Problem-06" class="headerlink" title="Problem 06."></a>Problem 06.</h2><p>다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오)</p><ol><li>멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참조할 수 있다.</li><li>지역변수는 사용하기 전에 반드시 초기화해야 한다.</li><li>초기화 블럭보다 생성자가 먼저 수행된다.</li><li>명시적 초기화를 제일 우선적으로 고려해야 한다.</li><li>클래스변수보다 인스턴스변수가 먼저 초기화된다.</li></ol><p>클래스 변수는 클래스가 처음 메모리에 로딩될 때, 자동 초기화되므로 인스턴스 변수보다 먼저 초기화 된다. 그리고 생성자는 초기화 블럭이 수행된 다음에 수행된다.</p><p><strong>답안]</strong> 3, 5</p><h2 id="Problem-07"><a href="#Problem-07" class="headerlink" title="Problem 07."></a>Problem 07.</h2><p>다음중 인스턴스 변수의 초기화 순서가 올바른 것은?</p><ol><li>기본값 - 명시적 초기화 - 초기화 블럭 - 생성자</li><li>기본값 - 명시적 초기화 - 생성자 - 초기화 블럭</li><li>기본값 - 초기화 블럭 - 명시적 초기화 - 생성자</li><li>기본값 - 초기화 블럭 - 생성자 - 명시적 초기화</li></ol><p>클래스 변수의 초기화 시점 : 클래스가 처음 로딩될 때 단 한번 초기화 된다.</p><p>인스턴스 변수의 초기화 시점 : 인스턴스가 생성될 때마다 각 인스턴스별로 초기화가 이뤄진다.</p><p>클래스 변수의 초기화 순서 : 기본값 -&gt; 명시적 초기화 -&gt; 클래스 초기화 블럭</p><p>인스턴스 변수의 초기화 순서 : 기본값 -&gt; 명시적 초기화 -&gt; 인스턴스 초기화 블럭 -&gt; 생성자</p><p><strong>답안]</strong> 1</p><h2 id="Problem-08"><a href="#Problem-08" class="headerlink" title="Problem 08."></a>Problem 08.</h2><p>다음 중 지역변수에 대한 설명으로 옳지 않은 것은? (모두 고르시오)</p><ol><li>자동 초기화되므로 별도의 초기화가 필요없다.</li><li>지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다.</li><li>메서드의 매개변수로 선언된 변수도 지역변수이다.</li><li>클래스변수나 인스턴스변수보다 메모리 부담이 적다.</li><li>힙(heap)영역에 생성되며 가비지 컬렉터에 의해 소멸된다.</li></ol><p>지역변수는 자동 초기화 되지 않기 때문에 사용하기 전에 반드시 적절한 값으로 초기화 해주어야한다. 지역변수는 자신이 선언된 블럭이나 메서드가 종료되면 소멸되므로 메모리 부담이 적다. 힙(heap) 영역에는 인스턴스(인스턴스 변수)가 생성되는 영역이며, 지역변수는 호출스택(call stack)에 생성된다.</p><p><strong>답안]</strong> 1, 5</p><h2 id="Problem-09"><a href="#Problem-09" class="headerlink" title="Problem 09."></a>Problem 09.</h2><p>호출스택이 다음과 같은 상황일 때 옳지 않은 설명은? (모두 고르시오)</p><table><thead><tr><th>[CallStack]</th></tr></thead><tbody><tr><td>println</td></tr><tr><td>method1</td></tr><tr><td>method2</td></tr><tr><td>main</td></tr></tbody></table><ol><li>제일 먼저 호출스택에 저장된 것은 main메서드이다.</li><li>println메서드를 제외한 나머지 메서드들은 모두 종료된 상태이다.</li><li>method2메서드를 호출한 것은 main메서드이다.</li><li>println메서드가 종료되면 method1메서드가 수행을 재개한다.</li><li>main-method2-method1-println의 순서로 호출되었다.</li><li>현재 실행중인 메서드는 println뿐이다.</li></ol><p>호출스택의 제일 위에 있는 메서드가 현재 수행중인 메서드이며, 호출스택 안의 나머지 메서드들은 대기상태이다.</p><p><strong>답안]</strong> 2</p><h2 id="Problem-10"><a href="#Problem-10" class="headerlink" title="Problem 10."></a>Problem 10.</h2><p>다음과 같이 정의된 메서드를 작성하고 테스트하시오.</p><p>메서드명 : shuffle</p><p>기능 : 주어진 배열에 담긴 값의 위치를 바꾸는 작업을 반복하여 뒤섞이게 한다. 처리한 배열을 반환한다.</p><p>반환타입 : int[]</p><p>매개변수 : int[] arr - 정수값이 담긴 배열</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  shuffle 메서드를 작성하시오.</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] original = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(original));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] result = shuffle(original);</span><br><span class="line">        System.out.println(Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>답안]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Card</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] shuffle(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) &#123; <span class="comment">//유효성 체크</span></span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length*<span class="number">2</span>; i++) &#123; <span class="comment">//*2만큼 하면 충분히 섞이기에</span></span><br><span class="line">            <span class="keyword">int</span> x = (<span class="keyword">int</span>)(Math.random()*arr.length);</span><br><span class="line">            <span class="keyword">int</span> y = (<span class="keyword">int</span>)(Math.random()*arr.length);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> temp = arr[x];</span><br><span class="line">            arr[x] = arr[y];</span><br><span class="line">            arr[y] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] original = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(original));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result = shuffle(original);</span><br><span class="line">        System.out.println(Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Problem-11"><a href="#Problem-11" class="headerlink" title="Problem 11."></a>Problem 11.</h2><p>다음과 같이 정의된 메서드를 작성하고 테스트하시오.</p><p>메서드명 : isNumber</p><p>기능 : 주어진 문자열이 모두 숫자로만 이루어져 있는지 확인한다. 모두 숫자로만 이루어져 있으면 true 반환, 아니라면 false 반환</p><p> 만일 주어진 문자열이 null이거나 빈문자열 ‘’이라면 false 반환</p><p>반환타입 : boolean</p><p>매개변수 : String str - 검사할 문자열</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    </span><br><span class="line">    //isNumber 메서드를 작성하시오.</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String str = &quot;123&quot;;</span><br><span class="line">        System.out.println(str + &quot;는 숫자입니까?&quot; + isNumber(str));</span><br><span class="line">        </span><br><span class="line">        str = &quot;1234o&quot;;</span><br><span class="line">        System.out.println(str + &quot;는 숫자입니까?&quot; + isNumber(str));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>답안]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">'0'</span> &lt;= str.charAt(i) &amp;&amp; str.charAt(i) &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"123"</span>;</span><br><span class="line">        System.out.println(str + <span class="string">"는 숫자입니까?"</span> + isNumber(str));</span><br><span class="line"></span><br><span class="line">        str = <span class="string">"1234o"</span>;</span><br><span class="line">        System.out.println(str + <span class="string">"는 숫자입니까?"</span> + isNumber(str));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Information hiding, 정보 은닉</title>
      <link href="/2019/12/29/java-information-hiding/"/>
      <url>/2019/12/29/java-information-hiding/</url>
      
        <content type="html"><![CDATA[<h2 id="Access-Control-Specifiers-접근-제어-지시자"><a href="#Access-Control-Specifiers-접근-제어-지시자" class="headerlink" title="Access Control Specifiers, 접근 제어 지시자"></a>Access Control Specifiers, 접근 제어 지시자</h2><table><thead><tr><th>지시자</th><th>클래스 내부</th><th>동일 패키지</th><th>상속받은 클래스</th><th>이외의 영역</th></tr></thead><tbody><tr><td>public</td><td>🟢</td><td>🟢</td><td>🟢</td><td>🟢</td></tr><tr><td>protected</td><td>🟢</td><td>🟢</td><td>🟢</td><td>✖️</td></tr><tr><td>default</td><td>🟢</td><td>🟢</td><td>✖️</td><td>✖️</td></tr><tr><td>private</td><td>🟢</td><td>✖️</td><td>✖️</td><td>✖️</td></tr></tbody></table><p>인스턴스 변수는 정보은닉의 대상으로 외부에서는 허용한 메서드(Access Method)를 통해 간접 접근을 이용하여야 한다.</p><p>이를 통해 동일한 클래스 명을 사용할 수 있게 경로(Path)를 나눠서 사용할수도 있으며, 외부에서 클래스 내부의 정보에 함부록 접근하지 못하도록 한다.</p><ul><li>동일 클래스명 사용 가능(패키지 이용)</li><li>클래스 내부 정보 함부록 접근 방지</li><li>클래스 내부 데이터 잘못된 사용으로 인한 오류 방지</li></ul><h3 id="클래스가-default로-생성-생성자가-public이라면"><a href="#클래스가-default로-생성-생성자가-public이라면" class="headerlink" title="클래스가 default로 생성, 생성자가 public이라면?"></a>클래스가 default로 생성, 생성자가 public이라면?</h3><p>동일 패키지에서만 인스턴스가 생성 가능하다.</p><p>이처럼, 더 큰 범위가 어떠한 접근 제어 지시자를 가지고 있는지 확인하고 그 아랫 범위들이 사용 목적에 맞게 설정되어야한다.</p><h2 id="어떤-클래스를-public으로-선언할까"><a href="#어떤-클래스를-public으로-선언할까" class="headerlink" title="어떤 클래스를 public으로 선언할까?"></a>어떤 클래스를 public으로 선언할까?</h2><p>public으로 클래스가 선언된다면 모든 영역에서 사용이 가능하기에 다른 Class가 동일 이름을 가지지 못한다.</p><p>클래스를 public으로 구현할 때는 주로, <strong>라이브러리를 만들 때</strong>이다.</p><p>간단한 더하기 빼기 계산기를 만들어보자.</p><p><strong>Calculator.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> taejunejoung.calc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Adder adder;</span><br><span class="line">    <span class="keyword">private</span> Subtractor subtractor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adder = <span class="keyword">new</span> Adder();</span><br><span class="line">        subtractor = <span class="keyword">new</span> Subtractor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adder.addNum(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subNum</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subtractor.subNum(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOperating</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"덧셈 횟수: "</span> + adder.getAddCnt());</span><br><span class="line">        System.out.println(<span class="string">"뺄셈 횟수: "</span> + subtractor.getSubCnt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Adder.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> taejunejoung.calc;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> addCnt;</span><br><span class="line"></span><br><span class="line">    Adder() &#123;</span><br><span class="line">        addCnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        addCnt++;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAddCnt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addCnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Subtractor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> taejunejoung.calc;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subtractor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> subCnt;</span><br><span class="line"></span><br><span class="line">    Subtractor() &#123;</span><br><span class="line">        subCnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">subNum</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        subCnt++;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSubCnt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subCnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CalcTest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> taejunejoung.calc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calculator calc = <span class="keyword">new</span> Calculator();</span><br><span class="line">        System.out.println(calc.addNum(<span class="number">5</span>,<span class="number">3</span>)); <span class="comment">//8</span></span><br><span class="line">        System.out.println(calc.subNum(<span class="number">5</span>,<span class="number">3</span>)); <span class="comment">//2</span></span><br><span class="line">        System.out.println(calc.addNum(<span class="number">7</span>,<span class="number">0</span>)); <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line">        calc.showOperating();</span><br><span class="line">        <span class="comment">//덧셈 횟수: 2</span></span><br><span class="line">        <span class="comment">//뺄셈 횟수: 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다른 Class들은 (default)로 사용하여 패키지 내에서만 사용할 수 있게 만들고, 하나의 Class만을 접근할 수 있게 Public으로 두었다. 노출할 Class만 public으로 두는 것이 좋다.</p><ul><li><p>유지보수가 편하다.</p><blockquote><p>변경되는 클래스의 범위를 최소화</p></blockquote></li><li><p>작은 크기의 클래스를 다른 클래스의 정의에도 활용할 수 있다.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Information hiding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Class &amp; Instance</title>
      <link href="/2019/12/29/java-class-instance/"/>
      <url>/2019/12/29/java-class-instance/</url>
      
        <content type="html"><![CDATA[<h2 id="Class와-Instance-관계"><a href="#Class와-Instance-관계" class="headerlink" title="Class와 Instance 관계"></a>Class와 Instance 관계</h2><p>클래스는 붕어빵 틀이고 인스턴스는 붕어빵이다.</p><p>클래스와 인스턴스 관계를 이해했다면, 정말 이 말이 너무도 와닿는 말 일수 밖에 없다.</p><p>이와 유사한 예로서 검을 만드는 거푸집과 그로 인해 만들어진 검들을 예로 들어보자.</p><p>검을 만드는 거푸집이 클래스라면, 클래스는 사회적인 현상을 객체화한 것이다.</p><p>만들어진 검이 인스턴스이기에, 객체인 인스턴스는 사용된다면 하나의 검의 역할을 하게 되는 것이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassName name = <span class="keyword">new</span> ClassName();</span><br></pre></td></tr></table></figure><p>name은 참조 변수로서 인스턴스의 주소값(참조값)을 가지고 있다.</p><p><code>new</code>는 객체 생성 명령어로서, new ClassName은 해당 클래스 객체를 생성한다는 것이다.</p><p><code>ClassName()</code>의 ()는 해당 클래스의 기본 생성자를 가리킨다.</p><p>해당 클래스의 기본 생성자가 없다면 오류가 발생할 것이다.</p><p>(단, 해당 클래스에 생성자가 아무것도 없다면 default는 기본 생성자이다.)</p><h3 id="메모리-관점"><a href="#메모리-관점" class="headerlink" title="메모리 관점"></a>메모리 관점</h3><p><strong>클래스에 존재하는 변수, 메소드는 메모리 공간 할당된 형태가 아니다.</strong></p><p>인스턴스 객체는 메모리 공간에 할당된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*ClassInstance Class*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassInstance</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Test Class*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassInstance ci1 = <span class="keyword">new</span> ClassInstance();</span><br><span class="line">        ClassInstance ci2 = <span class="keyword">new</span> ClassInstance();</span><br><span class="line"></span><br><span class="line">        ci1.setNum(<span class="number">5</span>);</span><br><span class="line">        ci2.setNum(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(ci1.getNum()); <span class="comment">//5</span></span><br><span class="line">        System.out.println(ci2.getNum()); <span class="comment">//7</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>인스턴스마다 서로 다른 주소값으로 접근하여 변수값이 다름을 알 수 있다.</p><h2 id="객체와-인스턴스"><a href="#객체와-인스턴스" class="headerlink" title="객체와 인스턴스"></a>객체와 인스턴스</h2><p>객체와 인스턴스는 자바에서 같은 말로 쓰이나, 상황에 따라 더 어울리는 말이 있다.</p><h3 id="객체가-더-어울릴-경우"><a href="#객체가-더-어울릴-경우" class="headerlink" title="객체가 더 어울릴 경우"></a>객체가 더 어울릴 경우</h3><blockquote><p>“과일 장수를 하시는 옆집 철수 아버님을 의미하는 객체를 생성한다”</p></blockquote><p>이는 철수 아버님을 프로그램상에서 표현한 것이므로 객체라는 표현이 더 어울린다.</p><h3 id="인스턴스가-더-어울릴-경우"><a href="#인스턴스가-더-어울릴-경우" class="headerlink" title="인스턴스가 더 어울릴 경우"></a>인스턴스가 더 어울릴 경우</h3><blockquote><p>“클래스 FruitSeller의 인스턴스 두 개를 생성한다”</p></blockquote><p>이 경우에는 FruitSeller 클래스가 틀로 사용됨을 강조하였기에 인스턴스라는 표현이 더 어울린다.</p><h3 id="인스턴스-변수와-인스턴스-메소드"><a href="#인스턴스-변수와-인스턴스-메소드" class="headerlink" title="인스턴스 변수와 인스턴스 메소드"></a>인스턴스 변수와 인스턴스 메소드</h3><p>메소드라는 이름이 붙은 이유는 메소드가 인스턴스의 행위 및 행동을 표현하는 방법(method)으로 사용되기 때문이다. 자바에서는 인스턴스 변수를 가리켜 ‘인스턴스 필드’라고 부르기도 한다.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Method</title>
      <link href="/2019/12/29/java-method/"/>
      <url>/2019/12/29/java-method/</url>
      
        <content type="html"><![CDATA[<h2 id="Main-Method"><a href="#Main-Method" class="headerlink" title="Main Method"></a>Main Method</h2><p>Java에서 main 메소드는 항상 먼저 실행하게 설정되어 있다.</p><p>그렇기에 main 메소드의 함수명은 main이어야 한다.</p><h2 id="Return"><a href="#Return" class="headerlink" title="Return"></a>Return</h2><p>메소드의 return은 2가지로 나누어져 사용된다.</p><ol><li><p>값의 반환</p><blockquote><p>선언된 타입으로 return이 이뤄진다.</p></blockquote></li><li><p>메소드의 종료</p><blockquote><p><code>void</code>일 때, return이 생략되어 있다고 보면 된다.</p></blockquote></li></ol><h2 id="전역변수와-지역변수"><a href="#전역변수와-지역변수" class="headerlink" title="전역변수와 지역변수"></a>전역변수와 지역변수</h2><p>전역변수는 말 그대로 global variable로서 어디서든 사용할 수 있다.</p><p>지역변수는 local variable로서 중괄호 내에서만 선언이 되어 사용되는 변수들이다.</p><blockquote><p>이 부분에 대해서는 이해가 부족한 것인지 의문이 생긴다.</p><p>사용하는 위치도 위치이지만, 접근 제어자를 고려하여 전역 변수와 지역 변수를 나누는게 더 옳은 것이지 않을까…?</p><p>이 부분에 대해서는 다른 개발자분들에게 질문을 해봐야겠다.</p></blockquote><h2 id="Recursion-재귀"><a href="#Recursion-재귀" class="headerlink" title="Recursion, 재귀"></a>Recursion, 재귀</h2><p><code>재귀</code>는 ‘이해하느냐 못하느냐’에 따라 코드가 달라진다고 느낀다.</p><p>‘나는 재귀에 대해서 아직 잘 모르고 있구나, 익숙하지 않구나’라는 것을 알고리즘 문제를 풀면 항상 느낀다.</p><p>재귀를 사용할 수 있는 상황인지 고려를 해보고 사용할 수 있는 상황이라면 쓰는 것이 코드의 질이 달라진다고 생각한다.</p><p>물론, 재귀를 사용하지 않고도 풀 수 있으나, 코드가 길어지는 부분을 쉽게 할 수 있는 장점이 있는 것이다.</p><p>그러기에 재귀함수를 이용하는 간단한 문제 2개를 풀어보자.</p><h3 id="1-팩토리얼"><a href="#1-팩토리얼" class="headerlink" title="1. 팩토리얼"></a>1. 팩토리얼</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Factorial Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factorial</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Factorial</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> num * factorial(num-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factorial fact = <span class="keyword">new</span> Factorial();</span><br><span class="line">        <span class="keyword">int</span> result = fact.factorial(<span class="number">5</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수로만 구현할 수 있지만 라이브러리를 만들 때 이런식으로 만들어가지 않을까하여 클래스를 이용하여 구현하였다.</p><h3 id="2-하노이의-탑"><a href="#2-하노이의-탑" class="headerlink" title="2. 하노이의 탑"></a>2. 하노이의 탑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> disk, <span class="keyword">char</span> from, <span class="keyword">char</span> mid, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(disk == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println( disk + <span class="string">"번 이동: "</span> + from + <span class="string">" -&gt; "</span> + to);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        hanoi(disk-<span class="number">1</span>, from, to, mid);</span><br><span class="line">        System.out.println(disk + <span class="string">"번 이동: "</span> + from + <span class="string">" -&gt; "</span> + to);</span><br><span class="line">        hanoi(disk-<span class="number">1</span>, mid, from, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하노이의 탑은 기본적인 3개의 기둥을 기본으로 두었다.</p><p>확실히 하노이의 탑과 같은 재귀는 고려해야하는 점이 생기는만큼 어렵다…</p><p>처음에 이 소스를 짠 사람이 대단하게 느껴진다…</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Method </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] 조건문과 반복문</title>
      <link href="/2019/12/28/java-loop/"/>
      <url>/2019/12/28/java-loop/</url>
      
        <content type="html"><![CDATA[<h2 id="for문"><a href="#for문" class="headerlink" title="for문"></a>for문</h2><p>알고 있던 for문이 아닌 다른 for문에 대해서 알아보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">7</span>; i&lt;j; i++, j--) &#123;</span><br><span class="line">    System.out.println(<span class="string">"i: "</span> + i + <span class="string">", j: "</span> + j);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * i: 0, j: 7</span></span><br><span class="line"><span class="comment">    * i: 1, j: 6</span></span><br><span class="line"><span class="comment">    * i: 2, j: 5</span></span><br><span class="line"><span class="comment">    * i: 3, j: 4</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for문을-while문-처럼-사용하는-방법"><a href="#for문을-while문-처럼-사용하는-방법" class="headerlink" title="for문을 while문 처럼 사용하는 방법"></a>for문을 while문 처럼 사용하는 방법</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( ; ; ) &#123;</span><br><span class="line">    System.out.println(<span class="string">"무한 루프"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="레이블을-설정하는-break문"><a href="#레이블을-설정하는-break문" class="headerlink" title="레이블을 설정하는 break문"></a>레이블을 설정하는 break문</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">outerLoop :</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span> &amp;&amp; j==<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span> outerLoop;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"i: "</span> + i + <span class="string">", j: "</span> + j);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * i: 0, j: 0</span></span><br><span class="line"><span class="comment">        * i: 0, j: 1</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Break-amp-Continue"><a href="#Break-amp-Continue" class="headerlink" title="Break &amp; Continue"></a>Break &amp; Continue</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break를 사용하면 사용된 범위의 for문을 나갈 수 있다.</p><p>그렇지만 이중 for문일 때 하나의 break문을 이용해서 나가는 방법에 대해서 알아보자.</p><p>지금까지 이러한 경우가 있을 때는 boolean 변수를 하나 더 이용해서 if문으로 검사하여 break를 두 개 사용하거나, 함수를 이용해서 return으로 처리했었다.</p><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 0</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * 2</span></span><br><span class="line"><span class="comment">    * 4</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 예제를 보게되면 <code>continue</code>에 대해서 쉽게 이해할 수 있다.</p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem]"></a>Problem]</h2><h3 id="01"><a href="#01" class="headerlink" title="01."></a>01.</h3><p>1+(-2)+3+(-4)+…과 같은 식으로 계속 더해나갔을 때, 몇까지 더해야 총합이 100이상이 되는지 구하시오.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sumV = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(sumV &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        sumV += num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sumV -= num;</span><br><span class="line">    &#125;</span><br><span class="line">    num += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(num); <span class="comment">//200</span></span><br><span class="line">System.out.println(sumV); <span class="comment">//100</span></span><br></pre></td></tr></table></figure><h3 id="02"><a href="#02" class="headerlink" title="02."></a>02.</h3><p>1+(1+2)+(1+2+3)+(1+2+3+4)+…+(1+2+3+4+5+6+7+8+9+10)의 결과를 계산하시오.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> num + sum(num-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sumV = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">        sumV += sum(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sumV); <span class="comment">//220</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a href="https://www.python.org/dev/peps/pep-3136/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-3136/</a></p><p>못 찾은 것일수도 있겠지만, 파이썬에는 레이블을 이용한 break문은 없다.</p><p>라이브러리를 사용하여 하는 방법은 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Operator Training</title>
      <link href="/2019/12/27/java-operator-traning/"/>
      <url>/2019/12/27/java-operator-traning/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span>; <span class="comment">//65</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1번</span></span><br><span class="line">System.out.println(<span class="number">1</span> + x &lt;&lt; <span class="number">33</span>);</span><br><span class="line"><span class="comment">// 2번</span></span><br><span class="line">System.out.println(y += <span class="number">10</span> - x++);</span><br><span class="line"><span class="comment">// 3번</span></span><br><span class="line">System.out.println(x += <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 4번</span></span><br><span class="line">System.out.println(<span class="string">'C'</span> - c);</span><br><span class="line"><span class="comment">// 5번</span></span><br><span class="line">System.out.println(<span class="string">'5'</span> - <span class="string">'0'</span>);</span><br><span class="line"><span class="comment">// 6번</span></span><br><span class="line">System.out.println(c+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 7번</span></span><br><span class="line">System.out.println(++c);</span><br><span class="line"><span class="comment">// 8번</span></span><br><span class="line">System.out.println(c++);</span><br><span class="line"><span class="comment">// 9번</span></span><br><span class="line">System.out.println(c);</span><br><span class="line"># 답</span><br><span class="line"><span class="number">1</span>. <span class="number">6</span></span><br><span class="line"><span class="number">2</span>. <span class="number">13</span></span><br><span class="line"><span class="number">3</span>. <span class="number">5</span></span><br><span class="line"><span class="number">4</span>. <span class="number">2</span></span><br><span class="line"><span class="number">5</span>. <span class="number">5</span></span><br><span class="line"><span class="number">6</span>. <span class="number">66</span></span><br><span class="line"><span class="number">7</span>. B</span><br><span class="line"><span class="number">8</span>. B</span><br><span class="line"><span class="number">9</span>. C</span><br></pre></td></tr></table></figure><h3 id="1번-1-x-lt-lt-33"><a href="#1번-1-x-lt-lt-33" class="headerlink" title="1번. 1 + x &lt;&lt; 33"></a>1번. 1 + x &lt;&lt; 33</h3><p>+와 += 의 연산자 우선순위가 다르다.</p><p>+는 비트 쉬프트 연산자보다 우선순위가 빠르지만, +=는 느리다.</p><p>(1 + 2) &lt;&lt; 33으로 나타낼 수 있고, int의 비트는 32까지이므로 결국은 1번 왼쪽으로 보낸 결과</p><p>즉, (1 + 2) * 2의 결과와 같다고 보면 된다.</p><p><strong>답: 6</strong></p><h3 id="2번-y-10-x"><a href="#2번-y-10-x" class="headerlink" title="2번. y += 10 - x++"></a>2번. y += 10 - x++</h3><p>y += 10이 오류가 날 것이라고 예상하였지만 아니다.</p><p>값을 초기화하면서 출력이 가능하다.</p><p>5 - 2 + 10 의 결과인 13이 나온다.</p><p>x++은 후위 증감 연산자로 후위식은 해당 값 처리 후, 증가된다.</p><p><strong>답: 13</strong></p><h3 id="3번-x-2"><a href="#3번-x-2" class="headerlink" title="3번. x += 2"></a>3번. x += 2</h3><p>위에서 후위 증가되었다는 것을 잊어서는 안된다.</p><p><strong>답: 5</strong></p><h3 id="4번-‘C’-c"><a href="#4번-‘C’-c" class="headerlink" title="4번. ‘C’ - c"></a>4번. ‘C’ - c</h3><p>A와 C는 2개의 차이가 있다.</p><p><strong>답: 2</strong></p><h3 id="5번-‘5’-‘0’"><a href="#5번-‘5’-‘0’" class="headerlink" title="5번. ‘5’ - ‘0’"></a>5번. ‘5’ - ‘0’</h3><p>5와 0은 5개의 차이가 있다.</p><p><strong>답: 5</strong></p><h3 id="6번-c-1"><a href="#6번-c-1" class="headerlink" title="6번. c+1"></a>6번. c+1</h3><p>c는 ‘A’이고 A는 int형으로 65의 값을 가지고 있다.</p><p>Promotion(타입 확장)이 이뤄져서 int형의 값이 나오게 된다.</p><p><strong>답: 66</strong></p><h3 id="7번-c"><a href="#7번-c" class="headerlink" title="7번. ++c"></a>7번. ++c</h3><p>c가 가지고 있는 값에서 전위 증가로 1을 더한 값을 만들어 주면 된다.</p><p>c는 <code>char type</code>이기에 계산을 위해서 65 + 1이 된 int형을 가졌다가 c 변수가 가지고 있는 char형으로 Casting(타입 축소)가 이뤄진다.</p><p><strong>답: B</strong></p><h3 id="8번-c"><a href="#8번-c" class="headerlink" title="8번. c++"></a>8번. c++</h3><p>위와 비슷하나 후위 증가는 해당 값이 처리되고 나서 증가하기에 현재 나오는 값의 변화는 생기지 않는다.</p><p><strong>답: B</strong></p><h3 id="9번-c"><a href="#9번-c" class="headerlink" title="9번. c"></a>9번. c</h3><p>위에서 후위 증가가 이뤄졌기 때문에 1을 더한 값이 나온다.</p><p>7번과 같은 이유로 char 타입이 나온다.</p><p><strong>답: C</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Operator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Operator</title>
      <link href="/2019/12/27/java-operator/"/>
      <url>/2019/12/27/java-operator/</url>
      
        <content type="html"><![CDATA[<h2 id="연산자-우선순위"><a href="#연산자-우선순위" class="headerlink" title="연산자 우선순위"></a>연산자 우선순위</h2><table><thead><tr><th>연산기호</th><th>결합방향</th><th>우선순위</th></tr></thead><tbody><tr><td>[ ], .</td><td>👉</td><td>1(높음)</td></tr><tr><td>expr++, expr–</td><td>👈🏿</td><td>2</td></tr><tr><td>++expr, –expr, +expr, -expr, ~, !, (type)</td><td>👈🏿</td><td>3</td></tr><tr><td>*, /, %</td><td>👉</td><td>4</td></tr><tr><td>+, -</td><td>👉</td><td>5</td></tr><tr><td>&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</td><td>👉</td><td>6</td></tr><tr><td>&lt;, &gt;, &lt;=, &gt;=, instanceof</td><td>👉</td><td>7</td></tr><tr><td>==, !=</td><td>👉</td><td>8</td></tr><tr><td>&amp;</td><td>👉</td><td>9</td></tr><tr><td>^</td><td>👉</td><td>10</td></tr><tr><td>|</td><td>👉</td><td>11</td></tr><tr><td>&amp;&amp;</td><td>👉</td><td>12</td></tr><tr><td>||</td><td>👉</td><td>13</td></tr><tr><td>? expr : expr</td><td>👈🏿</td><td>14</td></tr><tr><td>=, +=, -=, *=, /=, %=, &amp;=, ^=, |=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=</td><td>👈🏿</td><td>15(낮음)</td></tr></tbody></table><h2 id="논리-연산자와-Short-Circuit-Evaluation-Lazy-Evaluation-SCE"><a href="#논리-연산자와-Short-Circuit-Evaluation-Lazy-Evaluation-SCE" class="headerlink" title="논리 연산자와 Short-Circuit Evaluation(Lazy Evaluation), SCE"></a>논리 연산자와 Short-Circuit Evaluation(Lazy Evaluation), SCE</h2><p>연산자를 사용할 때는 우선순위를 고려해야한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>, num2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> result;</span><br><span class="line"></span><br><span class="line">result = (num1 += <span class="number">10</span>) &lt; <span class="number">0</span> &amp;&amp; (num2 += <span class="number">10</span>) &gt; <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"result : "</span> + result);</span><br><span class="line">System.out.println(<span class="string">"num1 : "</span> + num1 + <span class="string">", num2 : "</span> + num2);</span><br><span class="line"></span><br><span class="line">result = (num1 += <span class="number">10</span>) &gt; <span class="number">0</span> || (num2 += <span class="number">10</span>) &gt; <span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">"result : "</span> + result);</span><br><span class="line">System.out.println(<span class="string">"num1 : "</span> + num1 + <span class="string">", num2 : "</span> + num2);</span><br></pre></td></tr></table></figure><p>위의 소스의 결과는 참으로 재미있다.</p><p>논리 연산자에 대해서 정확히 알고 있는 사람이라면 당연한 것이지만…</p><p><code>&amp;&amp;</code>의 경우에는 앞에 값이 false가 나왔다면 뒤의 값이 뭐가 나오는지 계산할 필요 없이 false값이 나온다.</p><p><code>||</code>의 경우에는 앞에 값이 true가 나온다면 뒤의 값이 뭐가 나오는지 계산할 필요 없이 true값이 나온다.</p><p>이말은, 이러한 경우에는 뒤의 조건식은 실행해보지도 않는다는 것이다.</p><p>시간 복잡도를 고려할 때도 조건식의 순서를 따져서 놓으면 효율이 조금이나마 좋아질 수 있다는 뜻이다.</p><h2 id="비트-연산자-그리고-비트-쉬프트-연산자"><a href="#비트-연산자-그리고-비트-쉬프트-연산자" class="headerlink" title="비트 연산자 그리고 비트 쉬프트 연산자"></a>비트 연산자 그리고 비트 쉬프트 연산자</h2><p>CPU에게 있어서 곱셈과 나눗셈은 매우 부담이 되는 작업이다. 비트를 이동시키는 연산은 전혀 부담되지 않는 작업이다.</p><h3 id="Problem01"><a href="#Problem01" class="headerlink" title="Problem01."></a>Problem01.</h3><p>정수 7의 비트 열을 기반으로 2의 보수를 취하면 -7이 된다. 실제로 그런지 정수 7에 대한 2의 보수를 계산하여 출력하는 프로그램을 작성하시오.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// 10진법을 2진법으로 나타내는 방법 - Integer.toBinaryString()</span></span><br><span class="line">System.out.println(Integer.toBinaryString(~num + <span class="number">1</span>)); <span class="comment">//11111111111111111111111111111001</span></span><br><span class="line">num = ~num + <span class="number">1</span>;</span><br><span class="line">System.out.println(num); <span class="comment">//-7</span></span><br></pre></td></tr></table></figure><h3 id="Problem02"><a href="#Problem02" class="headerlink" title="Problem02."></a>Problem02.</h3><p>int형 정수 15678의 오른쪽에서 세 번째 비트와 다섯 번째 비트가 각각 어떻게 되는지 확인하여 출력하는 프로그램을 작성하시오.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">15678</span>;</span><br><span class="line">System.out.println(Integer.toBinaryString(num)); <span class="comment">//11110100111110</span></span><br><span class="line">System.out.println(num &gt;&gt; <span class="number">3</span> &amp; <span class="number">1</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(num &gt;&gt; <span class="number">5</span> &amp; <span class="number">1</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>연산자 우선순위를 생각하였을 때 비트 쉬프트 연산자가 먼저 이뤄지고 나서 비트 연산자가 이뤄진다.</p><p>옮기고자 하는 위치만큼 비트 쉬프트 연산자를 통해 옮겨주고 나서 비트 연산자를 이용하여 해당 값이 0이면 0이 나오게 하고, 1이라면 1이 나오게 <code>&amp;</code>을 사용하면 된다. bit는 0과 1만 있기에 다른 값은 고려하지 않아도 된다.</p><h3 id="Problem03"><a href="#Problem03" class="headerlink" title="Problem03."></a>Problem03.</h3><p>&lt;&lt; 연산은 대부분의 경우에 피연산자의 값에 2의 배수를 곱하는 결과를 보인다. 그러나 MSB[^1]를 변경시켜서 전혀 엉뚱한 결과를 보이는 경우도 있다. 음의 정수와 양의 정수를 하나씩 예로 들어서 엉뚱한 결과가 어떻게 발생하는지 설명하고, 이를 증명하기 위한 간단한 프로그램을 작성하시오.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> bitset = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">num |= bitset;</span><br><span class="line">System.out.println(num); <span class="comment">//1073741831</span></span><br><span class="line">System.out.println(num &lt;&lt;= <span class="number">1</span>); <span class="comment">//-2147483634</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> minusNum = -<span class="number">12</span>;</span><br><span class="line">bitset = ~<span class="number">0</span>;</span><br><span class="line">bitset ^= <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">minusNum &amp;= bitset;</span><br><span class="line">System.out.println(minusNum); <span class="comment">//-1073741836</span></span><br><span class="line">System.out.println(minusNum &lt;&lt;= <span class="number">1</span>); <span class="comment">//2147483624</span></span><br></pre></td></tr></table></figure><p><code>01000000 00000000 00000000 00000001</code> 이러한 비트를 왼쪽으로 한 칸씩 이동시키면 음수가 된다.</p><p>반대로, <code>11000000 00000000 00000000 00000001</code> 이러한 비트를 오른쪽으로 한 칸씩 이동시키면 양수가 된다.</p><hr><p>[^1]: 최상위 비트 MSB, most significant bit, 반대 개념은 LSB</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Operator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Type Conversion, 형 변환</title>
      <link href="/2019/12/27/java-type-conversion/"/>
      <url>/2019/12/27/java-type-conversion/</url>
      
        <content type="html"><![CDATA[<h2 id="Implicit-Conversion-자동-형-변환"><a href="#Implicit-Conversion-자동-형-변환" class="headerlink" title="Implicit Conversion, 자동 형 변환"></a>Implicit Conversion, 자동 형 변환</h2><p>자동 형 변환, 묵시적 형 변환, 암시적 형 변환이라고도 불린다.</p><p><strong>Promotion(타입 확장)</strong></p><img src="/2019/12/27/java-type-conversion/java-implicit-conversion.jpg" class="slug"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> numInt = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">long</span> numLong = numInt;</span><br><span class="line">System.out.println(((Object)numLong).getClass().getTypeName()); <span class="comment">//java.lang.Long</span></span><br></pre></td></tr></table></figure><p>화살표 방향으로는 자동 형 변환이 이뤄질 수 있다.</p><p><strong>자동 형 변환에서는 데이터 손실이 이뤄지지 않는다</strong>.</p><h2 id="Explicit-Conversion-명시적-형-변환"><a href="#Explicit-Conversion-명시적-형-변환" class="headerlink" title="Explicit Conversion, 명시적 형 변환"></a>Explicit Conversion, 명시적 형 변환</h2><p><strong>Casting(타입 축소)</strong> 과정에서 데이터의 손실이 이뤄질 순 있지만, 형 변환이 필요할 때 사용</p><p>흔한 예로서 파이썬에서 소수점이 나왔을 때 <code>int(value)</code>를 통해 소수점의 값을 버리고 정수값을 가져오는 코드를 알고리즘에서 많이 사용한다. 자바에서는 아래와 같이 처리한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> numFloat = <span class="number">3.14f</span>;</span><br><span class="line"><span class="keyword">int</span> numInt = (<span class="keyword">int</span>) numFloat;</span><br><span class="line">System.out.println(numInt); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem]"></a>Problem]</h3><p>아래의 코드는 몇 번의 형 변환이 이뤄지는가?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1번</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">System.out.println(num * <span class="number">2.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2번</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">n *= <span class="number">2.2</span>;</span><br><span class="line">System.out.println(n);</span><br></pre></td></tr></table></figure><p>1번의 경우는 결과값이 <code>11.0</code>이 나오므로 1번의 형 변환(Promotion)이 이뤄진다.</p><p>2번의 경우는 결과값이 <code>11</code>이 나온다.<br>총 2번의 형 변환이 이뤄지는데 첫 번째는 2.2를 곱한 11.0인 double형태로 Promotion이 이뤄지고, n이 int형으로 선언 되었기에 2번째 형 변환으로 Casting이 이뤄져 int형의 값이 나오게 된다.</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Type Conversion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Primitive Type Training</title>
      <link href="/2019/12/26/java-primitive-training/"/>
      <url>/2019/12/26/java-primitive-training/</url>
      
        <content type="html"><![CDATA[<h2 id="1-String-int-int"><a href="#1-String-int-int" class="headerlink" title="1. String + int + int"></a>1. String + int + int</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1번</span></span><br><span class="line">System.out.println(<span class="string">"Test"</span> + <span class="number">1</span> + <span class="number">2</span>); <span class="comment">//Test12</span></span><br><span class="line"><span class="comment">//2번</span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">"Test"</span>); <span class="comment">//3Test</span></span><br><span class="line"><span class="comment">//3번</span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="string">"Test"</span> + <span class="number">2</span>); <span class="comment">//1Test3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1번이 Test3이라고 나오게 하기 위해선</span></span><br><span class="line">System.out.println(<span class="string">"Test"</span> + (<span class="number">1</span> + <span class="number">2</span>)); <span class="comment">//Test3</span></span><br></pre></td></tr></table></figure><p>Python에서는 <code>&lt;class &#39;str&#39;&gt;</code>과 <code>&lt;class &#39;int&#39;&gt;</code>의 합이 될 경우에는 <strong>TypeError: can only concatenate str (not “int”) to str</strong>가 발생한다.</p><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><strong>Problem</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">true</span> + <span class="string">""</span>); <span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">'A'</span> + <span class="string">'B'</span>); <span class="comment">//131</span></span><br><span class="line">System.out.println(<span class="string">'1'</span> + <span class="number">2</span>); <span class="comment">//51</span></span><br><span class="line">System.out.println(<span class="string">'1'</span> + <span class="string">'2'</span>); <span class="comment">//99</span></span><br><span class="line">System.out.println(<span class="string">'J'</span> + <span class="string">"ava"</span>); <span class="comment">//Java</span></span><br><span class="line"><span class="comment">//System.out.println(true + null); //오류발생</span></span><br></pre></td></tr></table></figure><h2 id="2-선언과-초기화"><a href="#2-선언과-초기화" class="headerlink" title="2. 선언과 초기화"></a>2. 선언과 초기화</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 선언</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 초기화</span></span><br><span class="line">num = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 선언과 초기화</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h2 id="3-보수-1의-보수-2의-보수"><a href="#3-보수-1의-보수-2의-보수" class="headerlink" title="3. 보수(1의 보수, 2의 보수)"></a>3. 보수(1의 보수, 2의 보수)</h2><p><strong>1의 보수</strong>는 원래의 값의 비트를 반전 시킨 값이다.</p><p>5에 1의 보수와 2의 보수를 구해보자.</p><table><thead><tr><th>본래값 5</th><th>0(부호)</th><th>0</th><th>0</th><th>0</th><th>0</th><th>1</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>1의 보수</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>2의 보수</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><p><strong>2의 보수</strong>: 1의 보수 + 1</p><p>본래의 값의 비트와 2의 보수를 더하면 0이 나온다.</p><h2 id="4-소수점-정확하지-않을-때"><a href="#4-소수점-정확하지-않을-때" class="headerlink" title="4. 소수점 정확하지 않을 때"></a>4. 소수점 정확하지 않을 때</h2><p>소수를 bit로 다 담을 수가 없기에 오류가 생길 때도 있다.</p><p>이건 python도 피해갈 수 없는 문제이다.</p><p>그러면 어떻게 해야 조금 더 원하는 답에 가까운 답을 얻을 수 있을까? 아니, 어떻게 원하는 답을 얻을 수 있을까?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">2.0</span> - <span class="number">1.1</span>;</span><br><span class="line">System.out.println(num); <span class="comment">//0.8999999999999999</span></span><br><span class="line">System.out.printf(<span class="string">"%.2f\n"</span>, num); <span class="comment">//0.90</span></span><br><span class="line">System.out.println(String.format(<span class="string">"%.2f"</span>, num)); <span class="comment">//0.90</span></span><br><span class="line">System.out.println(<span class="number">0.9</span> - num); <span class="comment">//1.1102230246251565E-16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> res = Double.parseDouble(String.format(<span class="string">"%.2f"</span>, num));</span><br><span class="line">System.out.println(res); <span class="comment">//0.9</span></span><br><span class="line">System.out.println(<span class="number">0.9</span> - res); <span class="comment">//0.0</span></span><br></pre></td></tr></table></figure><p>이를 해결하기 위해 필자는 formatting을 한 이후에 그 값을 이용하는 방법을 사용하였다.</p><h2 id="5-Primitive-Type"><a href="#5-Primitive-Type" class="headerlink" title="5. Primitive Type"></a>5. Primitive Type</h2><h3 id="Short-Int"><a href="#Short-Int" class="headerlink" title="- Short / Int"></a>- Short / Int</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> num1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">short</span> num2 = <span class="number">2</span>;</span><br><span class="line">System.out.println(((Object)num1).getClass().getTypeName()); <span class="comment">//java.lang.Short</span></span><br><span class="line">System.out.println(((Object)(num1 + num2)).getClass().getTypeName()); <span class="comment">//java.lang.Integer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> num3 = (<span class="keyword">short</span>)(num1 + num2);</span><br><span class="line">System.out.println(((Object)num3).getClass().getTypeName()); <span class="comment">//java.lang.Short</span></span><br></pre></td></tr></table></figure><p>Java의 정수형 기본 타입은 <code>int</code>형이다. 그렇기에 short + short값에 대해서 int형으로 바뀌게 되어 저장된다.</p><p>그렇다면 byte와 short는 왜 사용하는 것일까?</p><p>Java에서 속도측면에서만 본다면 int형이 기본이기에 int형으로 사용하는 것이 더 빠르다.</p><p>그러나, 메모리측면에서 본다면 byte와 short를 쓰는 것이 맞다.</p><p>현재의 컴퓨터 성능으로 본다면 우리는 속도를 선택해야하는 것이 맞는 것인데 그러면 어느 시점에 사용하는 것일까?</p><p>답은 간단하다. 빅데이터 시대인 지금에 맞게 엄청난 데이터를 다루는 일이 있다면 메모리를 신경써야한다. 예를 들어서 영상의 3D 그래픽 정보나 노래와 같은 음원 정보를 저장할 때 쓰인다. 이와 같은 경우, 실수형일 때는 기본형 double이 아닌 float형을 쓰는 것이 더 낫다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> num1 = <span class="number">3.14f</span>;</span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">1234e-3</span>;</span><br><span class="line"><span class="keyword">double</span> num3 = <span class="number">5.43f</span>;</span><br><span class="line"><span class="keyword">long</span> num4 = <span class="number">1000000000L</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(num1); <span class="comment">//3.14</span></span><br><span class="line">System.out.println(num2); <span class="comment">//1.234</span></span><br><span class="line">System.out.println(num3); <span class="comment">//5.429999828338623</span></span><br><span class="line">System.out.println(num4); <span class="comment">//1000000000</span></span><br></pre></td></tr></table></figure><p>형변환에 대해서 알게 된다면 float형태일 때 f를 써서 표현하는 것으로 알고 있는데 어떻게 double에 들어갈 수 있는지 이해할 수 있다.(자동 형 변환)</p><h3 id="Reference-Type의-메모리-크기는"><a href="#Reference-Type의-메모리-크기는" class="headerlink" title="- Reference Type의 메모리 크기는?"></a>- Reference Type의 메모리 크기는?</h3><p>참조 변수의 메모리 크기는 4byte로서 주소값을 가지고 있다. 해당 주소값을 가지고 Heap영역에 접근하여 값을 사용한다.</p><h3 id="Problem-다음-중-main-Method의-선언부로-알맞은-것은-모두-고르시오"><a href="#Problem-다음-중-main-Method의-선언부로-알맞은-것은-모두-고르시오" class="headerlink" title="- Problem] 다음 중 main Method의 선언부로 알맞은 것은? (모두 고르시오)"></a>- Problem] 다음 중 main Method의 선언부로 알맞은 것은? (모두 고르시오)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">2. <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">3. <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arv)</span></span></span><br><span class="line"><span class="function">4. <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">static</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">5. <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br></pre></td></tr></table></figure><p>답은 md파일에서도 말해주고 있다…</p><p>답: 1, 2, 3, 5</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Primitive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java] Primitive, 기본 타입</title>
      <link href="/2019/12/24/java-primitive/"/>
      <url>/2019/12/24/java-primitive/</url>
      
        <content type="html"><![CDATA[<p>Java로 처음 프로그래밍에 입문한 나로서 파이썬과 비교하며 기재한다는 것이 다소 웃긴 일이지만, 이제는 파이썬이 편리해진 현재로서는 비교를 하며 학습하고자 한다.</p><p>Java 데이터 타입으로는 기본 타입(Primitive type)과 참조 타입(Reference type)으로 나누어져 있다.</p><h2 id="데이터-기본-타입-Primitive-type"><a href="#데이터-기본-타입-Primitive-type" class="headerlink" title="데이터 기본 타입, Primitive type"></a>데이터 기본 타입, Primitive type</h2><table><thead><tr><th></th><th>논리형</th><th>문자형</th><th>정수형</th><th>실수형</th></tr></thead><tbody><tr><td>1byte</td><td>boolean</td><td></td><td>byte</td><td></td></tr><tr><td>2byte</td><td></td><td>char</td><td>short</td><td></td></tr><tr><td>4byte</td><td></td><td></td><td>int</td><td>float</td></tr><tr><td>8byte</td><td></td><td></td><td>long</td><td>double</td></tr></tbody></table><p>정수형에서 기본형은 <strong>int</strong>, 실수형의 기본형은 <strong>double</strong></p><p>Python에서는 모든 타입이 객체이기에 자료형에 따라 byte수가 제한되어 있지 않다. <code>&#39;&#39;</code>는 Java에서 Char 타입으로 쓰이고 <code>&quot;&quot;</code>는 String 타입에 쓰인다. System.out.println에서 String형식으로 나타낼 때는 <code>&quot;&quot;</code>을 써야한다.</p><h3 id="지수부-가수부"><a href="#지수부-가수부" class="headerlink" title="지수부 / 가수부"></a>지수부 / 가수부</h3><img src="/2019/12/24/java-primitive/decimal.png" class="slug"><p>float와 double 범위 설정을 이해하기 위해서는 알아두면 좋은 개념</p><p><strong>Java의 소수점 처리에서는 약간의 오차로 인하여 값이 달라질 수 있다는 점에 유의</strong>해야한다.</p><p>파이썬은 float가 따로 없이 double로 실수형을 구별한다.</p><h3 id="증감-연산자"><a href="#증감-연산자" class="headerlink" title="증감 연산자"></a>증감 연산자</h3><p>++과 –는 더하는가 빼는가의 차이기에 ++만 예로 들어서 나타낸다.</p><table><thead><tr><th>연산자</th><th>기능</th><th>연산 예</th></tr></thead><tbody><tr><td>++</td><td>항의 값에 1을 더한다</td><td>value = ++num; -&gt; num값에 1을 증가후 value에 대입 value = num++; -&gt; value에 기존 num값을 먼저 대입 후 num값 1 증가</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> value = num++;</span><br><span class="line">System.out.println(value); <span class="comment">//3</span></span><br><span class="line">System.out.println(num); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>파이썬에서는 증감연산자가 없다</p><h2 id="소스자료"><a href="#소스자료" class="headerlink" title="소스자료"></a>소스자료</h2><p><a href="https://github.com/TaeJuneJoung/Java/tree/master/src/Chapter1" target="_blank" rel="noopener">Github Source</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Primitive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Lambda, 람다</title>
      <link href="/2019/12/23/python-middle-lambda/"/>
      <url>/2019/12/23/python-middle-lambda/</url>
      
        <content type="html"><![CDATA[<h2 id="Def-함수"><a href="#Def-함수" class="headerlink" title="Def, 함수"></a>Def, 함수</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">3.0</span></span><br><span class="line">print(type(x)) <span class="comment">#&lt;class 'float'&gt;</span></span><br><span class="line"><span class="comment"># int로 변경할 수 있다면 True / 없다면 False</span></span><br><span class="line">print(x.is_integer()) <span class="comment">#True</span></span><br></pre></td></tr></table></figure><p>아래의 내용을 보면 함수도 function 클래스의 객체를 생성한다는 것을 알 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">print(type(func)) <span class="comment">#&lt;class 'function'&gt;</span></span><br></pre></td></tr></table></figure><p>객체가 완성된다면 매개변수(Parameter)로 전달할 수 있다는 것이다.</p><p>아래와 같이 사용할 수도 있다는 것이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">num = func(<span class="number">3</span>)</span><br><span class="line">print(double(num)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sound</span><span class="params">(func)</span>:</span></span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'안녕하세요'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dog</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'멍멍'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cat</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'야옹'</span>)</span><br><span class="line"></span><br><span class="line">sound(person) <span class="comment">#안녕하세요</span></span><br><span class="line">sound(dog) <span class="comment">#멍멍</span></span><br><span class="line">sound(cat) <span class="comment">#야옹</span></span><br></pre></td></tr></table></figure><p>위에 내용들이 이해되었다면, 조금 더 어려운 내용을 다뤄보자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x ** n</span><br><span class="line">    <span class="keyword">return</span> double</span><br><span class="line"></span><br><span class="line">n = num(<span class="number">3</span>)</span><br><span class="line">print(n(<span class="number">3</span>)) <span class="comment">#27</span></span><br></pre></td></tr></table></figure><h2 id="Lambda-람다"><a href="#Lambda-람다" class="headerlink" title="Lambda, 람다"></a>Lambda, 람다</h2><p>계속 호출하는 것이 아닌 필요에 의해 한 번 정도 사용해야하는 함수인데 함수명을 정하기에 어려운 경우가 있다. 그럴때 사용하는 함수를 <strong>람다</strong>라고 한다.</p><p>알고리즘 정렬에서 람다를 많이 사용해서 낯설진 않았다. 그렇지만 이외의 다른 사용법에 대해선 생각보다 낯설다는 것을 알 수 있었다.</p><p>위에서 알았던 <strong>함수도 객체</strong>라는 것을 잊어서는 안된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> value:print(value)</span><br><span class="line">func(<span class="string">'확인!'</span>)</span><br></pre></td></tr></table></figure><p>위에 사용했던 함수들을 람다식으로 바꿔보자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def func(n):</span></span><br><span class="line"><span class="string">    return n</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">func = <span class="keyword">lambda</span> n: n</span><br><span class="line">print(func(<span class="number">3</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def func(n):</span></span><br><span class="line"><span class="string">    return n</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def double(n):</span></span><br><span class="line"><span class="string">    return n ** 2</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">func = <span class="keyword">lambda</span> n: n</span><br><span class="line">double = <span class="keyword">lambda</span> n: n ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">num = func(<span class="number">3</span>)</span><br><span class="line">print(double(num))</span><br></pre></td></tr></table></figure><p>람다식에서는 매개변수를 쓰고 싶지 않을 때 비워주면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def sound(func):</span></span><br><span class="line"><span class="string">    func()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def person():</span></span><br><span class="line"><span class="string">    print('안녕하세요')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def dog():</span></span><br><span class="line"><span class="string">    print('멍멍')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def cat():</span></span><br><span class="line"><span class="string">    print('야옹')</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">sound = <span class="keyword">lambda</span> func: func()</span><br><span class="line">person = <span class="keyword">lambda</span> : print(<span class="string">'안녕하세요'</span>)</span><br><span class="line">dog = <span class="keyword">lambda</span> : print(<span class="string">'멍멍'</span>)</span><br><span class="line">cat = <span class="keyword">lambda</span> : print(<span class="string">'야옹'</span>)</span><br><span class="line"></span><br><span class="line">sound(person)</span><br><span class="line">sound(dog)</span><br><span class="line">sound(cat)</span><br></pre></td></tr></table></figure><p>지금까지 람다를 다루면서 어느 정도 눈치 챘겠지만, <code>lambda</code>에는 return을 사용하지 않는다. return을 사용할 경우에 SyntaxError가 발생한다. 자동적으로 return이 되어지며 return을 하지 않고 print로 출력할 수도 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value = <span class="keyword">lambda</span> x: len(x)</span><br><span class="line"></span><br><span class="line">result = value(<span class="string">'열심히 성실히 잘하기!'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>그러면 다소 어려웠던 중첩 함수를 람다식으로 바꿔보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def num(n):</span></span><br><span class="line"><span class="string">def double(x):</span></span><br><span class="line"><span class="string">return x ** n</span></span><br><span class="line"><span class="string">return double</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x ** n</span><br><span class="line"></span><br><span class="line">num = num(<span class="number">3</span>)</span><br><span class="line">print(num(<span class="number">5</span>)) <span class="comment">#125</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lambda </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy] Nuxt Github Pages</title>
      <link href="/2019/12/23/deploy-nuxt-ghpages/"/>
      <url>/2019/12/23/deploy-nuxt-ghpages/</url>
      
        <content type="html"><![CDATA[<h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><p>vue를 설치하기 이전에 Node.js가 필요하다.</p><p>처음해보는 사용자라면 <a href="https://nodejs.org/ko/에서" target="_blank" rel="noopener">https://nodejs.org/ko/에서</a> LTS 버전 다운받기를 권한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli <span class="comment">#vue 3이상의 버전을 사용할 수 있다. 2019.12.23일 기준으로 4버전</span></span><br><span class="line">npm i -g @vue/cli-init <span class="comment">#vue 2버전을 가져오려면 이렇게 하면 된다. i는 install의 약자</span></span><br></pre></td></tr></table></figure><p>아래의 내용들은 npm으로 진행한 후에 yarn으로 처리한 내용들이다.</p><p>그렇기에 yarn으로 진행하여도 무관하다.</p><h3 id="참고-npm-vs-yarn"><a href="#참고-npm-vs-yarn" class="headerlink" title="[참고]npm vs. yarn"></a>[참고]npm vs. yarn</h3><p>결론부터 얘기하자면 yarn을 쓰는 것이 좋다.</p><p>yarn은 페이스북, 구글의 일부 엔지니어가 만들었다고 한다.</p><ol><li><p><strong>Performance(속도)</strong>: yarn &gt;= npm</p><p>속도에서는 yarn이 더 빨랐으나, 현재는 차이가 거의 없다고 함</p></li><li><p><strong>Stablility(안정성)</strong>: yarn == npm</p></li><li><p><strong>Security(보안성)</strong>: yarn &gt;= npm</p><p>페이스북에서 yarn을 개발한 메인이유라고 한다.</p><p><code>npm</code>은 패키지 설치시 자동으로 코드와 의존성을 실행할 수 있도록 허용되어 있기에 편리하나, 안정성의 위험이 있다. <code>yarn</code>은 yarn.lock이나 package.json으로부터 설치만 한다. 이로 인해 버그의 양이 많이 줄었다고 한다.</p></li></ol><h2 id="Deploy-Nuxt-GitPages"><a href="#Deploy-Nuxt-GitPages" class="headerlink" title="Deploy Nuxt GitPages"></a>Deploy Nuxt GitPages</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn create nuxt-app myapp</span><br><span class="line"><span class="comment"># npx create-nuxt-app myapp</span></span><br><span class="line">yarn install</span><br><span class="line"><span class="comment"># npm install</span></span><br></pre></td></tr></table></figure><p><strong>nuxt.config.js</strong></p><p>(테스트결과 아래의 내용을 틀리게 했는데도 진행되는 것보니 필요없을 수도 있음.)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router: &#123; <span class="attr">base</span>: <span class="string">'/레파지토리 이름/'</span> &#125;,</span><br></pre></td></tr></table></figure><p>github pages를 이용을 편리하게 하기 위해 <code>push-dir</code>를 설치하여 진행하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add push-dir --dev</span><br><span class="line"><span class="comment"># npm i push-dir --save-dev</span></span><br></pre></td></tr></table></figure><p><strong>package.json</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"deploy": "push-dir --dir=dist --branch=gh-pages --cleanup"</span><br></pre></td></tr></table></figure><p>이제 Git Repository에 기본적인 내용들을 저장하고 아래에 Command를 작성하면 완성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn generate</span><br><span class="line"><span class="comment"># npm run generate</span></span><br><span class="line">yarn deploy</span><br><span class="line"><span class="comment"># npm run deploy</span></span><br></pre></td></tr></table></figure><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><p>-npm vs yarn</p><p><a href="https://medium.com/@ehddnjs8989/npm-vs-yarn-3a611c89d291" target="_blank" rel="noopener">https://medium.com/@ehddnjs8989/npm-vs-yarn-3a611c89d291</a></p><p>-nuxt create</p><p><a href="https://nuxtjs.org/guide/installation" target="_blank" rel="noopener">https://nuxtjs.org/guide/installation</a></p><p>-yarn 커맨드 옵션</p><p><a href="https://gist.github.com/jjangga0214/13df6efda0b9060bcae29a517ea0ad39" target="_blank" rel="noopener">https://gist.github.com/jjangga0214/13df6efda0b9060bcae29a517ea0ad39</a></p><p>-nuxt deploy github pages</p><p><a href="https://nuxtjs.org/faq/github-pages/" target="_blank" rel="noopener">https://nuxtjs.org/faq/github-pages/</a></p><p><a href="https://hackernoon.com/create-and-publish-a-nuxt-powered-website-on-github-pages-3e922dfa7372" target="_blank" rel="noopener">https://hackernoon.com/create-and-publish-a-nuxt-powered-website-on-github-pages-3e922dfa7372</a></p><p><a href="https://github.com/jicjjang/blog/tree/gh-pages" target="_blank" rel="noopener">https://github.com/jicjjang/blog/tree/gh-pages</a></p>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> Nuxt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy] EndMovie Deploy - Linux</title>
      <link href="/2019/12/12/deploy-project-endgame-linux/"/>
      <url>/2019/12/12/deploy-project-endgame-linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>참고] 배포과정은 버전에 따라 환경에 따라 다를 수 있습니다. 해당 방법은 어디까지나 삽질을 해보고 이런 방도로도 실행이 가능하다라는 정리문서이지 답이 아님을 밝힙니다.</p></blockquote><h2 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h2><p>프로젝트를 먼저 Linux(Mint)환경에서 실행해보고 Docker-Compose를 통해 AWS EC2에 Deploy해보자.</p><h2 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h2><ul><li>Linux Mint(ubuntu 16.04)</li></ul><p>아래의 버전들은 프로젝트 버전에 맞추는게 좋다. 필자는 배포에만 신경썼기에 버전이 프로젝트와는 다르게 왔다갔다하는 부분이 있다. 설치할 때 버전을 설정하면 프로젝트 버전과 같게 설치할 수 있다.</p><ul><li>Python 3.6.8</li><li>Node 12.x.x</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="Deploy-DB"><a href="#Deploy-DB" class="headerlink" title="Deploy DB"></a>Deploy DB</h2><p>DB는 Docker Image를 통해 설치해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com/ | sudo sh</span><br></pre></td></tr></table></figure><p>Docker를 먼저 다운로드 받는다. 이렇게만 할 경우 docker를 사용하기 전에 <code>sudo</code>를 붙여줘야 하는 귀차니즘이 발생하긴 한다.</p><h3 id="sudo-없이-사용하기"><a href="#sudo-없이-사용하기" class="headerlink" title="sudo 없이 사용하기"></a>sudo 없이 사용하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span> <span class="comment"># 현재 접속중인 사용자에게 권한주기</span></span><br></pre></td></tr></table></figure><p>먼저, sudo를 사용한 버전으로 소스를 작성하도록 하겠다.</p><h3 id="Install-PostgreSQL"><a href="#Install-PostgreSQL" class="headerlink" title="Install PostgreSQL"></a>Install PostgreSQL</h3><p>기본적인 기능만 사용한다면 <code>alpine</code>을 사용하면 좋다. 최소한의 기능으로 경량화된 버전이다. 단, 많은 기능을 사용한다면 경량화 버전에서 설치를 계속해줘야하기에 불편한 점도 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres</span><br><span class="line">docker run -d -p 5432:5432 --name pgsql -e POSTGRES_PASSWORD=비밀번호 postgres</span><br></pre></td></tr></table></figure><p>Docker 볼륨을 생성하여 데이터를 유지해야할 경우는 volume 옵션이 필요하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume create pgdata</span><br><span class="line">docker run -d -p 5432:5432 --name pgsql -it --rm -v pgdata:/var/lib/postgresql/data postgres</span><br></pre></td></tr></table></figure><h4 id="PostgreSQL-Create-Database"><a href="#PostgreSQL-Create-Database" class="headerlink" title="PostgreSQL Create Database"></a>PostgreSQL Create Database</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it pgsql bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#PostgreSQL</span></span><br><span class="line">psql -U postgres</span><br><span class="line">CREATE DATABASE 데이터베이스이름;</span><br></pre></td></tr></table></figure><h2 id="Django-Settings"><a href="#Django-Settings" class="headerlink" title="Django Settings"></a>Django Settings</h2><p>먼저, Docker를 사용하지 않고 세팅해보자</p><p>파이썬의 버전이 너무 거슬린다. 이전의 방법도 있지만 전체적 설정에서 바꿔보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure><p>만약 위의 명령어를 작성하였는데 <code>update-alternatives: error: no alternatives for python</code>가 Error가 발생하였다면 <strong>alternative</strong>가 설정된 것이 없는 것이니 설정을 해주자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python <span class="comment">#파이썬의 경로</span></span><br><span class="line">ls /usr/bin/ | grep python <span class="comment">#파이썬 리스트(경로는 기본이라면...)</span></span><br></pre></td></tr></table></figure><h3 id="alternative-설정"><a href="#alternative-설정" class="headerlink" title="alternative 설정"></a>alternative 설정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2</span><br></pre></td></tr></table></figure><p>이후에 <code>sudo update-alternatives --config python</code>를 다시 입력하면 버전 선택을 할 수 있다.</p><p>이렇게 설정이 다 끝나고 나서 프로젝트에 있는 라이브러리들을 다운받으려고 했더니 pip가 없었다.</p><p>python3를 기본적으로 사용할 것이기에 pip3만 다운로드 받는다. 이렇게 설치하여도 pip 명령어로 실행할 수 있었다. 아래의 코드가 문제가 생길시에는 sudo를 붙여서 진행하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>다 끝났다면 라이브러리를 설치하고 진행하면 된다.</p><h2 id="Vue-Settings"><a href="#Vue-Settings" class="headerlink" title="Vue Settings"></a>Vue Settings</h2><p>yarn을 apt-get에서 바로 다운받거나 다른 방도가 있긴 하지만, 다른 파일을 다운 받아달라는 오류가 발생하여 npm에서 설치하는 방식으로 진행함</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install npm</span><br><span class="line">npm install -g yarn</span><br><span class="line"></span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure><p>nodejs를 다운받았는데 버전이 8이다. 프로젝트 설정된 버전보다 낮아 진행할 수 없는 문제가 발생했다. nodejs의 버전을 올려주자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 강제 캐시 삭제</span></span><br><span class="line">sudo npm cache clean --force</span><br><span class="line"><span class="comment"># n모듈 설치</span></span><br><span class="line">sudo npm install -g n</span><br><span class="line"><span class="comment"># n모듈 이용한 Node.js 설치</span></span><br><span class="line">sudo n stable</span><br><span class="line"><span class="comment"># npm 설치</span></span><br><span class="line">sudo npm install -g npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># vue-cli설치</span></span><br><span class="line">yarn add vue-cli</span><br><span class="line"></span><br><span class="line">yarn install</span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>그러면 이제 본격적으로 docker-compose를 이용해서 Linux환경에서 실행해보자.</p><p>docker로 하나하나 돌리는 방법도 있겠지만 옵션을 하나하나 주면서 확인해보고 하기에 너무 불편하다. 그러기에 docker-compose를 사용하기로 한다.</p><h3 id="Install-docker-compose"><a href="#Install-docker-compose" class="headerlink" title="Install docker-compose"></a>Install docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.0/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="settings-docker-compose"><a href="#settings-docker-compose" class="headerlink" title="settings docker-compose"></a>settings docker-compose</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.5'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">end-network</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./db:/var/lib/postgresql/data</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_DB=end_movie</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_UESR=postgres</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_PASSWORD=0525</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_INITDB_ARGS=--encoding=UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  front:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">front</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    working_dir:</span> <span class="string">/usr/src/app</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./front:/usr/src/app</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c "yarn install &amp;&amp; yarn serve"</span></span><br><span class="line"><span class="string"></span><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LC_ALL=C.UTF-8</span></span><br><span class="line"><span class="attr">    tty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">end-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  back:</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">      dockerfile:</span> <span class="string">./back/Dockerfile</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8000</span><span class="string">:8000</span></span><br><span class="line"><span class="attr">    working_dir:</span> <span class="string">/usr/src/app</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./back:/usr/src/app</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c "python manage.py makemigrations &amp;&amp; python manage.py migrate &amp;&amp; python manage.py runserver 0.0.0.0:8000"</span></span><br><span class="line"><span class="string"></span><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LC_ALL=C.UTF-8</span></span><br><span class="line"><span class="attr">    tty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">end-network</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  end-network:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">end-network</span></span><br></pre></td></tr></table></figure><p>docker에서 django image는 지원하지 않는다는 내용을 확인하였다. 그래서 Python images를 받아서 진행할까 하다가 Dockerfile로 먼저 진행하였다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./back/requirements.txt /usr/src/app/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><h2 id="느낀점"><a href="#느낀점" class="headerlink" title="느낀점"></a>느낀점</h2><p>DevOps의 길은 알면 쉽고 모르면 너무나도 힘들다…</p><p>Deploy로만 2일이 걸릴 줄이야…</p><p>더붙여야할 기능이라면 더 있지만… CI/CD를 다뤄보면서 진행하자…</p><p>이제 본격적인 AWS Deploy로 넘어가도록 하겠다.</p><h2 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h2><p> <a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html" target="_blank" rel="noopener">https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html</a> </p><p> <a href="https://judo0179.tistory.com/48" target="_blank" rel="noopener">https://judo0179.tistory.com/48</a> </p><p> <a href="https://seongkyun.github.io/others/2019/05/09/ubuntu_python/" target="_blank" rel="noopener">https://seongkyun.github.io/others/2019/05/09/ubuntu_python/</a> </p><p> <a href="https://d2fault.github.io/2018/04/30/20180430-install-and-upgrade-nodejs-or-npm/" target="_blank" rel="noopener">https://d2fault.github.io/2018/04/30/20180430-install-and-upgrade-nodejs-or-npm/</a> </p><p> <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a> </p><p> <a href="https://www.44bits.io/ko/post/almost-perfect-development-environment-with-docker-and-docker-compose" target="_blank" rel="noopener">https://www.44bits.io/ko/post/almost-perfect-development-environment-with-docker-and-docker-compose</a> </p><p> <a href="https://github.com/raccoonyy/django-sample" target="_blank" rel="noopener">https://github.com/raccoonyy/django-sample</a> </p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Comprehension</title>
      <link href="/2019/12/11/python-middle-comprehension/"/>
      <url>/2019/12/11/python-middle-comprehension/</url>
      
        <content type="html"><![CDATA[<p>:  리스트 컴프리헨션은 간편하게 리스트를 만드는 방법 </p><ul><li>List Comprehension</li><li>Tuple Comprehension</li><li>Set Comprehension</li><li>Dictonary Comprehension</li></ul><p> 리스트에 0~9의 값을 넣는 로직 만들어보기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_logic = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    list_logic.append(i)</span><br><span class="line">    </span><br><span class="line">print(list_logic)</span><br></pre></td></tr></table></figure><h2 id="List-Comprehension-리스트-컴프리헨션"><a href="#List-Comprehension-리스트-컴프리헨션" class="headerlink" title="List Comprehension, 리스트 컴프리헨션"></a>List Comprehension, 리스트 컴프리헨션</h2><p>아래와 같이 리스트 컴프리헨션을 이용하여 위의 내용을 쉽게 한 줄로 만들 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_comprehension = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(list_comprehension)</span><br></pre></td></tr></table></figure><h2 id="Tuple-Comprehension-튜플-컴프리헨션"><a href="#Tuple-Comprehension-튜플-컴프리헨션" class="headerlink" title="Tuple Comprehension, 튜플 컴프리헨션"></a>Tuple Comprehension, 튜플 컴프리헨션</h2><p>튜플 컴프리헨션은 주의할 점이 있다. </p><p><code>(i for i in range(10))</code>으로 진행시, <strong>generator객체</strong>가 나온다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple_comprehension = tuple(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(tuple_comprehension) <span class="comment">#(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br><span class="line">print(type(tuple_comprehension)) <span class="comment">#&lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Set-Comprehension-집합-컴프리헨션"><a href="#Set-Comprehension-집합-컴프리헨션" class="headerlink" title="Set Comprehension, 집합 컴프리헨션"></a>Set Comprehension, 집합 컴프리헨션</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set_comprehension = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line">print(set_comprehension) <span class="comment">#&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span></span><br><span class="line">print(type(set_comprehension)) <span class="comment">#&lt;class 'set'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Dictonary-Comprehension-딕셔너리-컴프리헨션"><a href="#Dictonary-Comprehension-딕셔너리-컴프리헨션" class="headerlink" title="Dictonary Comprehension, 딕셔너리 컴프리헨션"></a>Dictonary Comprehension, 딕셔너리 컴프리헨션</h2><p>딕셔너리(HashMap형태)는 <code>key:value</code> 형태로 만들어줘야하기에 아래와 같이 코드를 작성하면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_comprehension = &#123;i:i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125; <span class="comment">#key : value</span></span><br><span class="line">print(dict_comprehension) <span class="comment">#&#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9&#125;</span></span><br><span class="line">print(type(dict_comprehension)) <span class="comment">#&lt;class 'dict'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="심화-Comprehension"><a href="#심화-Comprehension" class="headerlink" title="심화 Comprehension"></a>심화 Comprehension</h2><p>그러면 이제 For문 하나는 해결했으니 Comprehension형태에서 IF문을 사용하며 이중 이상의 For문을 사용하는 방법에 대해서 알아보자.</p><p>방식에 대해서는 위에서 언급되었으니 List형태의 Comprehension만 다루기로 한다.</p><h3 id="For-If"><a href="#For-If" class="headerlink" title="For + If"></a>For + If</h3><h4 id="1-20까지의-숫자에서-홀수만-뽑아보자"><a href="#1-20까지의-숫자에서-홀수만-뽑아보자" class="headerlink" title="1~20까지의 숫자에서  홀수만 뽑아보자"></a>1~20까지의 숫자에서  홀수만 뽑아보자</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">odd_numbers = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">if</span> i%<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h4 id="1-50까지의-숫자에서-3의-배수만-뽑아보자"><a href="#1-50까지의-숫자에서-3의-배수만-뽑아보자" class="headerlink" title="1~50까지의 숫자에서 3의 배수만 뽑아보자"></a>1~50까지의 숫자에서 3의 배수만 뽑아보자</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiple_of_three_numbers = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">50</span>) <span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="1-50까지의-숫자에서-4의-배수에서-1이나-2인-값만-뽑아보자"><a href="#1-50까지의-숫자에서-4의-배수에서-1이나-2인-값만-뽑아보자" class="headerlink" title="1~50까지의 숫자에서 4의 배수에서 +1이나 +2인 값만 뽑아보자"></a>1~50까지의 숫자에서 4의 배수에서 +1이나 +2인 값만 뽑아보자</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">answer = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">50</span>) <span class="keyword">if</span> i%<span class="number">4</span> == <span class="number">1</span> <span class="keyword">or</span> i%<span class="number">4</span> == <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="2중For문"><a href="#2중For문" class="headerlink" title="2중For문"></a>2중For문</h3><h4 id="구구단을-만들어보자-시작은-2단부터-끝은-9단"><a href="#구구단을-만들어보자-시작은-2단부터-끝은-9단" class="headerlink" title="구구단을 만들어보자(시작은 2단부터 끝은 9단)"></a>구구단을 만들어보자(시작은 2단부터 끝은 9단)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiplication_table = [<span class="string">f'<span class="subst">&#123;i&#125;</span>x<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></figure><h3 id="2중For문-If문"><a href="#2중For문-If문" class="headerlink" title="2중For문 + If문"></a>2중For문 + If문</h3><h4 id="구구단에서-i나-j가-3의-배수이거나-곱의-결과가-3의-배수인-것을-다-제외"><a href="#구구단에서-i나-j가-3의-배수이거나-곱의-결과가-3의-배수인-것을-다-제외" class="headerlink" title="구구단에서 i나 j가 3의 배수이거나 곱의 결과가 3의 배수인 것을 다 제외"></a>구구단에서 i나 j가 3의 배수이거나 곱의 결과가 3의 배수인 것을 다 제외</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiplication_if_table = [<span class="string">f'<span class="subst">&#123;i&#125;</span>x<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> i%<span class="number">3</span> <span class="keyword">and</span> j%<span class="number">3</span> <span class="keyword">and</span> i*j%<span class="number">3</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Comprehension </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] 얕은복사 | 깊은복사</title>
      <link href="/2019/12/10/python-middle-array-copy/"/>
      <url>/2019/12/10/python-middle-array-copy/</url>
      
        <content type="html"><![CDATA[<h2 id="Shallow-Copy-얕은-복사"><a href="#Shallow-Copy-얕은-복사" class="headerlink" title="Shallow Copy, 얕은 복사"></a>Shallow Copy, 얕은 복사</h2><h3 id="변수-할당-얕은-복사"><a href="#변수-할당-얕은-복사" class="headerlink" title="변수 할당 얕은 복사"></a>변수 할당 얕은 복사</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">list_data = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">list_copy = list_data</span><br><span class="line"></span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 단일 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">0</span>] = <span class="string">'5'</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2중 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> 변수를 그대로 할당하여 사용할 경우에는,<br>같은 <code>주소</code>를 가리켜 하나의 값이 변하였을 때 다른 변수의 값도 변하게 된다.<br>메모리 주소지에 있는 값이 변하여서 해당 주소지를 쓰는 변수는 동일하게 변하는 것이다. </p><h3 id="슬라이싱을-이용한-얕은-복사"><a href="#슬라이싱을-이용한-얕은-복사" class="headerlink" title="슬라이싱을 이용한 얕은 복사"></a>슬라이싱을 이용한 얕은 복사</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'-------`:사용`------'</span>)</span><br><span class="line">list_data = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list_copy = list_data[:]</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 단일 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">0</span>] = <span class="string">'5'</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2중 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; -------`:사용`------</span><br><span class="line">&gt; 2327860646088</span><br><span class="line">&gt; 2327860440200</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860646088</span><br><span class="line">&gt; 2327860440200</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860646088</span><br><span class="line">&gt; 2327860440200</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> 리스트 슬라이싱을 통해서 값만 가져오면 해결할 수 있다고 생각할 수 있으나,<br>내부에 리스트가 있거나 2중 리스트 이상의 형태일 경우에는 동일한 문제가 발생한다. </p><h2 id="Deep-Copy-깊은-복사"><a href="#Deep-Copy-깊은-복사" class="headerlink" title="Deep Copy, 깊은 복사"></a>Deep Copy, 깊은 복사</h2><h3 id="Copy-Deepcopy를-이용한-깊은-복사"><a href="#Copy-Deepcopy를-이용한-깊은-복사" class="headerlink" title="Copy.Deepcopy를 이용한 깊은 복사"></a>Copy.Deepcopy를 이용한 깊은 복사</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list_data = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list_copy = copy.deepcopy(list_data)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 단일 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">0</span>] = <span class="string">'5'</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2중 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2327860646664</span><br><span class="line">&gt; 2327860646472</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860646664</span><br><span class="line">&gt; 2327860646472</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860646664</span><br><span class="line">&gt; 2327860646472</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>주소값도 다르며, 값들이 영향을 받지 않음을 알 수 있다.<br>이중리스트도 영향을 받지 않은 것을 보니 <code>깊은 복사</code>가 이뤄졌다. </p><h2 id="참고사항-Immutable의-복사"><a href="#참고사항-Immutable의-복사" class="headerlink" title="[참고사항]Immutable의 복사"></a>[참고사항]Immutable의 복사</h2><p> Immutable 객체는 깊은 복사를 하여도 얕은 복사를 한 결과가 도출된다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">immutable_tuple = (<span class="number">1</span>,<span class="number">2</span>,(<span class="number">3</span>,<span class="number">4</span>), <span class="string">'5'</span>)</span><br><span class="line">copy_tuple = immutable_tuple</span><br><span class="line"></span><br><span class="line">print(id(immutable_tuple))</span><br><span class="line">print(id(copy_tuple))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2327861436808</span><br><span class="line">&gt; 2327861436808</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">immutable_tuple = (<span class="number">1</span>,<span class="number">2</span>,(<span class="number">3</span>,<span class="number">4</span>), <span class="string">'5'</span>)</span><br><span class="line">copy_tuple = copy.deepcopy(immutable_tuple)</span><br><span class="line"></span><br><span class="line">print(id(immutable_tuple))</span><br><span class="line">print(id(copy_tuple))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2327861191688</span><br><span class="line">&gt; 2327861191688</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Shallow Copy </tag>
            
            <tag> Deep Copy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Mutable vs Immutable</title>
      <link href="/2019/12/10/python-middle-mutable-immutable/"/>
      <url>/2019/12/10/python-middle-mutable-immutable/</url>
      
        <content type="html"><![CDATA[<h2 id="Mutable-가변-객체"><a href="#Mutable-가변-객체" class="headerlink" title="Mutable, 가변 객체"></a>Mutable, 가변 객체</h2><ul><li>List, 리스트</li><li>Dictionary, 딕셔너리</li><li>Set, 집합</li></ul><h2 id="Immutable-불변-객체"><a href="#Immutable-불변-객체" class="headerlink" title="Immutable 불변 객체"></a>Immutable 불변 객체</h2><ul><li><p>String, 문자열</p></li><li><p>Number, 숫자형</p><p>Integer, Float, Complex</p></li><li><p>Bool, 논리형</p></li><li><p>Tuple, 튜플</p></li><li><p>FrozenSet, 불변집합</p><p>: 파이썬의 변경 불가인 집합 객체</p></li></ul><h2 id="List와-Tuple-비교"><a href="#List와-Tuple-비교" class="headerlink" title="List와 Tuple 비교"></a>List와 Tuple 비교</h2><p>Mutable과 Immutable의 대표적인 List와 Tuple을 가지고 비교해보자.</p><h3 id="is와"><a href="#is와" class="headerlink" title="is와 =="></a>is와 ==</h3><ul><li><p>is: 주소값 비교</p><p><code>id()</code>: 객체의 주소값 반환</p></li><li><p>==: 값 비교</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">r1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">r2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(r1 <span class="keyword">is</span> r2) <span class="comment">#컴파일시에는 True로 나옴(Idel과 Jupyter에서는 False)</span></span><br><span class="line">print(r1 == r2)</span><br><span class="line"></span><br><span class="line">print(id(r1), id(r2))</span><br><span class="line"></span><br><span class="line">r1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">r2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">print(r1 <span class="keyword">is</span> r2)</span><br><span class="line">print(r1 == r2)</span><br><span class="line"></span><br><span class="line">print(id(r1), id(r2))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;False</span><br><span class="line">&gt;True</span><br><span class="line">&gt;1954010284680 1954010286768</span><br><span class="line">&gt;False</span><br><span class="line">&gt;True</span><br><span class="line">&gt;1954009597832 1954009597896</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>위의 내용으로 설명을 하고자 하였는데 어떤 Tool을 쓰느냐에 따라 값이 달라지는 부분이 있고,<br>다른 Type에 대해서는 어려운 부분이 있으니 다른 방도로 진행 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(v1, v2)</span>:</span></span><br><span class="line">    v1 += v2</span><br><span class="line"></span><br><span class="line">v1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">v2 = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br><span class="line">print(v1)</span><br><span class="line"></span><br><span class="line">v1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">v2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br><span class="line">print(v1)</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; (1, 2, 3)</span><br><span class="line">&gt; [1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> <code>튜플</code>일 경우는 값이 추가되지 않았다는 점을 확인할 수 있다.<br><code>리스트</code>인 경우는 값이 변하였다.<br><strong>왜 이러한 차이가 발생할까?</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(v1, v2)</span>:</span></span><br><span class="line">    v1 += v2</span><br><span class="line">    print(id(v1))</span><br><span class="line"></span><br><span class="line">v1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br><span class="line"></span><br><span class="line">v1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1954010286840</span><br><span class="line">&gt; 1954009922824</span><br><span class="line">&gt; 1954009597064</span><br><span class="line">&gt; 1954009597064</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>함수 안에서의 주소값을 찍어서 같은지 다른지를 확인하면 된다.<br><code>튜플</code>의 경우는 다르지만, <code>리스트</code>의 경우에는 같다.<br><code>튜플</code>에서는 새로운 객체가 생성되어 값을 할당받는다. 즉, Immutable객체는 새로운 객체로 선언된다 .</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">'Python'</span></span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = <span class="string">'Test'</span></span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br><span class="line"></span><br><span class="line">v1 = <span class="number">3</span></span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1953967907592</span><br><span class="line">&gt; 1954010299824</span><br><span class="line">&gt; 140715235971968</span><br><span class="line">&gt; 140715235972128</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> <code>str</code>타입과 <code>Number</code>타입도 Immutable하기에 같은 결과가 나옴을 확인할 수 있다.<br>여기서 잠시 참고하고 넘어갈 부분도 있다. Number는 Immutable하지만 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">0</span></span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br></pre></td></tr></table></figure><p>의 결과는 어떻게 나올까?</p><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 140715235971872</span><br><span class="line">&gt; 140715235971872</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> 같음을 볼 수 있다. ‘Immutable할 때는 주소값이 다르다고 했는데 왜 같지?’<br>모순이 발생함을 알 수 있는데, 이는 파이썬 정책 때문이다. </p><p><a href="https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong" target="_blank" rel="noopener">https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong</a></p><p>내용을 확인해보면 파이썬은 <strong>-5~256</strong>값은 저장해두고 사용함을 알 수 있다.</p><p>Mutable과 Immutable의 개념은 중요하다.</p><p>이후에 다룰 내용들과 다음에 나올 <strong>리스트(배열)의 얕은/깊은 복사에 기초가 되기 때문이다.</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mutable </tag>
            
            <tag> Immutable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] 레퍼런스 카운트와 가비지 컬렉션</title>
      <link href="/2019/12/10/python-middle-gc/"/>
      <url>/2019/12/10/python-middle-gc/</url>
      
        <content type="html"><![CDATA[<p>파이썬 자동으로 메모리 소멸</p><p>그러면 언제 소멸 되는가?</p><blockquote><p><strong>레퍼런스 카운트</strong></p><p>내가 선언한 메모리가 언제 소멸하는지</p></blockquote><p>파이썬에서는 모든 것이 객체이다.</p><h2 id="레퍼런스-카운트"><a href="#레퍼런스-카운트" class="headerlink" title="레퍼런스 카운트"></a>레퍼런스 카운트</h2><p>: 객체를 참조하는 변수의 수</p><h2 id="가비지-컬렉션"><a href="#가비지-컬렉션" class="headerlink" title="가비지 컬렉션"></a>가비지 컬렉션</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="comment"># 변수명 data가 [1,2,3,4,5] 리스트를 참조(레퍼런스)한다.</span></span><br></pre></td></tr></table></figure><p><strong>생성된 [1,2,3,4,5]는 언제 소멸하는가?</strong></p><blockquote><p>객체를 아무도 참조하지 않는 상황에 소멸한다.</p><p>현재 data의 rc(reference counting)가 1이다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">data = <span class="string">'test'</span> <span class="comment"># 변수명 data가 'test' 문자열을 참조(레퍼런스)한다.</span></span><br></pre></td></tr></table></figure><p>위와 같은 경우는 data가 [1,2,3,4,5] 리스트를 참조하였다가 ‘test’ 문자열을 참조한다. </p><p>rc를 보게 되면, [1,2,3,4,5]의 rc는 1이었다가 data가 test를 받는 순간 0이 된다.</p><p>이렇게 됐을 때, [1,2,3,4,5]는 아무것도 참조받지 않으며, 소멸 대상이 된다.</p><p>(단, 소멸 대상이 되었다고 바로 소멸되는 것은 아니다.)</p><p><strong>그렇다면 rc가 1을 유지할 때는 메모리가 지속적으로 유지되는가?</strong></p><p>고민하는게 이상할 정도로 답은 당연하다. 프로그램이 끝날 때 소멸될 것이다.</p><img src="/2019/12/10/python-middle-gc/python_execution_structure.jpg" class="slug"><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://winterj.me/python-gc/#2-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%98-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D" target="_blank" rel="noopener">https://winterj.me/python-gc/#2-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%98-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Gabage Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자료구조] Queue</title>
      <link href="/2019/12/09/structure_queue/"/>
      <url>/2019/12/09/structure_queue/</url>
      
        <content type="html"><![CDATA[<h2 id="구조"><a href="#구조" class="headerlink" title="구조"></a>구조</h2><p><strong>FIFO,</strong> 가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조</p><h2 id="용어"><a href="#용어" class="headerlink" title="용어"></a>용어</h2><p><strong>Enqueue</strong>: 큐에 데이터를 넣는 기능</p><p><strong>Dequeue</strong>: 큐에서 데이터를 꺼내는 기능</p><h2 id="파이썬-Queue-라이브러리-활용해서-큐-자료-구조-사용하기"><a href="#파이썬-Queue-라이브러리-활용해서-큐-자료-구조-사용하기" class="headerlink" title="파이썬 Queue 라이브러리 활용해서 큐 자료 구조 사용하기"></a>파이썬 Queue 라이브러리 활용해서 큐 자료 구조 사용하기</h2><ul><li>queue 라이브러리에는 다양한 큐 구조로 <strong>Queue(), LifoQueue(), PriorityQueue</strong>… 등 제공</li></ul><ol><li><p>Queue(): 가장 일반적인 큐 자료 구조</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">data_queue = queue.Queue()</span><br><span class="line">data_queue.put(<span class="string">'coding'</span>)</span><br><span class="line">data_queue.put(<span class="number">2</span>)</span><br><span class="line">data_queue.qsize() <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">data_queue.get() <span class="comment">#'coding'</span></span><br><span class="line">data_queue.qsize() <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">data_qeuue.get() <span class="comment">#2</span></span><br><span class="line">data_queue.qsize() <span class="comment">#0</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>LifoQueue(): 스택 구조와 비슷하다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">data_queue = queue.LifoQueue()</span><br><span class="line"></span><br><span class="line">data_queue.put(<span class="string">'coding'</span>)</span><br><span class="line">data_queue.put(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">data_queue.get() <span class="comment">#2</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>PriorityQueue(): 데이터마다 우선순위를 넣어서, 우선순위가 높은 순으로 데이터 출력</p><p>(숫자가 낮은 것이 우선순위가 높은 것)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">data_queue = queue.PriorityQueue()</span><br><span class="line">data_queue.put((<span class="number">10</span>, <span class="string">'coding'</span>)) <span class="comment">#(우선순위, 데이터)</span></span><br><span class="line">data_queue.put((<span class="number">5</span>, <span class="number">1</span>))</span><br><span class="line">data_queue.put((<span class="number">15</span>, <span class="string">'korea'</span>))</span><br><span class="line"></span><br><span class="line">data.queue.get() <span class="comment">#(5, 1)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="어디에-큐가-많이-쓰이는가"><a href="#어디에-큐가-많이-쓰이는가" class="headerlink" title="어디에 큐가 많이 쓰이는가?"></a>어디에 큐가 많이 쓰이는가?</h2><p>: <strong>멀티 태스킹을 위한 프로세스 스케쥴링 방식을 구현</strong>하기 위해 많이 사용됨(운영체제 참조)</p><blockquote><p>한 가지 일을 하다가, 잠시 멈추고 또 다른 일을 하고, 또 멈추고 다른 일을 하다 보면 언젠가는 결국 모든 일이 마치게 된다. 이 동작이 엄청 빨라지면 한 번에 여러가지 일을 하는 것처럼 보이게 된다.</p><p><strong>시분할 시스템</strong></p><p>: 다중 사용자 지원을 위해 컴퓨터 응답 시간을 최소화하는 스케쥴링</p><p><strong>멀티태스킹</strong></p><p>: 단일 CPU에서 여러 응용 프로그램이 동시에 실행되는 것처럼 보이도록 하는 시스템</p><p><strong>프로세스 스케쥴링</strong></p><p>: 보다 효율적인 멀티태스킹이 되기 위해서 프로세스들을 적절히 분배하는 작업</p><p><strong>멀티 프로세싱</strong></p><p>: 하나의 응용프로그램이 여러 CPU를 사용하면서, 빠르게 실행시키는 시스템</p><p>시분할 처리와 멀티 태스킹의 차이는</p><p><strong>시분할 시스템</strong>은 <strong>다중 사용자 지원</strong>을 위해 컴퓨터 응답 시간을 최소화하기 위한 목적</p><p><strong>멀티 태스킹</strong>은 <strong>단일 CPU에서 여러 응용 프로그램이 동시에 실행되는 것처럼 보이도록</strong> 하는 목적</p></blockquote><h2 id="Enqueue-Dequeue-구현"><a href="#Enqueue-Dequeue-구현" class="headerlink" title="Enqueue, Dequeue 구현"></a>Enqueue, Dequeue 구현</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">queue_list = list()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(data)</span>:</span></span><br><span class="line">    queue_list.append(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">()</span>:</span></span><br><span class="line">    data = queue_list.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># data = queue_list[0]</span></span><br><span class="line">    <span class="comment"># del queue_list[0]</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자료구조] Stack</title>
      <link href="/2019/12/09/structure_stack/"/>
      <url>/2019/12/09/structure_stack/</url>
      
        <content type="html"><![CDATA[<ul><li>데이터를 제한적으로 접근할 수 있는 구조<ul><li>한쪽 끝에서만 자료를 넣거나 빼낼 수 있는 구조</li></ul></li><li>FILO</li></ul><p>대표적인 스택의 활용</p><ul><li>컴퓨터 내부의 프로세스 구조의 함수 동작 방식</li></ul><h2 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h2><ul><li>push() : 데이터를 스택에 넣기</li><li>pop() : 데이터를 스택에서 꺼내기</li></ul><h2 id="스택-구조와-프로세스-스택"><a href="#스택-구조와-프로세스-스택" class="headerlink" title="스택 구조와 프로세스 스택"></a>스택 구조와 프로세스 스택</h2><p>스택 구조는 프로세스 실행 구조의 가장 기본</p><ul><li>함수 호출시 프로세스 실행 구조를 스택과 비교해서 이해 필요</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> data &lt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'ended'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(data)</span><br><span class="line">        recursive(data<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="스택의-장단점"><a href="#스택의-장단점" class="headerlink" title="스택의 장단점"></a>스택의 장단점</h2><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>구조가 단순해서, 구현이 쉽다</li><li>데이터 저장/읽기 속도가 빠르다</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>데이터 최대 갯수를 미리 정해야 한다<ul><li>파이썬의 경우 재귀 함수는 1000번까지만 호출 가능</li></ul></li><li>저장 공간의 낭비가 발생할 수 있음<ul><li>미리 최대 갯수만큼 저장 공간을 확보해야함</li></ul></li></ul><h2 id="스택-구현"><a href="#스택-구현" class="headerlink" title="스택 구현"></a>스택 구현</h2><p><strong>파이썬 기본 기능 사용하기</strong></p><ul><li>append(push), pop</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data_stack = list()</span><br><span class="line"></span><br><span class="line">data_stack.append(<span class="number">1</span>)</span><br><span class="line">data_stack.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(data_stack) <span class="comment">#[1, 2]</span></span><br><span class="line">data_stack.pop() <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p><strong>파이썬 append, push 사용하지 않고 구현</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data_stack = list()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(data)</span>:</span></span><br><span class="line">    data_stack.append(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">()</span>:</span></span><br><span class="line">    data = data_stack[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">del</span> data_stack[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자료구조] Intro</title>
      <link href="/2019/12/09/structure_intro/"/>
      <url>/2019/12/09/structure_intro/</url>
      
        <content type="html"><![CDATA[<p>자료구조, 데이터 구조, data structure</p><p>: 대량의 데이터를 효율적으로 관리할 수 있는 데이터의 구조를 의미</p><h2 id="대표적인-자료구조"><a href="#대표적인-자료구조" class="headerlink" title="대표적인 자료구조"></a>대표적인 자료구조</h2><ul><li>배열</li><li>스택</li><li>큐</li><li>링크드 리스트</li><li>해쉬 테이블</li><li>힙</li></ul><h2 id="자료구조와-알고리즘이-중요한-이유"><a href="#자료구조와-알고리즘이-중요한-이유" class="headerlink" title="자료구조와 알고리즘이 중요한 이유"></a>자료구조와 알고리즘이 중요한 이유</h2><p>: 어떤 자료구조와 알고리즘을 쓰느냐에 따라, 성능차가 크다</p><h2 id="Array-배열"><a href="#Array-배열" class="headerlink" title="Array, 배열"></a>Array, 배열</h2><h3 id="배열의-필요성"><a href="#배열의-필요성" class="headerlink" title="배열의 필요성?"></a>배열의 필요성?</h3><ul><li>같은 종류의 데이터를 효율적으로 관리하게 하기 위해</li><li>같은 종류의 데이터를 순차적으로 저장</li></ul><h3 id="배열의-장점"><a href="#배열의-장점" class="headerlink" title="배열의 장점"></a>배열의 장점</h3><ul><li>빠른 접근 가능</li></ul><h3 id="배열의-단점"><a href="#배열의-단점" class="headerlink" title="배열의 단점"></a>배열의 단점</h3><ul><li>추가/삭제가 쉽지 않음</li><li>미리 최대 길이를 지정해야 함</li></ul><h3 id="파이썬과-배열"><a href="#파이썬과-배열" class="headerlink" title="파이썬과 배열"></a>파이썬과 배열</h3><ul><li>파이썬 리스트 활용</li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django] JWT Token</title>
      <link href="/2019/12/03/jwt-base/"/>
      <url>/2019/12/03/jwt-base/</url>
      
        <content type="html"><![CDATA[<h2 id="JWT를-왜-사용해야하는가"><a href="#JWT를-왜-사용해야하는가" class="headerlink" title="JWT를 왜 사용해야하는가?"></a>JWT를 왜 사용해야하는가?</h2><dl><dt>Json Web Token</dt><dd>전자 서명 된 URL-safe(URL로 이용할 수 있는 문자만 구성된)의 JSON</dd></dl><h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><p>실행한 프로젝트 구조 URL<br><a href="https://github.com/TaeJuneJoung/Python-Deploy/tree/jwt-token" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/Python-Deploy/tree/jwt-token</a></p><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework djangorestframework-jwt</span><br></pre></td></tr></table></figure><h3 id="Django-Settings"><a href="#Django-Settings" class="headerlink" title="Django Settings"></a>Django Settings</h3><p>아래의 소스를 Settings의 가장 아래 부분에 추가</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 로그인 여부를 확인하는 클래스</span></span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 로그인과 관련된 클래스</span></span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">'JWT_SECRET_KEY'</span>: SECRET_KEY,</span><br><span class="line">    <span class="string">'JWT_ALGORITHM'</span>: <span class="string">'HS256'</span>,</span><br><span class="line">    <span class="string">'JWT_ALLOW_REFRESH'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">7</span>),</span><br><span class="line">    <span class="string">'JWT_REFRESH_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">28</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>- JWT_SECRET_KEY</strong></p><blockquote><p>JWT의 비밀키로 어떤걸 사용할지 작성</p><p>여기서는 Django의 비밀키를 사용하였으나, <strong>다른키 사용 권장</strong></p></blockquote><p><strong>- JWT_ALGORITHM</strong></p><blockquote><p>JWT 암호화에 사용되는 알고리즘을 지정</p></blockquote><p><strong>- JWT_ALLOW_REFRESH</strong></p><blockquote><p>JWT 토큰을 갱신할 수 있게 할지 여부를 결정</p></blockquote><p><strong>- JWT_EXPIRATION_DELTA</strong></p><blockquote><p>JWT 토큰의 유효 기간 설정</p><p>위의 설정과 같은 경우는 JWT 토큰을 7일 안에 갱신하지 않으면 JWT토큰을 사용할 수 없고 로그아웃 된다.</p></blockquote><p><strong>- JWT_REFRESH_EXPIRATION_DELTA</strong></p><blockquote><p>JWT 토큰 갱신의 유효기간</p><p>위의 설정과 같은 경우 7일 안에 갱신하여도 28일 후에는 갱신할 수 없다. 즉, 28일 후에는 로그아웃 된다.</p></blockquote><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token, verify_jwt_token, refresh_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'api/token/'</span>, obtain_jwt_token), <span class="comment">#JWT토큰 발행</span></span><br><span class="line">    path(<span class="string">'api/token/verify/'</span>, verify_jwt_token), <span class="comment">#JWT유효 검증</span></span><br><span class="line">    path(<span class="string">'api/token/refresh/'</span>, refresh_jwt_token), <span class="comment">#JWT토큰 갱신</span></span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'todos.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="todos-views-py"><a href="#todos-views-py" class="headerlink" title="todos.views.py"></a>todos.views.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, permission_classes, authentication_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated <span class="comment">#로그인 여부 확인</span></span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication <span class="comment">#JWT 인증을 확인하기 위해 사용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Todos</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(['GET'])</span></span><br><span class="line"><span class="meta">@permission_classes((IsAuthenticated,)) #권한 체크(현재 여기서는 로그인 여부만 체크)</span></span><br><span class="line"><span class="meta">@authentication_classes((JSONWebTokenAuthentication,)) #JWT토큰 확인(토큰 이상시 JSON으로 에러 반환)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(request)</span>:</span></span><br><span class="line">    todos = Todos.objects.all()</span><br><span class="line">    todos_list = serializers.serialize(<span class="string">'json'</span>, todos)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(todos_list, content_type=<span class="string">'text/json-comment-filtered'</span>)</span><br></pre></td></tr></table></figure><h2 id="PostMan을-통한-확인"><a href="#PostMan을-통한-확인" class="headerlink" title="PostMan을 통한 확인"></a>PostMan을 통한 확인</h2><h3 id="JWT-TOKEN-생성"><a href="#JWT-TOKEN-생성" class="headerlink" title="JWT TOKEN 생성"></a>JWT TOKEN 생성</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[POST]</span><br><span class="line">http://127.0.0.1:8000/api/token/</span><br><span class="line"></span><br><span class="line">Body -&gt; form-data</span><br><span class="line">username:</span><br><span class="line">password:</span><br></pre></td></tr></table></figure><p><strong>결과값</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"토큰값"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실패시</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"non_field_errors"</span>: [</span><br><span class="line">        <span class="string">"Unable to log in with provided credentials."</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>데이터 값 확인</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[GET]</span><br><span class="line">http://127.0.0.1:8000</span><br><span class="line"></span><br><span class="line">Headers</span><br><span class="line">Authorization: jwt 토큰값</span><br></pre></td></tr></table></figure><p><strong>결과값</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"model"</span>: <span class="string">"todos.todos"</span>,</span><br><span class="line">        <span class="attr">"pk"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"content"</span>: <span class="string">"확인!"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="JWT-TOKEN-검증"><a href="#JWT-TOKEN-검증" class="headerlink" title="JWT TOKEN 검증"></a>JWT TOKEN 검증</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[POST]</span><br><span class="line">http://127.0.0.1:8000/api/token/verify/</span><br><span class="line"></span><br><span class="line">Body -&gt; form-data</span><br><span class="line">token: 토큰값</span><br></pre></td></tr></table></figure><p><strong>결과값</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"토큰값"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실패시</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"non_field_errors"</span>: [</span><br><span class="line">        <span class="string">"Error decoding signature."</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWT-TOKEN-갱신"><a href="#JWT-TOKEN-갱신" class="headerlink" title="JWT TOKEN 갱신"></a>JWT TOKEN 갱신</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[POST]</span><br><span class="line">http://127.0.0.1:8000/api/token/refresh/</span><br><span class="line"></span><br><span class="line">Body -&gt; form-data</span><br><span class="line">token: 토큰값</span><br></pre></td></tr></table></figure><p><strong>결과값</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"변경된 토큰값"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실패시</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"non_field_errors"</span>: [</span><br><span class="line">        <span class="string">"Error decoding signature."</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><p> <a href="http://www.opennaru.com/opennaru-blog/jwt-json-web-token/" target="_blank" rel="noopener">http://www.opennaru.com/opennaru-blog/jwt-json-web-token/</a><br> <a href="https://brownbears.tistory.com/440" target="_blank" rel="noopener">https://brownbears.tistory.com/440</a><br> <a href="https://dev-yakuza.github.io/ko/django/jwt/" target="_blank" rel="noopener">https://dev-yakuza.github.io/ko/django/jwt/</a> </p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS] Django AWS EC2 Deploy - 1</title>
      <link href="/2019/12/03/deploy-django/"/>
      <url>/2019/12/03/deploy-django/</url>
      
        <content type="html"><![CDATA[<h2 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h2><p>Django를 AWS EC2에 배포하여 접근하기</p><h2 id="용어"><a href="#용어" class="headerlink" title="용어"></a>용어</h2><p><strong>EC2</strong>(Elastic Compute Cloud): 가상 인스턴스를 운영하는 서비스</p><p><strong>인스턴스</strong>(Instance): AWS에서 가상 서버를 부르는 용어</p><p>가상서버: CPU와 메모리를 가진 클라우드 내 서버</p><p><strong>IAM</strong>(Identity and Access Management): 사용자 엑세스 및 암호화 키 관리</p><p><strong>보안 그룹</strong>(Security Group): 인스턴스에 대한 트래픽을 제어하는 가상 방화벽 역할 </p><h2 id="AWS-설정"><a href="#AWS-설정" class="headerlink" title="AWS 설정"></a>AWS 설정</h2><h3 id="IAM-생성"><a href="#IAM-생성" class="headerlink" title="IAM 생성"></a>IAM 생성</h3><img src="/2019/12/03/deploy-django/01.png" class="slug"><p>AWS에서 IAM을 먼저 생성하고 진행 해야한다.</p><img src="/2019/12/03/deploy-django/02.png" class="slug"><p>진행하며 사용자가 생성되면 <code>Access Key ID</code>와 <code>Secret access key</code>가 나온다.<br><strong><code>Secret access key</code>는 절대 노출되어서는 안된다</strong>.</p><img src="/2019/12/03/deploy-django/03.png" class="slug"><p><strong>키 페어</strong>를 생성하면 <code>pem</code>파일이 만들어진다.</p><img src="/2019/12/03/deploy-django/04.png" class="slug"><img src="/2019/12/03/deploy-django/05.png" class="slug"><p>아래 보이는 규칙 추가를 이용해서 port를 열어줄 것이다.</p><img src="/2019/12/03/deploy-django/06.png" class="slug"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 pem파일</span><br></pre></td></tr></table></figure><h2 id="인스턴스에-접속하기"><a href="#인스턴스에-접속하기" class="headerlink" title="인스턴스에 접속하기"></a>인스턴스에 접속하기</h2><p>생성한 가상 컴퓨터 인스턴스에 <code>ssh</code>를 사용하여 접속</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i pem파일 유저명@EC2퍼플릭DNS주소</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>가 나오면 yes를 입력하여 접속하면 된다.</p><h3 id="기본설정"><a href="#기본설정" class="headerlink" title="기본설정"></a>기본설정</h3><h4 id="update-package"><a href="#update-package" class="headerlink" title="update package"></a>update package</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 패키지 의존성 검사 및 업그레이드</span></span><br><span class="line">sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure><p>다른 화면이 나올 경우에는 <code>Enter</code>를 누르면 된다.</p><h4 id="Install-python-pip"><a href="#Install-python-pip" class="headerlink" title="Install python-pip"></a>Install python-pip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure><h4 id="Install-zsh"><a href="#Install-zsh" class="headerlink" title="Install zsh"></a>Install zsh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><h4 id="Install-oh-my-zsh"><a href="#Install-oh-my-zsh" class="headerlink" title="Install oh-my-zsh"></a>Install oh-my-zsh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L http://install.ohmyz.sh | sh</span><br></pre></td></tr></table></figure><h4 id="Change-Default-shell"><a href="#Change-Default-shell" class="headerlink" title="Change Default shell"></a>Change Default shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh ubuntu -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><h4 id="Install-pyenv-requirements"><a href="#Install-pyenv-requirements" class="headerlink" title="Install pyenv requirements"></a>Install pyenv requirements</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils</span><br></pre></td></tr></table></figure><h4 id="Install-pyenv"><a href="#Install-pyenv" class="headerlink" title="Install pyenv"></a>Install pyenv</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><h4 id="pyenv-설정을-zshrc-기록"><a href="#pyenv-설정을-zshrc-기록" class="headerlink" title="pyenv 설정을 .zshrc 기록"></a>pyenv 설정을 .zshrc 기록</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/ubuntu/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure><p>위의 내용이 <code>.zshrc</code>에 기록해야하는 것인지 bash에 한줄 한줄 써서 진행해야 하는것이 판별 필요</p><p>진행할때는 기록하고 하였으나 에러가 발생하여 한줄 한줄 bash에 작성하여 진행하여 해결함</p><h2 id="Django-설정"><a href="#Django-설정" class="headerlink" title="Django 설정"></a>Django 설정</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R ubuntu:ubuntu /srv/</span><br></pre></td></tr></table></figure><h3 id="git-clone을-통한-프로젝트-가져오기"><a href="#git-clone을-통한-프로젝트-가져오기" class="headerlink" title="git clone을 통한 프로젝트 가져오기"></a>git clone을 통한 프로젝트 가져오기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 프로젝트git주소</span><br></pre></td></tr></table></figure><p>예시 Git 프로젝트 주소<br><a href="https://github.com/TaeJuneJoung/Python-Deploy/tree/deploy-test" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/Python-Deploy/tree/deploy-test</a></p><h3 id="pyenv-설치-및-virtualenv"><a href="#pyenv-설치-및-virtualenv" class="headerlink" title="pyenv 설치 및 virtualenv"></a>pyenv 설치 및 virtualenv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 프로젝트폴더</span><br><span class="line">pyenv install 3.7.5 <span class="comment">#파이썬 버전</span></span><br><span class="line">pyenv virtualenv deploy_ec2</span><br><span class="line">pyenv <span class="built_in">local</span> deploy_ec2</span><br></pre></td></tr></table></figure><h4 id="Install-python-library"><a href="#Install-python-library" class="headerlink" title="Install python library"></a>Install python library</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev python-setuptools</span><br></pre></td></tr></table></figure><h4 id="pyenv-접속"><a href="#pyenv-접속" class="headerlink" title="pyenv 접속"></a>pyenv 접속</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pyenv shell 3.7.5</span><br><span class="line"></span><br><span class="line">pip --version</span><br><span class="line"></span><br><span class="line">pip install django</span><br><span class="line"></span><br><span class="line"><span class="comment"># requirements.txt가 있다면</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="runserver-테스트"><a href="#runserver-테스트" class="headerlink" title="runserver 테스트"></a>runserver 테스트</h3><ul><li>0:8000으로 지정필요</li><li>웹 브라우저에서 &lt;퍼블릭 DNS:8000=””&gt; 로 접속하기 위해서는 보안그룹(security group) 설정이 필요 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0:8000</span><br></pre></td></tr></table></figure><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><p> <a href="https://nachwon.github.io/django-deploy-1-aws/" target="_blank" rel="noopener">https://nachwon.github.io/django-deploy-1-aws/</a> </p><p> <a href="https://wayhome25.github.io/django/2018/03/03/django-deploy-03-ec2/" target="_blank" rel="noopener">https://wayhome25.github.io/django/2018/03/03/django-deploy-03-ec2/</a> </p><p> <a href="https://jiyeonseo.github.io/2016/07/27/install-pyenv/" target="_blank" rel="noopener">https://jiyeonseo.github.io/2016/07/27/install-pyenv/</a> </p>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Deploy </tag>
            
            <tag> EC2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project] End Movie</title>
      <link href="/2019/11/14/project-endmovie/"/>
      <url>/2019/11/14/project-endmovie/</url>
      
        <content type="html"><![CDATA[<h2 id="프로젝트-목적"><a href="#프로젝트-목적" class="headerlink" title="프로젝트 목적"></a>프로젝트 목적</h2><p>이전에 Django를 처음 배우면서 만들었던 영화 프로젝트를 <code>RESTFUL</code>을 이용한 방법으로 만들어보고자 토이 프로젝트를 진행하였다.</p><ol><li>RESTFUL 학습</li><li>Front-END 학습</li></ol><dl><dt>초기 프로젝트 주소</dt><dd><a href="https://github.com/ClearRoot/EndGamePJ" target="_blank" rel="noopener">https://github.com/ClearRoot/EndGamePJ</a></dd></dl><dl><dt>현재 프로젝트 주소</dt><dd><a href="https://github.com/TaeJuneJoung/endMovie" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/endMovie</a></dd></dl><img src="/2019/11/14/project-endmovie/guest_main.png" class="slug"><p>The Movie DB API를 이용하여 데이터를 가져와 DB에 저장한 후, 처음 페이지에서 보여주었다.<br>너무 많은 데이터를 한꺼번에 보여줘서 스크롤의 압박이 생길까하여 처음에는 28개의 영화 정보를 보여주고 <code>더보기</code> 버튼을 누르면 12개씩 추가되도록 하였다.</p><img src="/2019/11/14/project-endmovie/guest_movie_detail01.png" class="slug"><p>하나의 영화 정보를 클릭해서 들어가면 처음 맞이하는 페이지</p><img src="/2019/11/14/project-endmovie/guest_movie_detail02.png" class="slug"><p>아래의 공간에는 Youtube를 통해 예고편 보기와 영화 내용, 댓글 기능이 구현되어 있다.</p><img src="/2019/11/14/project-endmovie/join.png" class="slug"><p>회원은 회원이름을 ID로 하고, 비밀번호는 숫자+영어+특수문자로 8자 이상을 기입하여야 가능하다. 이메일 인증을 통해 무분별한 사용자를 막고자 하였다.(휴대전화로 하려고 하였으나, 문자는 금액적인 부분이 발생으로 이메일로 구현)</p><img src="/2019/11/14/project-endmovie/login.png" class="slug"><p>회원가입과 로그인 디자인 부분은 <code>N</code>사에서 얻어왔다.</p><img src="/2019/11/14/project-endmovie/user_main.png" class="slug"><p>로그인을 한 사용자는 영화의 평점도 영화 리스트를 보며 남길 수 있다.</p><img src="/2019/11/14/project-endmovie/user_movie_detail01.png" class="slug"><p>로그인 사용자는 댓글을 작성하며 댓글에 대한 <code>좋아요</code> 기능을 사용할 수 있다.</p><h2 id="추후-발전-계획-내용"><a href="#추후-발전-계획-내용" class="headerlink" title="추후 발전 계획 내용"></a>추후 발전 계획 내용</h2><ol><li>영화 추천 서비스</li><li>배포(Deploy)</li><li>검색기능</li><li>좋아요 기능</li><li>댓글 신고 기능 / BEST 댓글</li><li>약관동의/회원 분실 찾기</li></ol><p>1번과 2번은 추후라도 꼭 해볼 내용<br>1번은 AI부분이나 빅데이터 부분을 배워야하기에 학습을 이룬 후에 1번과 2번을 위주로 할 계획</p><p>3~6번은 서비스에는 필요하나 학습 위주의 토이 프로젝트이기에 구현이 어렵지 않으므로 넘길 수 있음</p><p>2번의 배포는 Docker를 이용하고 CI/CD 자동화를 한 후에 가능하다면 <code>kubernetes</code>를 알아보고 적용해볼 계획</p><h2 id="프로젝트를-하며-느낀점"><a href="#프로젝트를-하며-느낀점" class="headerlink" title="프로젝트를 하며 느낀점"></a>프로젝트를 하며 느낀점</h2><p>현재까지 작성한 부분은 <code>영화 추천 서비스</code>를 하기 위해 기본적인 부분들을 만든 토이 프로젝트다.<br>다른 부분들을 하면서 시간이 날 때마다 조금씩 하다보니 집중력이 많이 들어간 프로젝트는 아닌 점이 아쉽다.<br>그래도 Front를 Vue와 Vuetify로 만들면서 정말 편하다는 점과 Back단만 고집했던 나 자신이 Full Stack으로 하면서 ‘하나의 기본적인 프로젝트를 완성할 수 있구나’라는 자신감을 느낄수 있었다.<br>서버단에서 RESTFUL을 이용할 때는 Django는 Serailizer를 이용해야하니 Django에서 바로 서비스를 만들때랑은 다르겠구나 하였는데, 기본은 어디에서나 쓰이고 기본이 튼튼해야함을 느낄 수 있었다.</p><h3 id="다른-프로젝트에서-적용해볼-내용"><a href="#다른-프로젝트에서-적용해볼-내용" class="headerlink" title="다른 프로젝트에서 적용해볼 내용"></a>다른 프로젝트에서 적용해볼 내용</h3><ul><li><p>JWT Token<br>현 프로젝트에서는 회원 정보를 JWT토큰으로 주고 받고 있지 않기에 JWT토큰에 대한 부분을 만들어 봐야겠다.</p></li><li><p>TDD 개발<br>TDD개발을 어떻게 하는지 감은 오는데 정확한 방법을 몰라 연습해 봐야겠다. 감 잡은 내용은 아래의 주소와 같다.</p></li></ul><p><a href="https://wikidocs.net/11057" target="_blank" rel="noopener">https://wikidocs.net/11057</a></p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] SMTP 이메일 보내기</title>
      <link href="/2019/11/10/python-smtp/"/>
      <url>/2019/11/10/python-smtp/</url>
      
        <content type="html"><![CDATA[<h2 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h2><p><strong>Simple Mail Transfer Protocol</strong></p><p>: 인터넷 상의 유효한 이메일 아이디로 이메일을 보내는데 사용되는 클라이언트</p><h2 id="IMAP-설정"><a href="#IMAP-설정" class="headerlink" title="IMAP 설정"></a>IMAP 설정</h2><img src="/2019/11/10/python-smtp/smtp01.png" class="slug"><p>설정안함을 설정함으로 바꿔주면 된다.<br>이 설정만 하면은 Gmail의 보안규칙을 다 지키진 못한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.gaierror: [Errno 11001] getaddrinfo failed</span><br></pre></td></tr></table></figure><p>무슨 문제인가 했더니, 다른 부분으로 설정하기도 하였고 <code>app password</code>를 사용하지도 않아 Gmail 정책 보안상 문제가 일어났던 부분이 있었던거 같다.</p><h2 id="APP-Password-설정"><a href="#APP-Password-설정" class="headerlink" title="APP Password 설정"></a>APP Password 설정</h2><img src="/2019/11/10/python-smtp/smtp02.png" class="slug"><p>계정설정으로 들어간 후, 보안에서 2차 비밀번호를 설정하고 앱 패스워드를 설정하면 된다.</p><img src="/2019/11/10/python-smtp/smtp03.png" class="slug"><p>앱 패스워드는 16자로 주워지며, Email에 대한 부분을 사용할 것이기에 필자는 <code>메일 / Windows 컴퓨터</code>로 설정하였다.<br>설정이 끝나서 받은 앱 패스워드를 이제 사용할 것이기에 잊어버리면 안된다.</p><h2 id="메일-보내기"><a href="#메일-보내기" class="headerlink" title="메일 보내기"></a>메일 보내기</h2><p>기본적인 설정이 끝났으니, 이제 메일을 보내도록 하겠다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="comment"># STMP 세션 생성</span></span><br><span class="line">smtp = smtplib.SMTP(<span class="string">'smtp.gmail.com'</span>, <span class="number">587</span>) <span class="comment">#Gmail Port: 587</span></span><br><span class="line"><span class="comment"># TLS 보안 start</span></span><br><span class="line">smtp.starttls()</span><br><span class="line"></span><br><span class="line">smtp.login(<span class="string">'gmail email'</span>, <span class="string">'app password'</span>)</span><br><span class="line"></span><br><span class="line">msg = MIMEText(<span class="string">'내용 : content'</span>)</span><br><span class="line">msg[<span class="string">'Subject'</span>] = <span class="string">'제목 : Title'</span></span><br><span class="line"></span><br><span class="line">smtp.sendmail(<span class="string">'발신자 이메일'</span>, <span class="string">'수신자 이메일'</span>, msg.as_string())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 세션 종료</span></span><br><span class="line">smtp.quit()</span><br></pre></td></tr></table></figure><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p> <a href="https://yeolco.tistory.com/93" target="_blank" rel="noopener">https://yeolco.tistory.com/93</a> </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> SMTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt] Middleware</title>
      <link href="/2019/10/29/nuxt-navigator/"/>
      <url>/2019/10/29/nuxt-navigator/</url>
      
        <content type="html"><![CDATA[<h2 id="Nuxt-universal-storage"><a href="#Nuxt-universal-storage" class="headerlink" title="Nuxt universal storage"></a>Nuxt universal storage</h2><p><small> <a href="https://github.com/nuxt-community/universal-storage-module" target="_blank" rel="noopener">https://github.com/nuxt-community/universal-storage-module</a> </small></p><blockquote><p>Nuxt의 서버랜더링에서는 클라이언트 부분에 접근할 수 없다.</p><p>middleware를 사용함에 있어서 LocalStorage와 같은 부분들에 접근할 수 없었고,</p><p>window 객체를 사용할 수도 없었다. 또한, context.store에 접근하여도 초기값을 가져오고 이후 변경된 값을 가져온다 하여도 F5로 새로고침 되거나 다른 페이지로 넘어가는 순간 다시 초기값이 되었다.</p><p>이를 해결하기 위해 Nuxt에서 LocalStorage를 사용할 수 있는 모듈을 설치하였다.</p></blockquote><p>nuxt mode에서는 <strong>spa</strong>와 <strong>universal</strong>이 있다.</p><ol><li><p>spa</p><blockquote><p>서버측 렌더링 없음(클라이언트 탐색만)</p></blockquote></li><li><p>universal</p><blockquote><p>동적 응용 프로그램(서버측 랜더링 + 클라이언트 탐색)</p></blockquote></li></ol><p><small>사이트:  <a href="https://nuxtjs.org/api/configuration-mode#the-mode-property" target="_blank" rel="noopener">https://nuxtjs.org/api/configuration-mode#the-mode-property</a> </small></p><h2 id="느낀점"><a href="#느낀점" class="headerlink" title="느낀점"></a>느낀점</h2><p>nuxt에 <code>process.browser</code>와 <code>process.server</code>가 있는 것으로 보아 브라우저일 때와 서버일 때가 나눠져 있다. 더 재미있는 사실은 두 개가 다 아닐 때도 있다. 이 설정이 nuxt.config.js에 env에 있는 것 같다.(정확히 파악은 하지 않음)</p><p>Middleware를 어떻게 쓸 것인가가 가장 큰 관건인데, 서버단에서 context를 이용하지 않은 store접근은 불가하다고 보는게 낫다. 그리고 기본적으로는 window도 사용할 수 없다.</p><p>redirect시에 store가 날라가는 위험성도 존재하니, 이를 보완하기 위해 storage나 cookie에 일부 데이터를 저장하고 비동기 통신을 통해서 가져오는 것이 어떠한가 생각한다.</p><p>현재로서의 결론] user의 id나 email정도를 저장소에 보관하고 axios를 통해 DB값을 가져와서 악의적 사용자가 발생하지 않도록 예방하기</p>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
            <tag> Middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask] Rest Api</title>
      <link href="/2019/09/23/flask-rest-api/"/>
      <url>/2019/09/23/flask-rest-api/</url>
      
        <content type="html"><![CDATA[<h2 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h2><p>​Flask REST API를 만드는 방법에 대해서 학습해보고자 한다.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br><span class="line">pip install flask_restful</span><br><span class="line">pip install flask-cors</span><br></pre></td></tr></table></figure><h2 id="Flask-Settings"><a href="#Flask-Settings" class="headerlink" title="Flask Settings"></a>Flask Settings</h2><p>​    먼저, Flask를 만들어보자.</p><p><a href="https://palletsprojects.com/p/flask/" target="_blank" rel="noopener">Flask Docs</a>를 보고 따라하면 된다. 먼저 아래의 소스를 <code>app.py</code>를 생성하여 넣어보자. 작성 후에 <code>python app.py</code>를 실행해보면 Flask 서버를 실행할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, escape, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">"name"</span>, <span class="string">"World"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Hello, <span class="subst">&#123;escape(name)&#125;</span>!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Connect-Database"><a href="#Connect-Database" class="headerlink" title="Connect Database"></a>Connect Database</h2><p>​    값을 가져오기 위해서 Database와 연동하자. DB는 Flask와 연결되어 있는 sqlite3를 사용하도록 하겠다. 다른 DB를 사용하고 싶으면 갈아 끼우고 그에 맞는 설정만 하면 그만이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># database 폴더가 없다면 생성</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">'database'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'database'</span>)</span><br><span class="line"></span><br><span class="line">conn = <span class="literal">None</span></span><br><span class="line">cur = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn = sqlite3.connect(<span class="string">'database/database.db'</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    </span><br><span class="line">    cur.execute(<span class="string">'''CREATE TABLE IF NOT EXISTS todos(</span></span><br><span class="line"><span class="string">        id INTEGER PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">        work TEXT,</span></span><br><span class="line"><span class="string">        create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="string">        )'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    cur = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_todos</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">'''</span></span><br><span class="line"><span class="string">        SEELCT * FROM todos;</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    data = cur.fetchall()</span><br><span class="line">    close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_todo</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">f'''</span></span><br><span class="line"><span class="string">        SELECT * FROM todos</span></span><br><span class="line"><span class="string">        WHERE id = <span class="subst">&#123;id&#125;</span>;</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    data = cur.fetchone()</span><br><span class="line">    close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_todo</span><span class="params">(work)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">f"""</span></span><br><span class="line"><span class="string">        INSERT INTO todos (work)</span></span><br><span class="line"><span class="string">        VALUES ('<span class="subst">&#123;work&#125;</span>');</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line">    close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_todo</span><span class="params">(id, work)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">f"""</span></span><br><span class="line"><span class="string">        UPDATE todos</span></span><br><span class="line"><span class="string">        SET work = '<span class="subst">&#123;work&#125;</span>'</span></span><br><span class="line"><span class="string">        WHERE id = <span class="subst">&#123;id&#125;</span>;</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line">    close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_todo</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">f'''</span></span><br><span class="line"><span class="string">        DELETE FROM todos</span></span><br><span class="line"><span class="string">        WHERE id = <span class="subst">&#123;id&#125;</span>;</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    close()</span><br></pre></td></tr></table></figure><p>​    ORM형식으로 짠 것이 아니라 그런지, 발생한 이슈는 <code>Text</code>타입일 때 Insert나 Update SQL Query에서 <code>&#39;</code>싱글 쿼터나 더블 쿼터로 감싸주지 않아서 타입 오류가 발생하였다. 이에 대한 대응책도 하나 마련해야한다. 싱글 쿼터로 감싸주었는데 값에 싱글 쿼터가 있다면 SQL Injection이 발생하고 말 것이다. 여기에는 작성하지 않았지만, 이를 해결하기 위해서 python의 <code>replace문</code>을 사용할 수 있다.</p><h2 id="BASIC-RESTFUL-API"><a href="#BASIC-RESTFUL-API" class="headerlink" title="BASIC RESTFUL API"></a>BASIC RESTFUL API</h2><p>​    에러처리 없는 기본적인 REST API는 아래와 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, escape, request</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> reqparse, abort, Api, Resource</span><br><span class="line"><span class="keyword">import</span> database</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todos</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> database.get_todos()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'work'</span>, type=str, required=<span class="literal">True</span>)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        database.post_todo(args)</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> database.get_todo(id)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'work'</span>, type=str, required=<span class="literal">True</span>)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        database.put_todo(id, args[<span class="string">'work'</span>])</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        database.delete_todo(id)</span><br><span class="line"></span><br><span class="line">api.add_resource(Todos, <span class="string">'/todos'</span>)</span><br><span class="line">api.add_resource(Todo, <span class="string">'/todo/&lt;int:id&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">"name"</span>, <span class="string">"World"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Hello, <span class="subst">&#123;escape(name)&#125;</span>!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​    테스트 해보던 중에 한가지 문제가 발생하였다. get으로 가져온 다음에 F5를 누르면 해당 값이 <code>None</code>이 되면서 <strong>TypeError</strong>을 발생하는 것이었다. 데이터베이스 구조에서 <strong>close</strong>를 해주기에 생기는 문제였는데,  이는 sqlite3에서 발생하였다.  sqlite3는 동시성이 필요한 작업에서는 사용하지 않는 것이 좋다.</p><p>​    DB를 고려하지 않는다고 하였을 때도 새로운 문제가 발생한다. 다른 주소에서 접근을 할 수가 없는 문제있다. 이를 해결하기 위해서 CORS를 설정해주어야한다.</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p><strong>Cross-Origin Resource Sharing</strong></p><p>: 시스템 수준에서 타 도메인 간 자원 호출을 승인하거나 차단하는 것을 결정하는 것</p><h2 id="완성-RESTFUL-API"><a href="#완성-RESTFUL-API" class="headerlink" title="완성 RESTFUL API"></a>완성 RESTFUL API</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, escape, request</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> reqparse, abort, Api, Resource</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">import</span> database</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">CORS(app)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todos</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> database.get_todos()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'work'</span>, type=str, required=<span class="literal">True</span>)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        database.post_todo(args)</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = database.get_todo(id)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            data = abort(<span class="number">404</span>, message=<span class="string">f"Todo id:<span class="subst">&#123;id&#125;</span> doesn't exist"</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            database.get_todo(id)</span><br><span class="line">            parser = reqparse.RequestParser()</span><br><span class="line">            parser.add_argument(<span class="string">'work'</span>, type=str, required=<span class="literal">True</span>)</span><br><span class="line">            args = parser.parse_args()</span><br><span class="line">            database.put_todo(id, args[<span class="string">'work'</span>])</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            args = abort(<span class="number">404</span>, message=<span class="string">f"Todo id:<span class="subst">&#123;id&#125;</span> doesn't exist"</span>)</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            database.get_todo(id)</span><br><span class="line">            database.delete_todo(id)</span><br><span class="line">            data = &#123;<span class="string">"message"</span>: <span class="string">"Delete"</span>&#125;</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            data = abort(<span class="number">404</span>, message=<span class="string">f"Todo id:<span class="subst">&#123;id&#125;</span> doesn't exist"</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">api.add_resource(Todos, <span class="string">'/todos'</span>)</span><br><span class="line">api.add_resource(Todo, <span class="string">'/todo/&lt;int:id&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">"name"</span>, <span class="string">"World"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Hello, <span class="subst">&#123;escape(name)&#125;</span>!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h3><p><a href="http://egloos.zum.com/sweeper/v/3052951" target="_blank" rel="noopener">SQLite 장단점</a></p><p><a href="https://flask-restful.readthedocs.io/en/0.3.5/quickstart.html" target="_blank" rel="noopener">Flask-Restful Docs</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> REST API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows] Hyper-V</title>
      <link href="/2019/08/25/hyper-v/"/>
      <url>/2019/08/25/hyper-v/</url>
      
        <content type="html"><![CDATA[<h3 id="Window10에서-Virtual-Box-구동시-Error"><a href="#Window10에서-Virtual-Box-구동시-Error" class="headerlink" title="Window10에서 Virtual Box 구동시 Error"></a>Window10에서 Virtual Box 구동시 Error</h3><br>> 제어판 -> 프로그램 -> 프로그램 및 기능<br>> -> Windows 기능 켜기/끄기<br><br>Hyper-V 설정이 켜 있는 경우 가상화 기능을 독점하기에 가상화를 사용하는 다른 프로그램과 충돌이 일어날 수 있다.<br><br>Docker를 Window버전으로 다운받아 쓰다가 VirtualBox를 써서 Linux를 사용하려고 하였는데 Hyper-V문제로 작동되지 않았다.<br>Hyper-V를 위의 경로로 찾아가 끄고 진행하였더니 블루스크린이 나오고 결국은 복원을 눌러 다시 On이 되었다.<br><br><br>Hyper-V가 윈도우 부팅시 자동으로 실행되지 않게 하기 위해<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><br><p>원래 설정으로 복원하기 위해서는</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure><br>명령어를 입력하면 된다.]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hyper-V </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Meta Class</title>
      <link href="/2019/08/08/meta-class/"/>
      <url>/2019/08/08/meta-class/</url>
      
        <content type="html"><![CDATA[<p>클래스 -&gt; 인스턴스 객체 생성</p><p>메타클래스 -&gt; 클래스 객체 생성</p><p><strong>type(name, bases, dict)</strong></p><blockquote><p><code>type()</code> 함수의 목적은 타입을 알아보는 것도 있지만,</p><p><strong>새로운 클래스를 만드는 메타클래스의 목적</strong>도 있다.</p><p>name : 만들 클래스 이름</p><p>bases : 부모 클래스의 튜플</p><p>dict : 속성 값을 정의하는 심볼 사전</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line">Klass = Klass()</span><br><span class="line">print(Klass) <span class="comment">#&lt;__main__.Klass object at 0x0...&gt;</span></span><br><span class="line"></span><br><span class="line">Klass2 = type(<span class="string">'Klass2'</span>, (), &#123;<span class="string">'a'</span>:<span class="number">10</span>, <span class="string">'b'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">print(Klass2) <span class="comment">#&lt;class '__main__.Klass2'&gt;</span></span><br><span class="line"></span><br><span class="line">print(Klass.a, Klass2.a) <span class="comment">#10 10</span></span><br><span class="line">print(type(Klass), type(Klass2)) <span class="comment">#&lt;class '__main__.Klass'&gt; &lt;class 'type'&gt;</span></span><br></pre></td></tr></table></figure><p><strong>-상속 구현</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Inheritance가 Klass를 상속받음</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inheritance</span><span class="params">(Klass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">inheritance = type(<span class="string">'Inher'</span>, (), &#123;&#125;)</span><br><span class="line">print(inheritance) <span class="comment">#&lt;class '__main__.Inher'&gt;</span></span><br><span class="line">print(inheritance.__bases__) <span class="comment">#(&lt;class 'object'&gt;,) -베이스 클래스 확인</span></span><br></pre></td></tr></table></figure><p><strong>-클래스 동적 구현</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(self.a)</span><br><span class="line"></span><br><span class="line">Dynamic = type(<span class="string">'Dynamic'</span>, (Klass,), &#123;<span class="string">'display'</span>:display&#125;)</span><br><span class="line">res = Dynamic()</span><br><span class="line">print(res.display) <span class="comment">#&lt;bound method display of &lt;__main__.Dynamic object at ...&gt;&gt;</span></span><br><span class="line">print(Dynamic.mro()) <span class="comment">#[&lt;class '__main__.Dynamic'&gt;, &lt;class '__main__.Klass'&gt;, &lt;class 'object'&gt;]</span></span><br></pre></td></tr></table></figure><p><strong>-메타클래스 생성</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubType</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        print(<span class="string">'__init__'</span>, name)</span><br><span class="line">        super().__init__(name, bases, class_dict)</span><br><span class="line"></span><br><span class="line">Sub1 = SubType(<span class="string">'SubMetaClass'</span>, (), &#123;&#125;) <span class="comment">#__init__ SubMetaClass</span></span><br><span class="line">print(Sub1) <span class="comment">#&lt;class '__main__.SubMetaClass'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Method가 있는 클래스 생성</span></span><br><span class="line">Sub2 = SubType(<span class="string">'SubMetaClass2'</span>, (), &#123;<span class="string">'foo'</span>:<span class="keyword">lambda</span> self: <span class="string">'bar'</span>&#125;) <span class="comment">#__init__ SubMetaClass2</span></span><br><span class="line">sub = Sub2()</span><br><span class="line">print(Sub2) <span class="comment">#&lt;class '__main__.SubMetaClass2'&gt;</span></span><br><span class="line">print(sub) <span class="comment">#&lt;__main__.SubMetaClass2 object at 0x...&gt;</span></span><br><span class="line">print(sub.foo()) <span class="comment">#bar</span></span><br></pre></td></tr></table></figure><p><strong>-메서드 자동 추가</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#__new__()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubType</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(class_object, name, bases, class_dict)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubType2</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        class_dict[<span class="string">'foo'</span>] = <span class="keyword">lambda</span> self: <span class="string">'bar'</span> <span class="comment">#add method</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(class_object, name, bases, class_dict)</span><br><span class="line"></span><br><span class="line">Sub = SubType2(<span class="string">'SubMetaClass'</span>, (), &#123;&#125;)</span><br><span class="line">res = Sub()</span><br><span class="line">print(res.foo()) <span class="comment">#bar</span></span><br></pre></td></tr></table></figure><p><code>type</code>을 <code>super</code>로 바꾸면 안됨.</p><p><code>__new__()</code> 메서드로 전달되는 클래스와 <code>__init__()</code>메서드로 전달되는 첫 인수는 다른 객체이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubType</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        print(<span class="string">'[__new__]'</span>, class_object.__name__, name) <span class="comment">#[__new__] SubType SubMetaClass</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(class_object, name, bases, class_dict)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        print(<span class="string">'[__init__]'</span>, class_object.__name__, name) <span class="comment">#[__init__] SubMetaClass SubMetaClass</span></span><br><span class="line">        type.__init__(class_object, name, bases, class_dict)</span><br><span class="line"></span><br><span class="line">Sub = SubType(<span class="string">'SubMetaClass'</span>, (), &#123;&#125;)</span><br></pre></td></tr></table></figure><p><code>__new__()</code> : 메타클래스</p><p><code>__init__()</code> : 클래스 객체</p><p>메타클래스에 정의된 모든 클래스는 첫 인수로 생성된 클래스 객체를 받는다.</p><p>-&gt; 메타클래스의 메서드는 생성된 객체(클래스)를 인수로 받기 때문</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span><span class="params">(type)</span>:</span> <span class="comment">#Meta Class</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">who_am_i</span><span class="params">(class_name)</span>:</span></span><br><span class="line">        <span class="comment">#class_name에 self를 써야하나 메타클래스의 메서드는 생성된 객체를 첫 인자로 받기에</span></span><br><span class="line">        print(<span class="string">f"I am <span class="subst">&#123;class_name&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">foo = Klass(<span class="string">'Foo'</span>, (), &#123;&#125;)</span><br><span class="line">print(foo.who_am_i) <span class="comment">#&lt;bound method Klass.who_am_i of &lt;class '__main__.Foo'&gt;&gt;</span></span><br><span class="line">foo.who_am_i() <span class="comment">#I am &lt;class '__main__.Foo'&gt;</span></span><br><span class="line">Klass.who_am_i(foo) <span class="comment">#I am &lt;class '__main__.Foo'&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Meta Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firebase] Colud Database 복합색인</title>
      <link href="/2019/08/08/firebase-colud-database/"/>
      <url>/2019/08/08/firebase-colud-database/</url>
      
        <content type="html"><![CDATA[<p>cloud database에서 사용자의 id를 기반으로 데이터를 가져오고자 하였다.</p><p>초기 소스는 아래와 같이 진행되었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getTodos() &#123;</span><br><span class="line">    <span class="keyword">const</span> todosCollection = firestore.collection(TODOS);<span class="comment">//+</span></span><br><span class="line">    <span class="keyword">return</span> todosCollection</span><br><span class="line">      .orderBy(<span class="string">"sequence"</span>, <span class="string">"asc"</span>)</span><br><span class="line">      .get()</span><br><span class="line">      .then(<span class="function"><span class="params">docSnapshots</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> docSnapshots.docs.map(<span class="function"><span class="params">doc</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> data = doc.data();</span><br><span class="line">          data.created_at = <span class="keyword">new</span> <span class="built_in">Date</span>(data.created_at.toDate());</span><br><span class="line">          data.id = doc.id;</span><br><span class="line">          <span class="keyword">return</span> data;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>이 결과는 다른 사람의 데이터까지 가져왔다.</p><p>개발을 모르는 사용자가 보았을 때는 아무 상관 없을 수도 있으나, 데이터가 많아진다면 다른 사람들의 데이터도 불러오기에 사용자 브라우저에 영향을 미칠 것이었다.</p><p>가져오는 데이터베이스에서 처리해야함을 깨닷고 찾아본 결과 <code>where</code>을 사용하면 되었다.</p><p>처음에는 구글링으로 example을 보면은 변수로 된 값을 비교한다기보단 string의 값 2개를 비교하여 잘 이해가 되지 않았는데, 자세히 보니 앞에는 사용하는 데이터 변수이름이었고 뒤에는 해당 값이었다.</p><p><code>.where(&quot;uid&quot;, &quot;==&quot;, this.store.state.user.email);</code>을 사용하여 데이터의 유저정보와 </p><p>현재 로그인 상태의 유저를 비교하여 해당 값만 가져오게 설계할 수 있었다.</p><p>설계에 1부분만 완성한다면 이제 원하는 값을 만날 수 있다.</p><p>console을 보면 처음 보는 오류가 있다. 그래도 친절하게 주소를 주어 해결방법으로 넘어가게 해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Uncaught (<span class="keyword">in</span> promise) FirebaseError: The query requires an index. You can create it here: https://console.firebase.google.com/project/project_id/database/firestore/indexes?create_composite=...</span><br><span class="line">    at new FirestoreError (http://localhost:8080/app.js:2098:28)</span><br><span class="line">    at JsonProtoSerializer../node_modules/@firebase/firestore/dist/index.cjs.js.JsonProtoSerializer.fromRpcStatus (http://localhost:8080/app.js:7608:16)</span><br></pre></td></tr></table></figure><p>해당 <code>url</code>로 넘어가면 아래 사진과 같이 나오며, 진행해주면 문제가 해결된다.</p><img src="/2019/08/08/firebase-colud-database/firebase_cloud_error01.PNG" class="slug"><h3 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h3><p><a href="https://firebase.google.com/docs/firestore/query-data/queries?hl=ko#simple_queries" target="_blank" rel="noopener">https://firebase.google.com/docs/firestore/query-data/queries?hl=ko#simple_queries</a></p>]]></content>
      
      
      <categories>
          
          <category> Firebase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 복합색인 </tag>
            
            <tag> Cloud Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS] Drag &amp; Drop</title>
      <link href="/2019/08/07/drag&amp;drop/"/>
      <url>/2019/08/07/drag&amp;drop/</url>
      
        <content type="html"><![CDATA[<p>학습목표 :</p><p><strong>나의 Todo List를 <code>Todo, Doing, Finish</code>로 나누어 해당 상황에 맞게 옮겨 관리하기</strong></p><p>Element를 drag할 수 있게 속성 <code>draggable=&quot;true&quot;</code>를 설정해줘야 한다.</p><p><strong>ondragstart</strong></p><p>: drag할 데이터를 지정하는 drag(event)함수를 호출</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drag: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//()"text":데이터 유형, drag된 데이터의 값)</span></span><br><span class="line">    event.dataTransfer.setData(<span class="string">"text"</span>, event.target.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ondragover</strong></p><p>: drag한 데이터를 놓을 수 있는 위치 지정</p><p>기본적으로 데이터/요소는 다른 요소에 놓을 수 없기에, drop을 허용하려면 기본 처리를 방지해야한다.<code>preventDefault()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allowDrop: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//drop허용하기 위해 기본처리 방지</span></span><br><span class="line">event.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ondrop</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drop: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.doto_type_list).includes(event.target.id))  &#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line"><span class="keyword">let</span> data = event.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line">event.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line"><span class="keyword">let</span> data = event.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line">event.target.parentNode.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="해결해나가야하는-문제"><a href="#해결해나가야하는-문제" class="headerlink" title="해결해나가야하는 문제"></a>해결해나가야하는 문제</h3><ol><li><code>appendChild</code>라서 다른 곳으로 전체를 이동 후, 마지막에 옮겨 맨 아래에 있는 요소를 해당 옮긴 라인 상위로 올릴 수가 없음.</li><li>DB와 연동하여 값이 읽고 쓰기가 가능해야함</li><li>dataTransfer.getData와 setData에 대해 알아보기</li></ol><h3 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h3><p><a href="https://www.w3schools.com/html/html5_draganddrop.asp" target="_blank" rel="noopener">https://www.w3schools.com/html/html5_draganddrop.asp</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Drag&amp;Drop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS] PWA</title>
      <link href="/2019/07/27/PWA/"/>
      <url>/2019/07/27/PWA/</url>
      
        <content type="html"><![CDATA[<p><strong>Progressive Web App</strong></p><p>웹과 네이티브 앱의 기능 모두의 이점을 갖도록 수 많은 특정 기술과 표준 패턴을 사용해 개발된 웹 앱.</p><h3 id="Intall-Setting"><a href="#Intall-Setting" class="headerlink" title="Intall Setting"></a>Intall Setting</h3><p>편리한 확인을 위해 <code>Chrome canary(개발자 크롬)</code>를 다운받아 진행.</p><p><code>Node.js</code> Download</p><h3 id="PWA의-등장-배경"><a href="#PWA의-등장-배경" class="headerlink" title="PWA의 등장 배경"></a>PWA의 등장 배경</h3><ul><li>모바일 시장 폭발적 성장</li><li>모바일 웹 보다는 모바일 애플리케이션 사용</li><li>모바일 앱영역 커버하기 위한 시도 -&gt; Hybrid App, React Native</li><li>Offline Web 필요성</li></ul><h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><ol><li>Responsive : 반응형</li><li>App-like</li><li>Discoverable</li><li>Engageable : 푸시 알림</li><li>Connectivity : 온/오프라인 연결성</li><li>Safe : HTTPS가 아니라면 PWA를 적용할 수 없음_보안을 위해서</li></ol><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><p><strong>Web App Manifest</strong></p><p> : Progressive Web App의 설치와 앱 구성정보를 담고 있는 json 형식의 설정 파일</p><pre><code>- 앱 아이콘, 화면 런처 방식, 배경색, 시작 페이지 등을 설정할 수 있는 JSON 파일</code></pre><blockquote><p>앱 관련 구성정보</p><ol><li>Start URL : 웹 앱이 시작되는 지점</li><li>Launch Image : 웹 앱 시작 화면</li><li>Display Type : 웹 앱의 화면 형태</li><li>Display Orientation : 웹 앱 화면 방향</li><li>App Icon : 앱 아이콘 이미지와 크기</li></ol></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*Sample*/</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"short_name"</span>: <span class="string">"앱 아이콘 이름"</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"하단 설치 배너 표기될 이름 / 앱 검색 키워드"</span>,</span><br><span class="line"> <span class="attr">"icons"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"src"</span>: <span class="string">"\/android-icon-36x36.png"</span>,</span><br><span class="line">   <span class="attr">"sizes"</span>: <span class="string">"36x36"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"image\/png"</span>,</span><br><span class="line">   <span class="attr">"density"</span>: <span class="string">"0.75"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"src"</span>: <span class="string">"\/android-icon-96x96.png"</span>,</span><br><span class="line">   <span class="attr">"sizes"</span>: <span class="string">"96x96"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"image\/png"</span>,</span><br><span class="line">   <span class="attr">"density"</span>: <span class="string">"2.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"src"</span>: <span class="string">"\/android-icon-192x192.png"</span>,</span><br><span class="line">   <span class="attr">"sizes"</span>: <span class="string">"192x192"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"image\/png"</span>,</span><br><span class="line">   <span class="attr">"density"</span>: <span class="string">"4.0"</span></span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">"background_color"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line"> <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line"> <span class="attr">"start_url"</span>: <span class="string">"./"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- manifest파일 등록 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"Path/manifest.json"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Launch Image</strong></p><p>App Web이 시작될 때 거치는 시작 화면 설정 가능</p><p>모바일 앱의 시작과 동일한 느낌</p><p>화면 조합 : 아이콘 + 배경색 + 아이콘 이름</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"background_color": "#ffffff",</span><br></pre></td></tr></table></figure><p>icon은 지정 이미지 중 128dp(192px)에 가장 가까운 크기로 지정되므로, 192px 이미지는 꼭 넣어줄 것</p><blockquote><p><strong>dp</strong></p><p>다양한 모바일 화면 크기에서 동일한 비율로 출력되게 하는 픽셀 단위</p></blockquote><p><strong>App Icon</strong></p><p>manifest에서 icon 미지정시 html파일의 <code>&lt;link rel=&quot;icon&quot;&gt;</code> 태그를 검색</p><blockquote><p><strong>브라우저 Safari 경우</strong> 아래 추가 필요</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"icon.png"</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"152x152"</span> <span class="attr">href</span>=<span class="string">"icon-152x152.png"</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"180x180"</span> <span class="attr">href</span>=<span class="string">"icon-180x180.png"</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"167x167"</span> <span class="attr">href</span>=<span class="string">"icon-167x167.png"</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS] Lambda Intro</title>
      <link href="/2019/07/22/aws-lambda-basic/"/>
      <url>/2019/07/22/aws-lambda-basic/</url>
      
        <content type="html"><![CDATA[<p><code>aws lambda</code>에서 함수 생성</p><p>새로 작성 -&gt; 기본정보</p><blockquote><p>함수 이름:</p><p>런타임: 본인 사용 언어</p><p>권한: 실행 역할 -&gt; 기존 역할 사용 or 새 역할</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#해당 내용에서는 Slack을 이용하여 오전 10시마다 정보를 전달해주는 함수를 생성</span></span><br><span class="line"><span class="comment">#기본적으로 Amazon CloudWatch Logs가 있기에</span></span><br><span class="line">CloudWatch Events를 만들어줘야 한다.</span><br><span class="line"><span class="string">'CloudWatch Events'</span>를 이용하여 평일 <span class="number">10</span>시마다 이벤트 발생</span><br><span class="line">일정을 <span class="string">'cron(0 1 ? * MON-FRI *)'</span>으로 하여 평일마다 진행하게 하여주고</span><br><span class="line">기본적으로 GMT시간을 따르는데 한국시간과 <span class="number">9</span>시간 차이나므로(GMT가 <span class="number">9</span>시간 전)</span><br><span class="line">한국시간으로 <span class="number">10</span>시를 해주기 위해서는 <span class="number">-9</span>를 해준 <span class="number">1</span>이 됨</span><br></pre></td></tr></table></figure><p>API Gateway를 이용해야할 때도 있으나, 현재 하는 부분에 대해서는 API Gateway가 불필요하여 사용해보지 않았음.</p><h3 id="Slack-설정"><a href="#Slack-설정" class="headerlink" title="Slack 설정"></a>Slack 설정</h3><p><code>Customize Slack</code>에서 설정</p><p>해당 workspace에 대한 권한이 있어야함을 기본으로 한다.</p><p><code>Configure Apps</code>에서 IFTTT를 만들고, 해당 aws연결할 app을 만들어 진행하면 된다.</p><h3 id="추후-해볼-내용"><a href="#추후-해볼-내용" class="headerlink" title="추후 해볼 내용"></a>추후 해볼 내용</h3><p>만든 프로젝트에서 실시간 데이터를 가져와줘야하는 부분 함수가 있다면 해당 함수만 시간에 따라 진행하도록 하는 방법</p><blockquote><p><strong>example</strong></p><p>영화 프로젝트에서 데이터를 가져오는 파싱 부분을 새벽00시를 기준으로 실행하여 데이터를 변경하는 방법 구현</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190629.md</title>
      <link href="/2019/06/30/20190629-md/"/>
      <url>/2019/06/30/20190629-md/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-06-29-Sat"><a href="#2019-06-29-Sat" class="headerlink" title="2019.06.29(Sat)"></a>2019.06.29(Sat)</h1><h3 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h3><p>Javascript을 통해 이미지 업로드 파일을 미리 보기 기능을 구현하고자 하였다. 사용자 관점에서 <strong>올린 파일 확인</strong>을 통해 편리성을 제공하기 위해서였다.</p><p>목요일에는 JQuery를 통하거나 <code>멀티 파일</code>이 아닌 단일 파일로는 자료가 많다는 것을 확인할 수 있었다. 어떻게 돌아가는지 파악하기 위해서 다른 사람들의 소스를 확인하였다.</p><p>금요일에는 해당 소스들을 Javascript로 변환하고 멀티 파일로 바꾸는 작업을 하였다.</p><p>금요일에는 오랜만의 휴식을 즐기기 위해 많은 작업을 하진 못하였지만, <code>쉬면서도 이렇게 하면 되지 않을까?</code>라는 생각을 해보았다.</p><p>토요일에는 생각했던 부분들을 적용해보았지만, 작동 되지 않았다. <code>onclick</code>, <code>addEventListener</code>가 어떠한 상황속에서도 만들면 되는지 알았는데, FileReader 내부에서 안된다는 오류를 맞이하였다. 되게 신기한건 innerText일 때는 되었던게 innerHTML에서는 되지 않았다.</p><p>이에 대한 문제는 Front-end를 더 접하게 되는 날에 더 연구해봐야겠다. 지금은 만들고자 하는 목표를 빠르게 만드는 것이 중요할 때! 이미지들을 pdf로 변환해서 다운로드를 제공해주는 사이트를 만들려고 했는데… 이미 있긴 한거였지만… 내가 원했던 사이트와 너무 비슷한게 있었다. 이 사이트가 얼마나 많은 이미지들을 수용하고 몇 번의 횟수까지 제공해주는지는 정확힌 모르지만, 내 목표와 유사하게 제한이 없는 것 같았다.</p><p><a href="https://imagetopdf.com/ko/" target="_blank" rel="noopener">https://imagetopdf.com/ko/</a></p><p>위 사이트로서, 해당 사이트는 다국어 지원, 1시간 후 이미지 자료 삭제까지 된다.</p><p>Back-end 개발자를 꿈꾸지만, Front를 해보면서 <code>개발은 어렵구나</code> 라는 슬픔과 더 발전해나가야하는 도전의식을 얻었다.</p><p>아직 가야할길이 너무나도 멀다.</p><h3 id="거인의-어깨-위에-서있는-개발자가-되자"><a href="#거인의-어깨-위에-서있는-개발자가-되자" class="headerlink" title="거인의 어깨 위에 서있는 개발자가 되자!"></a>거인의 어깨 위에 서있는 개발자가 되자!</h3>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo] Git Blog</title>
      <link href="/2019/06/23/hexo/"/>
      <url>/2019/06/23/hexo/</url>
      
        <content type="html"><![CDATA[<ul><li>쉽고 빠른, 강력한 블로그 프레임워크</li><li>Markdown 지원</li><li>작업 환경 CLI(command line interface)방식</li><li>github의 pages 서비스를 활용하여 정적 사이트 생성 가능</li><li>웹 프로그래밍에 대한 기본적인 지식 필요</li></ul><h3 id="Install-node-js"><a href="#Install-node-js" class="headerlink" title="Install node.js"></a>Install node.js</h3><blockquote><p>다운로드 공식사이트</p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p></blockquote><h3 id="Setting-Hexo"><a href="#Setting-Hexo" class="headerlink" title="Setting Hexo"></a>Setting Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cil</span><br><span class="line">mkdir 폴더명</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> 폴더명</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="comment">#웹사이트 초기화</span></span><br><span class="line">npm install <span class="comment">#필요한 패키지 다운로드</span></span><br><span class="line"><span class="comment">#node_modules 폴더가 없을 시 생성</span></span><br><span class="line"><span class="comment">#현재 프로젝트의 package.json에 있는 패키지를 node_modules폴더에 설치</span></span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Jun's</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Jun's의</span> <span class="string">개발일지</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">TaeJune</span> <span class="string">Joung</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Seoul</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://TaeJuneJoung.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><h3 id="Git-repositories"><a href="#Git-repositories" class="headerlink" title="Git repositories"></a>Git repositories</h3><blockquote><p><code>계정명.github.io</code> 공개용 저장소 생성</p></blockquote><h3 id="Change-Theme"><a href="#Change-Theme" class="headerlink" title="Change Theme"></a>Change Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line"><span class="comment">#어둡고 깔끔한게 마음에 들어서 해당 theme를 사용함</span></span><br><span class="line"><span class="comment">#theme마다 기본적으로 제공되는 부분들이 있으니 주의 선택</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/probberechts/hexo-theme-cactus.git</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_config_yml line73</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: hexo-theme-cactus</span><br></pre></td></tr></table></figure><blockquote><p><strong>필요 패키지 다운로드 및 서버실행</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-theme-cactus</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line"><span class="comment">#서버실행</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="github에-배포하기"><a href="#github에-배포하기" class="headerlink" title="github에 배포하기"></a>github에 배포하기</h3><blockquote><p><strong>git 배포를 위한 패키지 설치</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote></blockquote><p><strong>배포(deployment)주소 수정</strong></p><blockquote></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/TaeJuneJoung/TaeJuneJoung.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>deployment</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="이미지-복사"><a href="#이미지-복사" class="headerlink" title="이미지 복사"></a>이미지 복사</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source/</span><br><span class="line">images/</span><br></pre></td></tr></table></figure><p><code>images</code>폴더에 넣어서 경로 설정으로 잡아주면 됨.</p><blockquote><p><strong>example)</strong></p><p>​    url: /images/파일명</p></blockquote><h3 id="페이지-및-파일-생성"><a href="#페이지-및-파일-생성" class="headerlink" title="페이지 및 파일 생성"></a>페이지 및 파일 생성</h3><blockquote><p><strong>페이지 생성</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 페이지명</span><br></pre></td></tr></table></figure><blockquote><p><strong>파일 생성</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 파일명</span><br></pre></td></tr></table></figure><h3 id="이미지-작성법"><a href="#이미지-작성법" class="headerlink" title="이미지 작성법"></a>이미지 작성법</h3><blockquote><p style="color:#007bff;font-weight:bold">이미지 작성</p><p><strong>전역 Asset</strong></p><p><code>source/images</code>에 파일들을 넣고 <code>![](/images/image.jpg)</code>이와 같이 하면 해결</p><p><strong>Post Asset</strong></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">_config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>설정에서 post_asset_folder를 <code>true</code>로 한 후,</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img slug [title] %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>위와 같이 불러오면 된다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example)</span><br><span class="line">&#123;% asset_img slug testImg.PNG %&#125;</span><br></pre></td></tr></table></figure><h3 id="카테고리-및-태그-사용법"><a href="#카테고리-및-태그-사용법" class="headerlink" title="카테고리 및 태그 사용법"></a>카테고리 및 태그 사용법</h3><blockquote><p><strong>categories/index.md</strong></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">type: "categories"</span><br><span class="line">date: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p><strong>tags/index.md</strong></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">type: 'tags'</span><br><span class="line">date: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p>작성파일 예시)</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: oauth2</span><br><span class="line">date: 2019-06-23 22:16:35</span><br><span class="line">tags: ['oauth2', 'django']</span><br><span class="line">categories: ['django', 'oauth2']</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="해나가야할것들"><a href="#해나가야할것들" class="headerlink" title="해나가야할것들"></a>해나가야할것들</h3><ul><li><p>SEO</p><blockquote><p><strong>참고사이트</strong></p><p><a href="https://iseongho.github.io/posts/hexo-seo/" target="_blank" rel="noopener">https://iseongho.github.io/posts/hexo-seo/</a></p><p><a href="https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/" target="_blank" rel="noopener">https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/</a></p></blockquote></li><li><p>검색기능</p><blockquote><p><a href="https://elfinlas.github.io/2018/06/07/hexo-usea-lgolia/" target="_blank" rel="noopener">https://elfinlas.github.io/2018/06/07/hexo-usea-lgolia/</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django] OAuth2</title>
      <link href="/2019/06/23/oauth2/"/>
      <url>/2019/06/23/oauth2/</url>
      
        <content type="html"><![CDATA[<h2 id="Install-amp-Settings"><a href="#Install-amp-Settings" class="headerlink" title="Install &amp; Settings"></a>Install &amp; Settings</h2><p><strong>Install django-allauth</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-allauth</span><br></pre></td></tr></table></figure><p><strong>settings.py</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Specify the context processors as follows:</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="comment"># Already defined Django-related contexts here</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># `allauth` needs this from django</span></span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># Needed to login by username in Django admin, regardless of `allauth`</span></span><br><span class="line">    <span class="string">'django.contrib.auth.backends.ModelBackend'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># `allauth` specific authentication methods, such as login by e-mail</span></span><br><span class="line">    <span class="string">'allauth.account.auth_backends.AuthenticationBackend'</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># The following apps are required:</span></span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sites'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'allauth'</span>,</span><br><span class="line">    <span class="string">'allauth.account'</span>,</span><br><span class="line">    <span class="string">'allauth.socialaccount'</span>,</span><br><span class="line">    <span class="comment"># ... include the providers you want to enable:</span></span><br><span class="line">    <span class="string">'allauth.socialaccount.providers.kakao'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SITE_ID = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">LOGIN_REDIRECT_URL = <span class="string">"accounts:main"</span></span><br></pre></td></tr></table></figure><p> 필자는 django 2.2.1버전으로 진행하였고,</p><p> <code>AUTHENTICATION_BACKENDS</code>부터 추가하면 되었다.</p><p> <strong>urls.py</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'accounts/'</span>, include(<span class="string">'accounts.urls'</span>)),</span><br><span class="line">    <span class="comment">#allauth</span></span><br><span class="line">    path(<span class="string">'accounts/'</span>, include(<span class="string">'allauth.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p> <strong>accounts/views.py</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.forms <span class="keyword">import</span> AuthenticationForm</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> login <span class="keyword">as</span> auth_login, logout <span class="keyword">as</span> auth_logout</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'accounts/main.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        auth_id = request.POST.get(<span class="string">'auth_id'</span>)</span><br><span class="line">        auth_pwd = request.POST.get(<span class="string">'auth_pwd'</span>)</span><br><span class="line">        user = authenticate(request, username=auth_id, password=auth_pwd)</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            auth_login(request, user)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'accounts:main'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = AuthenticationForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'accounts/login.html'</span>, &#123;<span class="string">'form'</span>:form&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    auth_logout(request)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'accounts:main'</span>)</span><br></pre></td></tr></table></figure><p> <strong>main.html</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load socialaccount %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AllAuth<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'accounts:main' %&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% if user.is_authenticated %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'accounts:logout' %&#125;"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'accounts:login' %&#125;"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% if user.is_authenticated %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;request.user&#125;&#125;님, 로그인하셨습니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>학습 목적이기에 꾸며지지 않았습니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>login.html</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load socialaccount %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"auth_id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"auth_pwd"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% provider_login_url 'kakao' method='oauth2' %&#125;"</span>&gt;</span>Kakao_login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Kakao"><a href="#Kakao" class="headerlink" title="Kakao"></a>Kakao</h2><p> Kakao Developers</p><p> <a href="https://developers.kakao.com/apps" target="_blank" rel="noopener">https://developers.kakao.com/apps</a></p><p> CallBack URL :</p><p> <a href="http://localhost:8000/accounts/kakao/login/callback/" target="_blank" rel="noopener">http://localhost:8000/accounts/kakao/login/callback/</a></p><h2 id="Image-부가설명"><a href="#Image-부가설명" class="headerlink" title="Image 부가설명"></a>Image 부가설명</h2><p>카카오 개발자 사이트에 들어가서 사용할 <code>내 애플리케이션</code>을 먼저 생성</p><img src="/2019/06/23/oauth2/kakao_allauth_1.PNG" class="slug"><p>생성을 하고나면 위와 같이 키를 준다. 필자가 사용하고자 하는 키는 <code>REST API키</code>이다.</p><img src="/2019/06/23/oauth2/kakao_allauth_2.PNG" class="slug"><p>사용자 관리를 들어가서 <code>사용자 관리 ON</code>을 해주고 받을 정보들을 설정해준다. 검수작업이 필요할 때도 있기에 이로 인해 사용가능 시간이 걸리는 것 같기도 하다…</p><img src="/2019/06/23/oauth2/kakao_allauth_2_2.PNG" class="slug"><p>가장 중요한 곳이다. 일반으로 들어가서 애플리케이션을 사용하고자 하는 곳을 설정. 필자는 웹으로 사용하기에 웹을 설정하고 local에서 진행하였기에 local주소를 설정하였다.<br><code>Redirect Path</code>는 정해져있다고 보면 된다.</p><img src="/2019/06/23/oauth2/kakao_allauth_3.PNG" class="slug"><p><code>고급설정</code>에서 Secret키를 가져온다. 위에 가져왔던 REST_API키와 Secret키로 아래 설정을 해주면 된다.</p><img src="/2019/06/23/oauth2/kakao_allauth_4.PNG" class="slug"><br><img src="/2019/06/23/oauth2/kakao_allauth_5.PNG" class="slug"><p>설정은 admin에 들어가서 해주면 되고, 아래는 설정이 끝난 다음 테스팅한 과정이다.</p><img src="/2019/06/23/oauth2/kakao_allauth_6.PNG" class="slug"><br><img src="/2019/06/23/oauth2/kakao_allauth_7.PNG" class="slug"><p>kakao_login을 누르면 아래와 같이 kakao 로그인 페이지가 나온다.</p><img src="/2019/06/23/oauth2/kakao_allauth_8.PNG" class="slug"><p>접속을 하면 개발자가 redirect시킨 곳으로 들어가게 된다.</p><img src="/2019/06/23/oauth2/kakao_allauth_9.PNG" class="slug"><p>이로 인하여 kakao_oauth2_REST KEY방식을 완성하였다.</p><h2 id="SourceCode"><a href="#SourceCode" class="headerlink" title="SourceCode"></a>SourceCode</h2><p><a href="https://github.com/TaeJuneJoung/Python/tree/master/library/oauth_project" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/Python/tree/master/library/oauth_project</a></p><h3 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h3><p><a href="https://django-allauth.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://django-allauth.readthedocs.io/en/latest/</a></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
