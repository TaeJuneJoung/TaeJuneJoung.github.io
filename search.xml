<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Deploy] EndMovie Deploy - Linux</title>
      <link href="/2019/12/12/deploy-project-endgame-linux/"/>
      <url>/2019/12/12/deploy-project-endgame-linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>참고] 배포과정은 버전에 따라 환경에 따라 다를 수 있습니다. 해당 방법은 어디까지나 삽질을 해보고 이런 방도로도 실행이 가능하다라는 정리문서이지 답이 아님을 밝힙니다.</p></blockquote><h2 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h2><p>프로젝트를 먼저 Linux(Mint)환경에서 실행해보고 Docker-Compose를 통해 AWS EC2에 Deploy해보자.</p><h2 id="환경"><a href="#환경" class="headerlink" title="환경"></a>환경</h2><ul><li>Linux Mint(ubuntu 16.04)</li></ul><p>아래의 버전들은 프로젝트 버전에 맞추는게 좋다. 필자는 배포에만 신경썼기에 버전이 프로젝트와는 다르게 왔다갔다하는 부분이 있다. 설치할 때 버전을 설정하면 프로젝트 버전과 같게 설치할 수 있다.</p><ul><li>Python 3.6.8</li><li>Node 12.x.x</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="Deploy-DB"><a href="#Deploy-DB" class="headerlink" title="Deploy DB"></a>Deploy DB</h2><p>DB는 Docker Image를 통해 설치해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com/ | sudo sh</span><br></pre></td></tr></table></figure><p>Docker를 먼저 다운로드 받는다. 이렇게만 할 경우 docker를 사용하기 전에 <code>sudo</code>를 붙여줘야 하는 귀차니즘이 발생하긴 한다.</p><h3 id="sudo-없이-사용하기"><a href="#sudo-없이-사용하기" class="headerlink" title="sudo 없이 사용하기"></a>sudo 없이 사용하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span> <span class="comment"># 현재 접속중인 사용자에게 권한주기</span></span><br></pre></td></tr></table></figure><p>먼저, sudo를 사용한 버전으로 소스를 작성하도록 하겠다.</p><h3 id="Install-PostgreSQL"><a href="#Install-PostgreSQL" class="headerlink" title="Install PostgreSQL"></a>Install PostgreSQL</h3><p>기본적인 기능만 사용한다면 <code>alpine</code>을 사용하면 좋다. 최소한의 기능으로 경량화된 버전이다. 단, 많은 기능을 사용한다면 경량화 버전에서 설치를 계속해줘야하기에 불편한 점도 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres</span><br><span class="line">docker run -d -p 5432:5432 --name pgsql -e POSTGRES_PASSWORD=비밀번호 postgres</span><br></pre></td></tr></table></figure><p>Docker 볼륨을 생성하여 데이터를 유지해야할 경우는 volume 옵션이 필요하다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume create pgdata</span><br><span class="line">docker run -d -p 5432:5432 --name pgsql -it --rm -v pgdata:/var/lib/postgresql/data postgres</span><br></pre></td></tr></table></figure><h4 id="PostgreSQL-Create-Database"><a href="#PostgreSQL-Create-Database" class="headerlink" title="PostgreSQL Create Database"></a>PostgreSQL Create Database</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it pgsql bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#PostgreSQL</span></span><br><span class="line">psql -U postgres</span><br><span class="line">CREATE DATABASE 데이터베이스이름;</span><br></pre></td></tr></table></figure><h2 id="Django-Settings"><a href="#Django-Settings" class="headerlink" title="Django Settings"></a>Django Settings</h2><p>먼저, Docker를 사용하지 않고 세팅해보자</p><p>파이썬의 버전이 너무 거슬린다. 이전의 방법도 있지만 전체적 설정에서 바꿔보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure><p>만약 위의 명령어를 작성하였는데 <code>update-alternatives: error: no alternatives for python</code>가 Error가 발생하였다면 <strong>alternative</strong>가 설정된 것이 없는 것이니 설정을 해주자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> python <span class="comment">#파이썬의 경로</span></span><br><span class="line">ls /usr/bin/ | grep python <span class="comment">#파이썬 리스트(경로는 기본이라면...)</span></span><br></pre></td></tr></table></figure><h3 id="alternative-설정"><a href="#alternative-설정" class="headerlink" title="alternative 설정"></a>alternative 설정</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 2</span><br></pre></td></tr></table></figure><p>이후에 <code>sudo update-alternatives --config python</code>를 다시 입력하면 버전 선택을 할 수 있다.</p><p>이렇게 설정이 다 끝나고 나서 프로젝트에 있는 라이브러리들을 다운받으려고 했더니 pip가 없었다.</p><p>python3를 기본적으로 사용할 것이기에 pip3만 다운로드 받는다. 이렇게 설치하여도 pip 명령어로 실행할 수 있었다. 아래의 코드가 문제가 생길시에는 sudo를 붙여서 진행하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>다 끝났다면 라이브러리를 설치하고 진행하면 된다.</p><h2 id="Vue-Settings"><a href="#Vue-Settings" class="headerlink" title="Vue Settings"></a>Vue Settings</h2><p>yarn을 apt-get에서 바로 다운받거나 다른 방도가 있긴 하지만, 다른 파일을 다운 받아달라는 오류가 발생하여 npm에서 설치하는 방식으로 진행함</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install npm</span><br><span class="line">npm install -g yarn</span><br><span class="line"></span><br><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure><p>nodejs를 다운받았는데 버전이 8이다. 프로젝트 설정된 버전보다 낮아 진행할 수 없는 문제가 발생했다. nodejs의 버전을 올려주자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 강제 캐시 삭제</span></span><br><span class="line">sudo npm cache clean --force</span><br><span class="line"><span class="comment"># n모듈 설치</span></span><br><span class="line">sudo npm install -g n</span><br><span class="line"><span class="comment"># n모듈 이용한 Node.js 설치</span></span><br><span class="line">sudo n stable</span><br><span class="line"><span class="comment"># npm 설치</span></span><br><span class="line">sudo npm install -g npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># vue-cli설치</span></span><br><span class="line">yarn add vue-cli</span><br><span class="line"></span><br><span class="line">yarn install</span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>그러면 이제 본격적으로 docker-compose를 이용해서 Linux환경에서 실행해보자.</p><p>docker로 하나하나 돌리는 방법도 있겠지만 옵션을 하나하나 주면서 확인해보고 하기에 너무 불편하다. 그러기에 docker-compose를 사용하기로 한다.</p><h3 id="Install-docker-compose"><a href="#Install-docker-compose" class="headerlink" title="Install docker-compose"></a>Install docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.0/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="settings-docker-compose"><a href="#settings-docker-compose" class="headerlink" title="settings docker-compose"></a>settings docker-compose</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.5'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5432</span><span class="string">:5432</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">end-network</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./db:/var/lib/postgresql/data</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_DB=end_movie</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_UESR=postgres</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_PASSWORD=0525</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">POSTGRES_INITDB_ARGS=--encoding=UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  front:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">front</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">    working_dir:</span> <span class="string">/usr/src/app</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./front:/usr/src/app</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c "yarn install &amp;&amp; yarn serve"</span></span><br><span class="line"><span class="string"></span><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LC_ALL=C.UTF-8</span></span><br><span class="line"><span class="attr">    tty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">end-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  back:</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">      dockerfile:</span> <span class="string">./back/Dockerfile</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">8000</span><span class="string">:8000</span></span><br><span class="line"><span class="attr">    working_dir:</span> <span class="string">/usr/src/app</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./back:/usr/src/app</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c "python manage.py makemigrations &amp;&amp; python manage.py migrate &amp;&amp; python manage.py runserver 0.0.0.0:8000"</span></span><br><span class="line"><span class="string"></span><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">LC_ALL=C.UTF-8</span></span><br><span class="line"><span class="attr">    tty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">end-network</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  end-network:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">end-network</span></span><br></pre></td></tr></table></figure><p>docker에서 django image는 지원하지 않는다는 내용을 확인하였다. 그래서 Python images를 받아서 진행할까 하다가 Dockerfile로 먼저 진행하였다.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/app</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./back/requirements.txt /usr/src/app/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><h2 id="느낀점"><a href="#느낀점" class="headerlink" title="느낀점"></a>느낀점</h2><p>DevOps의 길은 알면 쉽고 모르면 너무나도 힘들다…</p><p>Deploy로만 2일이 걸릴 줄이야…</p><p>더붙여야할 기능이라면 더 있지만… CI/CD를 다뤄보면서 진행하자…</p><p>이제 본격적인 AWS Deploy로 넘어가도록 하겠다.</p><h2 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h2><p> <a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html" target="_blank" rel="noopener">https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html</a> </p><p> <a href="https://judo0179.tistory.com/48" target="_blank" rel="noopener">https://judo0179.tistory.com/48</a> </p><p> <a href="https://seongkyun.github.io/others/2019/05/09/ubuntu_python/" target="_blank" rel="noopener">https://seongkyun.github.io/others/2019/05/09/ubuntu_python/</a> </p><p> <a href="https://d2fault.github.io/2018/04/30/20180430-install-and-upgrade-nodejs-or-npm/" target="_blank" rel="noopener">https://d2fault.github.io/2018/04/30/20180430-install-and-upgrade-nodejs-or-npm/</a> </p><p> <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a> </p><p> <a href="https://www.44bits.io/ko/post/almost-perfect-development-environment-with-docker-and-docker-compose" target="_blank" rel="noopener">https://www.44bits.io/ko/post/almost-perfect-development-environment-with-docker-and-docker-compose</a> </p><p> <a href="https://github.com/raccoonyy/django-sample" target="_blank" rel="noopener">https://github.com/raccoonyy/django-sample</a> </p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Comprehension</title>
      <link href="/2019/12/11/python-middle-comprehension/"/>
      <url>/2019/12/11/python-middle-comprehension/</url>
      
        <content type="html"><![CDATA[<p>:  리스트 컴프리헨션은 간편하게 리스트를 만드는 방법 </p><ul><li>List Comprehension</li><li>Tuple Comprehension</li><li>Set Comprehension</li><li>Dictonary Comprehension</li></ul><p> 리스트에 0~9의 값을 넣는 로직 만들어보기</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_logic = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    list_logic.append(i)</span><br><span class="line">    </span><br><span class="line">print(list_logic)</span><br></pre></td></tr></table></figure><h2 id="List-Comprehension-리스트-컴프리헨션"><a href="#List-Comprehension-리스트-컴프리헨션" class="headerlink" title="List Comprehension, 리스트 컴프리헨션"></a>List Comprehension, 리스트 컴프리헨션</h2><p>아래와 같이 리스트 컴프리헨션을 이용하여 위의 내용을 쉽게 한 줄로 만들 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_comprehension = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(list_comprehension)</span><br></pre></td></tr></table></figure><h2 id="Tuple-Comprehension-튜플-컴프리헨션"><a href="#Tuple-Comprehension-튜플-컴프리헨션" class="headerlink" title="Tuple Comprehension, 튜플 컴프리헨션"></a>Tuple Comprehension, 튜플 컴프리헨션</h2><p>튜플 컴프리헨션은 주의할 점이 있다. </p><p><code>(i for i in range(10))</code>으로 진행시, <strong>generator객체</strong>가 나온다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tuple_comprehension = tuple(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line">print(tuple_comprehension) <span class="comment">#(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br><span class="line">print(type(tuple_comprehension)) <span class="comment">#&lt;class 'tuple'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Set-Comprehension-집합-컴프리헨션"><a href="#Set-Comprehension-집합-컴프리헨션" class="headerlink" title="Set Comprehension, 집합 컴프리헨션"></a>Set Comprehension, 집합 컴프리헨션</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set_comprehension = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line">print(set_comprehension) <span class="comment">#&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span></span><br><span class="line">print(type(set_comprehension)) <span class="comment">#&lt;class 'set'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Dictonary-Comprehension-딕셔너리-컴프리헨션"><a href="#Dictonary-Comprehension-딕셔너리-컴프리헨션" class="headerlink" title="Dictonary Comprehension, 딕셔너리 컴프리헨션"></a>Dictonary Comprehension, 딕셔너리 컴프리헨션</h2><p>딕셔너리(HashMap형태)는 <code>key:value</code> 형태로 만들어줘야하기에 아래와 같이 코드를 작성하면 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_comprehension = &#123;i:i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)&#125; <span class="comment">#key : value</span></span><br><span class="line">print(dict_comprehension) <span class="comment">#&#123;0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9&#125;</span></span><br><span class="line">print(type(dict_comprehension)) <span class="comment">#&lt;class 'dict'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="심화-Comprehension"><a href="#심화-Comprehension" class="headerlink" title="심화 Comprehension"></a>심화 Comprehension</h2><p>그러면 이제 For문 하나는 해결했으니 Comprehension형태에서 IF문을 사용하며 이중 이상의 For문을 사용하는 방법에 대해서 알아보자.</p><p>방식에 대해서는 위에서 언급되었으니 List형태의 Comprehension만 다루기로 한다.</p><h3 id="For-If"><a href="#For-If" class="headerlink" title="For + If"></a>For + If</h3><h4 id="1-20까지의-숫자에서-홀수만-뽑아보자"><a href="#1-20까지의-숫자에서-홀수만-뽑아보자" class="headerlink" title="1~20까지의 숫자에서  홀수만 뽑아보자"></a>1~20까지의 숫자에서  홀수만 뽑아보자</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">odd_numbers = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">if</span> i%<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h4 id="1-50까지의-숫자에서-3의-배수만-뽑아보자"><a href="#1-50까지의-숫자에서-3의-배수만-뽑아보자" class="headerlink" title="1~50까지의 숫자에서 3의 배수만 뽑아보자"></a>1~50까지의 숫자에서 3의 배수만 뽑아보자</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiple_of_three_numbers = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">50</span>) <span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="1-50까지의-숫자에서-4의-배수에서-1이나-2인-값만-뽑아보자"><a href="#1-50까지의-숫자에서-4의-배수에서-1이나-2인-값만-뽑아보자" class="headerlink" title="1~50까지의 숫자에서 4의 배수에서 +1이나 +2인 값만 뽑아보자"></a>1~50까지의 숫자에서 4의 배수에서 +1이나 +2인 값만 뽑아보자</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">answer = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">50</span>) <span class="keyword">if</span> i%<span class="number">4</span> == <span class="number">1</span> <span class="keyword">or</span> i%<span class="number">4</span> == <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="2중For문"><a href="#2중For문" class="headerlink" title="2중For문"></a>2중For문</h3><h4 id="구구단을-만들어보자-시작은-2단부터-끝은-9단"><a href="#구구단을-만들어보자-시작은-2단부터-끝은-9단" class="headerlink" title="구구단을 만들어보자(시작은 2단부터 끝은 9단)"></a>구구단을 만들어보자(시작은 2단부터 끝은 9단)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiplication_table = [<span class="string">f'<span class="subst">&#123;i&#125;</span>x<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br></pre></td></tr></table></figure><h3 id="2중For문-If문"><a href="#2중For문-If문" class="headerlink" title="2중For문 + If문"></a>2중For문 + If문</h3><h4 id="구구단에서-i나-j가-3의-배수이거나-곱의-결과가-3의-배수인-것을-다-제외"><a href="#구구단에서-i나-j가-3의-배수이거나-곱의-결과가-3의-배수인-것을-다-제외" class="headerlink" title="구구단에서 i나 j가 3의 배수이거나 곱의 결과가 3의 배수인 것을 다 제외"></a>구구단에서 i나 j가 3의 배수이거나 곱의 결과가 3의 배수인 것을 다 제외</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multiplication_if_table = [<span class="string">f'<span class="subst">&#123;i&#125;</span>x<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">10</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>) <span class="keyword">if</span> i%<span class="number">3</span> <span class="keyword">and</span> j%<span class="number">3</span> <span class="keyword">and</span> i*j%<span class="number">3</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Comprehension </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] 얕은복사 | 깊은복사</title>
      <link href="/2019/12/10/python-middle-array-copy/"/>
      <url>/2019/12/10/python-middle-array-copy/</url>
      
        <content type="html"><![CDATA[<h2 id="Shallow-Copy-얕은-복사"><a href="#Shallow-Copy-얕은-복사" class="headerlink" title="Shallow Copy, 얕은 복사"></a>Shallow Copy, 얕은 복사</h2><h3 id="변수-할당-얕은-복사"><a href="#변수-할당-얕은-복사" class="headerlink" title="변수 할당 얕은 복사"></a>변수 할당 얕은 복사</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">list_data = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">list_copy = list_data</span><br><span class="line"></span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 단일 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">0</span>] = <span class="string">'5'</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2중 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt; 2327860600520</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> 변수를 그대로 할당하여 사용할 경우에는,<br>같은 <code>주소</code>를 가리켜 하나의 값이 변하였을 때 다른 변수의 값도 변하게 된다.<br>메모리 주소지에 있는 값이 변하여서 해당 주소지를 쓰는 변수는 동일하게 변하는 것이다. </p><h3 id="슬라이싱을-이용한-얕은-복사"><a href="#슬라이싱을-이용한-얕은-복사" class="headerlink" title="슬라이싱을 이용한 얕은 복사"></a>슬라이싱을 이용한 얕은 복사</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'-------`:사용`------'</span>)</span><br><span class="line">list_data = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list_copy = list_data[:]</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 단일 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">0</span>] = <span class="string">'5'</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2중 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; -------`:사용`------</span><br><span class="line">&gt; 2327860646088</span><br><span class="line">&gt; 2327860440200</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860646088</span><br><span class="line">&gt; 2327860440200</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860646088</span><br><span class="line">&gt; 2327860440200</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> 리스트 슬라이싱을 통해서 값만 가져오면 해결할 수 있다고 생각할 수 있으나,<br>내부에 리스트가 있거나 2중 리스트 이상의 형태일 경우에는 동일한 문제가 발생한다. </p><h2 id="Deep-Copy-깊은-복사"><a href="#Deep-Copy-깊은-복사" class="headerlink" title="Deep Copy, 깊은 복사"></a>Deep Copy, 깊은 복사</h2><h3 id="Copy-Deepcopy를-이용한-깊은-복사"><a href="#Copy-Deepcopy를-이용한-깊은-복사" class="headerlink" title="Copy.Deepcopy를 이용한 깊은 복사"></a>Copy.Deepcopy를 이용한 깊은 복사</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list_data = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list_copy = copy.deepcopy(list_data)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 단일 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">0</span>] = <span class="string">'5'</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2중 리스트 값 변경</span></span><br><span class="line">list_data[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(list_data)</span><br><span class="line">print(list_copy)</span><br><span class="line">print(id(list_data))</span><br><span class="line">print(id(list_copy))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2327860646664</span><br><span class="line">&gt; 2327860646472</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860646664</span><br><span class="line">&gt; 2327860646472</span><br><span class="line">&gt; [&apos;5&apos;, &apos;2&apos;, &apos;3&apos;, [5, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, [1, 2, 3], 1, 2, 3]</span><br><span class="line">&gt; 2327860646664</span><br><span class="line">&gt; 2327860646472</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>주소값도 다르며, 값들이 영향을 받지 않음을 알 수 있다.<br>이중리스트도 영향을 받지 않은 것을 보니 <code>깊은 복사</code>가 이뤄졌다. </p><h2 id="참고사항-Immutable의-복사"><a href="#참고사항-Immutable의-복사" class="headerlink" title="[참고사항]Immutable의 복사"></a>[참고사항]Immutable의 복사</h2><p> Immutable 객체는 깊은 복사를 하여도 얕은 복사를 한 결과가 도출된다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">immutable_tuple = (<span class="number">1</span>,<span class="number">2</span>,(<span class="number">3</span>,<span class="number">4</span>), <span class="string">'5'</span>)</span><br><span class="line">copy_tuple = immutable_tuple</span><br><span class="line"></span><br><span class="line">print(id(immutable_tuple))</span><br><span class="line">print(id(copy_tuple))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2327861436808</span><br><span class="line">&gt; 2327861436808</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">immutable_tuple = (<span class="number">1</span>,<span class="number">2</span>,(<span class="number">3</span>,<span class="number">4</span>), <span class="string">'5'</span>)</span><br><span class="line">copy_tuple = copy.deepcopy(immutable_tuple)</span><br><span class="line"></span><br><span class="line">print(id(immutable_tuple))</span><br><span class="line">print(id(copy_tuple))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 2327861191688</span><br><span class="line">&gt; 2327861191688</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Shallow Copy </tag>
            
            <tag> Deep Copy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Mutable vs Immutable</title>
      <link href="/2019/12/10/python-middle-mutable-immutable/"/>
      <url>/2019/12/10/python-middle-mutable-immutable/</url>
      
        <content type="html"><![CDATA[<h2 id="Mutable-가변-객체"><a href="#Mutable-가변-객체" class="headerlink" title="Mutable, 가변 객체"></a>Mutable, 가변 객체</h2><ul><li>List, 리스트</li><li>Dictionary, 딕셔너리</li><li>Set, 집합</li></ul><h2 id="Immutable-불변-객체"><a href="#Immutable-불변-객체" class="headerlink" title="Immutable 불변 객체"></a>Immutable 불변 객체</h2><ul><li><p>String, 문자열</p></li><li><p>Number, 숫자형</p><p>Integer, Float, Complex</p></li><li><p>Bool, 논리형</p></li><li><p>Tuple, 튜플</p></li><li><p>FrozenSet, 불변집합</p><p>: 파이썬의 변경 불가인 집합 객체</p></li></ul><h2 id="List와-Tuple-비교"><a href="#List와-Tuple-비교" class="headerlink" title="List와 Tuple 비교"></a>List와 Tuple 비교</h2><p>Mutable과 Immutable의 대표적인 List와 Tuple을 가지고 비교해보자.</p><h3 id="is와"><a href="#is와" class="headerlink" title="is와 =="></a>is와 ==</h3><ul><li><p>is: 주소값 비교</p><p><code>id()</code>: 객체의 주소값 반환</p></li><li><p>==: 값 비교</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">r1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">r2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">print(r1 <span class="keyword">is</span> r2) <span class="comment">#컴파일시에는 True로 나옴(Idel과 Jupyter에서는 False)</span></span><br><span class="line">print(r1 == r2)</span><br><span class="line"></span><br><span class="line">print(id(r1), id(r2))</span><br><span class="line"></span><br><span class="line">r1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">r2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">print(r1 <span class="keyword">is</span> r2)</span><br><span class="line">print(r1 == r2)</span><br><span class="line"></span><br><span class="line">print(id(r1), id(r2))</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;False</span><br><span class="line">&gt;True</span><br><span class="line">&gt;1954010284680 1954010286768</span><br><span class="line">&gt;False</span><br><span class="line">&gt;True</span><br><span class="line">&gt;1954009597832 1954009597896</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>위의 내용으로 설명을 하고자 하였는데 어떤 Tool을 쓰느냐에 따라 값이 달라지는 부분이 있고,<br>다른 Type에 대해서는 어려운 부분이 있으니 다른 방도로 진행 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(v1, v2)</span>:</span></span><br><span class="line">    v1 += v2</span><br><span class="line"></span><br><span class="line">v1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">v2 = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br><span class="line">print(v1)</span><br><span class="line"></span><br><span class="line">v1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">v2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br><span class="line">print(v1)</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; (1, 2, 3)</span><br><span class="line">&gt; [1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> <code>튜플</code>일 경우는 값이 추가되지 않았다는 점을 확인할 수 있다.<br><code>리스트</code>인 경우는 값이 변하였다.<br><strong>왜 이러한 차이가 발생할까?</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(v1, v2)</span>:</span></span><br><span class="line">    v1 += v2</span><br><span class="line">    print(id(v1))</span><br><span class="line"></span><br><span class="line">v1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = (<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br><span class="line"></span><br><span class="line">v1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1954010286840</span><br><span class="line">&gt; 1954009922824</span><br><span class="line">&gt; 1954009597064</span><br><span class="line">&gt; 1954009597064</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>함수 안에서의 주소값을 찍어서 같은지 다른지를 확인하면 된다.<br><code>튜플</code>의 경우는 다르지만, <code>리스트</code>의 경우에는 같다.<br><code>튜플</code>에서는 새로운 객체가 생성되어 값을 할당받는다. 즉, Immutable객체는 새로운 객체로 선언된다 .</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">'Python'</span></span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = <span class="string">'Test'</span></span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br><span class="line"></span><br><span class="line">v1 = <span class="number">3</span></span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br></pre></td></tr></table></figure><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1953967907592</span><br><span class="line">&gt; 1954010299824</span><br><span class="line">&gt; 140715235971968</span><br><span class="line">&gt; 140715235972128</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> <code>str</code>타입과 <code>Number</code>타입도 Immutable하기에 같은 결과가 나옴을 확인할 수 있다.<br>여기서 잠시 참고하고 넘어갈 부분도 있다. Number는 Immutable하지만 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">0</span></span><br><span class="line">print(id(v1))</span><br><span class="line">v2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">add(v1, v2)</span><br></pre></td></tr></table></figure><p>의 결과는 어떻게 나올까?</p><blockquote><p>결과값</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 140715235971872</span><br><span class="line">&gt; 140715235971872</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p> 같음을 볼 수 있다. ‘Immutable할 때는 주소값이 다르다고 했는데 왜 같지?’<br>모순이 발생함을 알 수 있는데, 이는 파이썬 정책 때문이다. </p><p><a href="https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong" target="_blank" rel="noopener">https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong</a></p><p>내용을 확인해보면 파이썬은 <strong>-5~256</strong>값은 저장해두고 사용함을 알 수 있다.</p><p>Mutable과 Immutable의 개념은 중요하다.</p><p>이후에 다룰 내용들과 다음에 나올 <strong>리스트(배열)의 얕은/깊은 복사에 기초가 되기 때문이다.</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Mutable </tag>
            
            <tag> Immutable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] 레퍼런스 카운트와 가비지 컬렉션</title>
      <link href="/2019/12/10/python-middle-gc/"/>
      <url>/2019/12/10/python-middle-gc/</url>
      
        <content type="html"><![CDATA[<p>파이썬 자동으로 메모리 소멸</p><p>그러면 언제 소멸 되는가?</p><blockquote><p><strong>레퍼런스 카운트</strong></p><p>내가 선언한 메모리가 언제 소멸하는지</p></blockquote><p>파이썬에서는 모든 것이 객체이다.</p><h2 id="레퍼런스-카운트"><a href="#레퍼런스-카운트" class="headerlink" title="레퍼런스 카운트"></a>레퍼런스 카운트</h2><p>: 객체를 참조하는 변수의 수</p><h2 id="가비지-컬렉션"><a href="#가비지-컬렉션" class="headerlink" title="가비지 컬렉션"></a>가비지 컬렉션</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="comment"># 변수명 data가 [1,2,3,4,5] 리스트를 참조(레퍼런스)한다.</span></span><br></pre></td></tr></table></figure><p><strong>생성된 [1,2,3,4,5]는 언제 소멸하는가?</strong></p><blockquote><p>객체를 아무도 참조하지 않는 상황에 소멸한다.</p><p>현재 data의 rc(reference counting)가 1이다.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">data = <span class="string">'test'</span> <span class="comment"># 변수명 data가 'test' 문자열을 참조(레퍼런스)한다.</span></span><br></pre></td></tr></table></figure><p>위와 같은 경우는 data가 [1,2,3,4,5] 리스트를 참조하였다가 ‘test’ 문자열을 참조한다. </p><p>rc를 보게 되면, [1,2,3,4,5]의 rc는 1이었다가 data가 test를 받는 순간 0이 된다.</p><p>이렇게 됐을 때, [1,2,3,4,5]는 아무것도 참조받지 않으며, 소멸 대상이 된다.</p><p>(단, 소멸 대상이 되었다고 바로 소멸되는 것은 아니다.)</p><p><strong>그렇다면 rc가 1을 유지할 때는 메모리가 지속적으로 유지되는가?</strong></p><p>고민하는게 이상할 정도로 답은 당연하다. 프로그램이 끝날 때 소멸될 것이다.</p><img src="/2019/12/10/python-middle-gc/python_execution_structure.jpg" class="slug"><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p><a href="https://winterj.me/python-gc/#2-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%98-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D" target="_blank" rel="noopener">https://winterj.me/python-gc/#2-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%98-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Gabage Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자료구조] Queue</title>
      <link href="/2019/12/09/structure_queue/"/>
      <url>/2019/12/09/structure_queue/</url>
      
        <content type="html"><![CDATA[<h2 id="구조"><a href="#구조" class="headerlink" title="구조"></a>구조</h2><p><strong>FIFO,</strong> 가장 먼저 넣은 데이터를 가장 먼저 꺼낼 수 있는 구조</p><h2 id="용어"><a href="#용어" class="headerlink" title="용어"></a>용어</h2><p><strong>Enqueue</strong>: 큐에 데이터를 넣는 기능</p><p><strong>Dequeue</strong>: 큐에서 데이터를 꺼내는 기능</p><h2 id="파이썬-Queue-라이브러리-활용해서-큐-자료-구조-사용하기"><a href="#파이썬-Queue-라이브러리-활용해서-큐-자료-구조-사용하기" class="headerlink" title="파이썬 Queue 라이브러리 활용해서 큐 자료 구조 사용하기"></a>파이썬 Queue 라이브러리 활용해서 큐 자료 구조 사용하기</h2><ul><li>queue 라이브러리에는 다양한 큐 구조로 <strong>Queue(), LifoQueue(), PriorityQueue</strong>… 등 제공</li></ul><ol><li><p>Queue(): 가장 일반적인 큐 자료 구조</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">data_queue = queue.Queue()</span><br><span class="line">data_queue.put(<span class="string">'coding'</span>)</span><br><span class="line">data_queue.put(<span class="number">2</span>)</span><br><span class="line">data_queue.qsize() <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">data_queue.get() <span class="comment">#'coding'</span></span><br><span class="line">data_queue.qsize() <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">data_qeuue.get() <span class="comment">#2</span></span><br><span class="line">data_queue.qsize() <span class="comment">#0</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>LifoQueue(): 스택 구조와 비슷하다</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">data_queue = queue.LifoQueue()</span><br><span class="line"></span><br><span class="line">data_queue.put(<span class="string">'coding'</span>)</span><br><span class="line">data_queue.put(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">data_queue.get() <span class="comment">#2</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>PriorityQueue(): 데이터마다 우선순위를 넣어서, 우선순위가 높은 순으로 데이터 출력</p><p>(숫자가 낮은 것이 우선순위가 높은 것)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"></span><br><span class="line">data_queue = queue.PriorityQueue()</span><br><span class="line">data_queue.put((<span class="number">10</span>, <span class="string">'coding'</span>)) <span class="comment">#(우선순위, 데이터)</span></span><br><span class="line">data_queue.put((<span class="number">5</span>, <span class="number">1</span>))</span><br><span class="line">data_queue.put((<span class="number">15</span>, <span class="string">'korea'</span>))</span><br><span class="line"></span><br><span class="line">data.queue.get() <span class="comment">#(5, 1)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="어디에-큐가-많이-쓰이는가"><a href="#어디에-큐가-많이-쓰이는가" class="headerlink" title="어디에 큐가 많이 쓰이는가?"></a>어디에 큐가 많이 쓰이는가?</h2><p>: <strong>멀티 태스킹을 위한 프로세스 스케쥴링 방식을 구현</strong>하기 위해 많이 사용됨(운영체제 참조)</p><blockquote><p>한 가지 일을 하다가, 잠시 멈추고 또 다른 일을 하고, 또 멈추고 다른 일을 하다 보면 언젠가는 결국 모든 일이 마치게 된다. 이 동작이 엄청 빨라지면 한 번에 여러가지 일을 하는 것처럼 보이게 된다.</p><p><strong>시분할 시스템</strong></p><p>: 다중 사용자 지원을 위해 컴퓨터 응답 시간을 최소화하는 스케쥴링</p><p><strong>멀티태스킹</strong></p><p>: 단일 CPU에서 여러 응용 프로그램이 동시에 실행되는 것처럼 보이도록 하는 시스템</p><p><strong>프로세스 스케쥴링</strong></p><p>: 보다 효율적인 멀티태스킹이 되기 위해서 프로세스들을 적절히 분배하는 작업</p><p><strong>멀티 프로세싱</strong></p><p>: 하나의 응용프로그램이 여러 CPU를 사용하면서, 빠르게 실행시키는 시스템</p><p>시분할 처리와 멀티 태스킹의 차이는</p><p><strong>시분할 시스템</strong>은 <strong>다중 사용자 지원</strong>을 위해 컴퓨터 응답 시간을 최소화하기 위한 목적</p><p><strong>멀티 태스킹</strong>은 <strong>단일 CPU에서 여러 응용 프로그램이 동시에 실행되는 것처럼 보이도록</strong> 하는 목적</p></blockquote><h2 id="Enqueue-Dequeue-구현"><a href="#Enqueue-Dequeue-구현" class="headerlink" title="Enqueue, Dequeue 구현"></a>Enqueue, Dequeue 구현</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">queue_list = list()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(data)</span>:</span></span><br><span class="line">    queue_list.append(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">()</span>:</span></span><br><span class="line">    data = queue_list.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># data = queue_list[0]</span></span><br><span class="line">    <span class="comment"># del queue_list[0]</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자료구조] Stack</title>
      <link href="/2019/12/09/structure_stack/"/>
      <url>/2019/12/09/structure_stack/</url>
      
        <content type="html"><![CDATA[<ul><li>데이터를 제한적으로 접근할 수 있는 구조<ul><li>한쪽 끝에서만 자료를 넣거나 빼낼 수 있는 구조</li></ul></li><li>FILO</li></ul><p>대표적인 스택의 활용</p><ul><li>컴퓨터 내부의 프로세스 구조의 함수 동작 방식</li></ul><h2 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h2><ul><li>push() : 데이터를 스택에 넣기</li><li>pop() : 데이터를 스택에서 꺼내기</li></ul><h2 id="스택-구조와-프로세스-스택"><a href="#스택-구조와-프로세스-스택" class="headerlink" title="스택 구조와 프로세스 스택"></a>스택 구조와 프로세스 스택</h2><p>스택 구조는 프로세스 실행 구조의 가장 기본</p><ul><li>함수 호출시 프로세스 실행 구조를 스택과 비교해서 이해 필요</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursive</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> data &lt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'ended'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(data)</span><br><span class="line">        recursive(data<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="스택의-장단점"><a href="#스택의-장단점" class="headerlink" title="스택의 장단점"></a>스택의 장단점</h2><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>구조가 단순해서, 구현이 쉽다</li><li>데이터 저장/읽기 속도가 빠르다</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>데이터 최대 갯수를 미리 정해야 한다<ul><li>파이썬의 경우 재귀 함수는 1000번까지만 호출 가능</li></ul></li><li>저장 공간의 낭비가 발생할 수 있음<ul><li>미리 최대 갯수만큼 저장 공간을 확보해야함</li></ul></li></ul><h2 id="스택-구현"><a href="#스택-구현" class="headerlink" title="스택 구현"></a>스택 구현</h2><p><strong>파이썬 기본 기능 사용하기</strong></p><ul><li>append(push), pop</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data_stack = list()</span><br><span class="line"></span><br><span class="line">data_stack.append(<span class="number">1</span>)</span><br><span class="line">data_stack.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(data_stack) <span class="comment">#[1, 2]</span></span><br><span class="line">data_stack.pop() <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p><strong>파이썬 append, push 사용하지 않고 구현</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data_stack = list()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(data)</span>:</span></span><br><span class="line">    data_stack.append(data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">()</span>:</span></span><br><span class="line">    data = data_stack[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">del</span> data_stack[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>자료구조] Intro</title>
      <link href="/2019/12/09/structure_intro/"/>
      <url>/2019/12/09/structure_intro/</url>
      
        <content type="html"><![CDATA[<p>자료구조, 데이터 구조, data structure</p><p>: 대량의 데이터를 효율적으로 관리할 수 있는 데이터의 구조를 의미</p><h2 id="대표적인-자료구조"><a href="#대표적인-자료구조" class="headerlink" title="대표적인 자료구조"></a>대표적인 자료구조</h2><ul><li>배열</li><li>스택</li><li>큐</li><li>링크드 리스트</li><li>해쉬 테이블</li><li>힙</li></ul><h2 id="자료구조와-알고리즘이-중요한-이유"><a href="#자료구조와-알고리즘이-중요한-이유" class="headerlink" title="자료구조와 알고리즘이 중요한 이유"></a>자료구조와 알고리즘이 중요한 이유</h2><p>: 어떤 자료구조와 알고리즘을 쓰느냐에 따라, 성능차가 크다</p><h2 id="Array-배열"><a href="#Array-배열" class="headerlink" title="Array, 배열"></a>Array, 배열</h2><h3 id="배열의-필요성"><a href="#배열의-필요성" class="headerlink" title="배열의 필요성?"></a>배열의 필요성?</h3><ul><li>같은 종류의 데이터를 효율적으로 관리하게 하기 위해</li><li>같은 종류의 데이터를 순차적으로 저장</li></ul><h3 id="배열의-장점"><a href="#배열의-장점" class="headerlink" title="배열의 장점"></a>배열의 장점</h3><ul><li>빠른 접근 가능</li></ul><h3 id="배열의-단점"><a href="#배열의-단점" class="headerlink" title="배열의 단점"></a>배열의 단점</h3><ul><li>추가/삭제가 쉽지 않음</li><li>미리 최대 길이를 지정해야 함</li></ul><h3 id="파이썬과-배열"><a href="#파이썬과-배열" class="headerlink" title="파이썬과 배열"></a>파이썬과 배열</h3><ul><li>파이썬 리스트 활용</li></ul>]]></content>
      
      
      <categories>
          
          <category> 자료구조 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 자료구조 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django] JWT Token</title>
      <link href="/2019/12/03/jwt-base/"/>
      <url>/2019/12/03/jwt-base/</url>
      
        <content type="html"><![CDATA[<h2 id="JWT를-왜-사용해야하는가"><a href="#JWT를-왜-사용해야하는가" class="headerlink" title="JWT를 왜 사용해야하는가?"></a>JWT를 왜 사용해야하는가?</h2><dl><dt>Json Web Token</dt><dd>전자 서명 된 URL-safe(URL로 이용할 수 있는 문자만 구성된)의 JSON</dd></dl><h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><p>실행한 프로젝트 구조 URL<br><a href="https://github.com/TaeJuneJoung/Python-Deploy/tree/jwt-token" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/Python-Deploy/tree/jwt-token</a></p><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework djangorestframework-jwt</span><br></pre></td></tr></table></figure><h3 id="Django-Settings"><a href="#Django-Settings" class="headerlink" title="Django Settings"></a>Django Settings</h3><p>아래의 소스를 Settings의 가장 아래 부분에 추가</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 로그인 여부를 확인하는 클래스</span></span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 로그인과 관련된 클래스</span></span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">'JWT_SECRET_KEY'</span>: SECRET_KEY,</span><br><span class="line">    <span class="string">'JWT_ALGORITHM'</span>: <span class="string">'HS256'</span>,</span><br><span class="line">    <span class="string">'JWT_ALLOW_REFRESH'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">7</span>),</span><br><span class="line">    <span class="string">'JWT_REFRESH_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">28</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>- JWT_SECRET_KEY</strong></p><blockquote><p>JWT의 비밀키로 어떤걸 사용할지 작성</p><p>여기서는 Django의 비밀키를 사용하였으나, <strong>다른키 사용 권장</strong></p></blockquote><p><strong>- JWT_ALGORITHM</strong></p><blockquote><p>JWT 암호화에 사용되는 알고리즘을 지정</p></blockquote><p><strong>- JWT_ALLOW_REFRESH</strong></p><blockquote><p>JWT 토큰을 갱신할 수 있게 할지 여부를 결정</p></blockquote><p><strong>- JWT_EXPIRATION_DELTA</strong></p><blockquote><p>JWT 토큰의 유효 기간 설정</p><p>위의 설정과 같은 경우는 JWT 토큰을 7일 안에 갱신하지 않으면 JWT토큰을 사용할 수 없고 로그아웃 된다.</p></blockquote><p><strong>- JWT_REFRESH_EXPIRATION_DELTA</strong></p><blockquote><p>JWT 토큰 갱신의 유효기간</p><p>위의 설정과 같은 경우 7일 안에 갱신하여도 28일 후에는 갱신할 수 없다. 즉, 28일 후에는 로그아웃 된다.</p></blockquote><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token, verify_jwt_token, refresh_jwt_token</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'api/token/'</span>, obtain_jwt_token), <span class="comment">#JWT토큰 발행</span></span><br><span class="line">    path(<span class="string">'api/token/verify/'</span>, verify_jwt_token), <span class="comment">#JWT유효 검증</span></span><br><span class="line">    path(<span class="string">'api/token/refresh/'</span>, refresh_jwt_token), <span class="comment">#JWT토큰 갱신</span></span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'todos.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="todos-views-py"><a href="#todos-views-py" class="headerlink" title="todos.views.py"></a>todos.views.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view, permission_classes, authentication_classes</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated <span class="comment">#로그인 여부 확인</span></span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication <span class="comment">#JWT 인증을 확인하기 위해 사용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Todos</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(['GET'])</span></span><br><span class="line"><span class="meta">@permission_classes((IsAuthenticated,)) #권한 체크(현재 여기서는 로그인 여부만 체크)</span></span><br><span class="line"><span class="meta">@authentication_classes((JSONWebTokenAuthentication,)) #JWT토큰 확인(토큰 이상시 JSON으로 에러 반환)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(request)</span>:</span></span><br><span class="line">    todos = Todos.objects.all()</span><br><span class="line">    todos_list = serializers.serialize(<span class="string">'json'</span>, todos)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(todos_list, content_type=<span class="string">'text/json-comment-filtered'</span>)</span><br></pre></td></tr></table></figure><h2 id="PostMan을-통한-확인"><a href="#PostMan을-통한-확인" class="headerlink" title="PostMan을 통한 확인"></a>PostMan을 통한 확인</h2><h3 id="JWT-TOKEN-생성"><a href="#JWT-TOKEN-생성" class="headerlink" title="JWT TOKEN 생성"></a>JWT TOKEN 생성</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[POST]</span><br><span class="line">http://127.0.0.1:8000/api/token/</span><br><span class="line"></span><br><span class="line">Body -&gt; form-data</span><br><span class="line">username:</span><br><span class="line">password:</span><br></pre></td></tr></table></figure><p><strong>결과값</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"토큰값"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실패시</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"non_field_errors"</span>: [</span><br><span class="line">        <span class="string">"Unable to log in with provided credentials."</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>데이터 값 확인</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[GET]</span><br><span class="line">http://127.0.0.1:8000</span><br><span class="line"></span><br><span class="line">Headers</span><br><span class="line">Authorization: jwt 토큰값</span><br></pre></td></tr></table></figure><p><strong>결과값</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"model"</span>: <span class="string">"todos.todos"</span>,</span><br><span class="line">        <span class="attr">"pk"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"fields"</span>: &#123;</span><br><span class="line">            <span class="attr">"content"</span>: <span class="string">"확인!"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="JWT-TOKEN-검증"><a href="#JWT-TOKEN-검증" class="headerlink" title="JWT TOKEN 검증"></a>JWT TOKEN 검증</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[POST]</span><br><span class="line">http://127.0.0.1:8000/api/token/verify/</span><br><span class="line"></span><br><span class="line">Body -&gt; form-data</span><br><span class="line">token: 토큰값</span><br></pre></td></tr></table></figure><p><strong>결과값</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"토큰값"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실패시</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"non_field_errors"</span>: [</span><br><span class="line">        <span class="string">"Error decoding signature."</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JWT-TOKEN-갱신"><a href="#JWT-TOKEN-갱신" class="headerlink" title="JWT TOKEN 갱신"></a>JWT TOKEN 갱신</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[POST]</span><br><span class="line">http://127.0.0.1:8000/api/token/refresh/</span><br><span class="line"></span><br><span class="line">Body -&gt; form-data</span><br><span class="line">token: 토큰값</span><br></pre></td></tr></table></figure><p><strong>결과값</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"token"</span>: <span class="string">"변경된 토큰값"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실패시</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"non_field_errors"</span>: [</span><br><span class="line">        <span class="string">"Error decoding signature."</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><p> <a href="http://www.opennaru.com/opennaru-blog/jwt-json-web-token/" target="_blank" rel="noopener">http://www.opennaru.com/opennaru-blog/jwt-json-web-token/</a><br> <a href="https://brownbears.tistory.com/440" target="_blank" rel="noopener">https://brownbears.tistory.com/440</a><br> <a href="https://dev-yakuza.github.io/ko/django/jwt/" target="_blank" rel="noopener">https://dev-yakuza.github.io/ko/django/jwt/</a> </p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS] Django AWS EC2 Deploy - 1</title>
      <link href="/2019/12/03/deploy-django/"/>
      <url>/2019/12/03/deploy-django/</url>
      
        <content type="html"><![CDATA[<h2 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h2><p>Django를 AWS EC2에 배포하여 접근하기</p><h2 id="용어"><a href="#용어" class="headerlink" title="용어"></a>용어</h2><p><strong>EC2</strong>(Elastic Compute Cloud): 가상 인스턴스를 운영하는 서비스</p><p><strong>인스턴스</strong>(Instance): AWS에서 가상 서버를 부르는 용어</p><p>가상서버: CPU와 메모리를 가진 클라우드 내 서버</p><p><strong>IAM</strong>(Identity and Access Management): 사용자 엑세스 및 암호화 키 관리</p><p><strong>보안 그룹</strong>(Security Group): 인스턴스에 대한 트래픽을 제어하는 가상 방화벽 역할 </p><h2 id="AWS-설정"><a href="#AWS-설정" class="headerlink" title="AWS 설정"></a>AWS 설정</h2><h3 id="IAM-생성"><a href="#IAM-생성" class="headerlink" title="IAM 생성"></a>IAM 생성</h3><img src="/2019/12/03/deploy-django/01.png" class="slug"><p>AWS에서 IAM을 먼저 생성하고 진행 해야한다.</p><img src="/2019/12/03/deploy-django/02.png" class="slug"><p>진행하며 사용자가 생성되면 <code>Access Key ID</code>와 <code>Secret access key</code>가 나온다.<br><strong><code>Secret access key</code>는 절대 노출되어서는 안된다</strong>.</p><img src="/2019/12/03/deploy-django/03.png" class="slug"><p><strong>키 페어</strong>를 생성하면 <code>pem</code>파일이 만들어진다.</p><img src="/2019/12/03/deploy-django/04.png" class="slug"><img src="/2019/12/03/deploy-django/05.png" class="slug"><p>아래 보이는 규칙 추가를 이용해서 port를 열어줄 것이다.</p><img src="/2019/12/03/deploy-django/06.png" class="slug"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 pem파일</span><br></pre></td></tr></table></figure><h2 id="인스턴스에-접속하기"><a href="#인스턴스에-접속하기" class="headerlink" title="인스턴스에 접속하기"></a>인스턴스에 접속하기</h2><p>생성한 가상 컴퓨터 인스턴스에 <code>ssh</code>를 사용하여 접속</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i pem파일 유저명@EC2퍼플릭DNS주소</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>가 나오면 yes를 입력하여 접속하면 된다.</p><h3 id="기본설정"><a href="#기본설정" class="headerlink" title="기본설정"></a>기본설정</h3><h4 id="update-package"><a href="#update-package" class="headerlink" title="update package"></a>update package</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 패키지 의존성 검사 및 업그레이드</span></span><br><span class="line">sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure><p>다른 화면이 나올 경우에는 <code>Enter</code>를 누르면 된다.</p><h4 id="Install-python-pip"><a href="#Install-python-pip" class="headerlink" title="Install python-pip"></a>Install python-pip</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure><h4 id="Install-zsh"><a href="#Install-zsh" class="headerlink" title="Install zsh"></a>Install zsh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure><h4 id="Install-oh-my-zsh"><a href="#Install-oh-my-zsh" class="headerlink" title="Install oh-my-zsh"></a>Install oh-my-zsh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L http://install.ohmyz.sh | sh</span><br></pre></td></tr></table></figure><h4 id="Change-Default-shell"><a href="#Change-Default-shell" class="headerlink" title="Change Default shell"></a>Change Default shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chsh ubuntu -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><h4 id="Install-pyenv-requirements"><a href="#Install-pyenv-requirements" class="headerlink" title="Install pyenv requirements"></a>Install pyenv requirements</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils</span><br></pre></td></tr></table></figure><h4 id="Install-pyenv"><a href="#Install-pyenv" class="headerlink" title="Install pyenv"></a>Install pyenv</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><h4 id="pyenv-설정을-zshrc-기록"><a href="#pyenv-설정을-zshrc-기록" class="headerlink" title="pyenv 설정을 .zshrc 기록"></a>pyenv 설정을 .zshrc 기록</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/ubuntu/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure><p>위의 내용이 <code>.zshrc</code>에 기록해야하는 것인지 bash에 한줄 한줄 써서 진행해야 하는것이 판별 필요</p><p>진행할때는 기록하고 하였으나 에러가 발생하여 한줄 한줄 bash에 작성하여 진행하여 해결함</p><h2 id="Django-설정"><a href="#Django-설정" class="headerlink" title="Django 설정"></a>Django 설정</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R ubuntu:ubuntu /srv/</span><br></pre></td></tr></table></figure><h3 id="git-clone을-통한-프로젝트-가져오기"><a href="#git-clone을-통한-프로젝트-가져오기" class="headerlink" title="git clone을 통한 프로젝트 가져오기"></a>git clone을 통한 프로젝트 가져오기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 프로젝트git주소</span><br></pre></td></tr></table></figure><p>예시 Git 프로젝트 주소<br><a href="https://github.com/TaeJuneJoung/Python-Deploy/tree/deploy-test" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/Python-Deploy/tree/deploy-test</a></p><h3 id="pyenv-설치-및-virtualenv"><a href="#pyenv-설치-및-virtualenv" class="headerlink" title="pyenv 설치 및 virtualenv"></a>pyenv 설치 및 virtualenv</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 프로젝트폴더</span><br><span class="line">pyenv install 3.7.5 <span class="comment">#파이썬 버전</span></span><br><span class="line">pyenv virtualenv deploy_ec2</span><br><span class="line">pyenv <span class="built_in">local</span> deploy_ec2</span><br></pre></td></tr></table></figure><h4 id="Install-python-library"><a href="#Install-python-library" class="headerlink" title="Install python library"></a>Install python library</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev python-setuptools</span><br></pre></td></tr></table></figure><h4 id="pyenv-접속"><a href="#pyenv-접속" class="headerlink" title="pyenv 접속"></a>pyenv 접속</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pyenv shell 3.7.5</span><br><span class="line"></span><br><span class="line">pip --version</span><br><span class="line"></span><br><span class="line">pip install django</span><br><span class="line"></span><br><span class="line"><span class="comment"># requirements.txt가 있다면</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="runserver-테스트"><a href="#runserver-테스트" class="headerlink" title="runserver 테스트"></a>runserver 테스트</h3><ul><li>0:8000으로 지정필요</li><li>웹 브라우저에서 &lt;퍼블릭 DNS:8000=””&gt; 로 접속하기 위해서는 보안그룹(security group) 설정이 필요 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0:8000</span><br></pre></td></tr></table></figure><h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><p> <a href="https://nachwon.github.io/django-deploy-1-aws/" target="_blank" rel="noopener">https://nachwon.github.io/django-deploy-1-aws/</a> </p><p> <a href="https://wayhome25.github.io/django/2018/03/03/django-deploy-03-ec2/" target="_blank" rel="noopener">https://wayhome25.github.io/django/2018/03/03/django-deploy-03-ec2/</a> </p><p> <a href="https://jiyeonseo.github.io/2016/07/27/install-pyenv/" target="_blank" rel="noopener">https://jiyeonseo.github.io/2016/07/27/install-pyenv/</a> </p>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Deploy </tag>
            
            <tag> EC2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Project] End Movie</title>
      <link href="/2019/11/14/project-endmovie/"/>
      <url>/2019/11/14/project-endmovie/</url>
      
        <content type="html"><![CDATA[<h2 id="프로젝트-목적"><a href="#프로젝트-목적" class="headerlink" title="프로젝트 목적"></a>프로젝트 목적</h2><p>이전에 Django를 처음 배우면서 만들었던 영화 프로젝트를 <code>RESTFUL</code>을 이용한 방법으로 만들어보고자 토이 프로젝트를 진행하였다.</p><ol><li>RESTFUL 학습</li><li>Front-END 학습</li></ol><dl><dt>초기 프로젝트 주소</dt><dd><a href="https://github.com/ClearRoot/EndGamePJ" target="_blank" rel="noopener">https://github.com/ClearRoot/EndGamePJ</a></dd></dl><dl><dt>현재 프로젝트 주소</dt><dd><a href="https://github.com/TaeJuneJoung/endMovie" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/endMovie</a></dd></dl><img src="/2019/11/14/project-endmovie/guest_main.png" class="slug"><p>The Movie DB API를 이용하여 데이터를 가져와 DB에 저장한 후, 처음 페이지에서 보여주었다.<br>너무 많은 데이터를 한꺼번에 보여줘서 스크롤의 압박이 생길까하여 처음에는 28개의 영화 정보를 보여주고 <code>더보기</code> 버튼을 누르면 12개씩 추가되도록 하였다.</p><img src="/2019/11/14/project-endmovie/guest_movie_detail01.png" class="slug"><p>하나의 영화 정보를 클릭해서 들어가면 처음 맞이하는 페이지</p><img src="/2019/11/14/project-endmovie/guest_movie_detail02.png" class="slug"><p>아래의 공간에는 Youtube를 통해 예고편 보기와 영화 내용, 댓글 기능이 구현되어 있다.</p><img src="/2019/11/14/project-endmovie/join.png" class="slug"><p>회원은 회원이름을 ID로 하고, 비밀번호는 숫자+영어+특수문자로 8자 이상을 기입하여야 가능하다. 이메일 인증을 통해 무분별한 사용자를 막고자 하였다.(휴대전화로 하려고 하였으나, 문자는 금액적인 부분이 발생으로 이메일로 구현)</p><img src="/2019/11/14/project-endmovie/login.png" class="slug"><p>회원가입과 로그인 디자인 부분은 <code>N</code>사에서 얻어왔다.</p><img src="/2019/11/14/project-endmovie/user_main.png" class="slug"><p>로그인을 한 사용자는 영화의 평점도 영화 리스트를 보며 남길 수 있다.</p><img src="/2019/11/14/project-endmovie/user_movie_detail01.png" class="slug"><p>로그인 사용자는 댓글을 작성하며 댓글에 대한 <code>좋아요</code> 기능을 사용할 수 있다.</p><h2 id="추후-발전-계획-내용"><a href="#추후-발전-계획-내용" class="headerlink" title="추후 발전 계획 내용"></a>추후 발전 계획 내용</h2><ol><li>영화 추천 서비스</li><li>배포(Deploy)</li><li>검색기능</li><li>좋아요 기능</li><li>댓글 신고 기능 / BEST 댓글</li><li>약관동의/회원 분실 찾기</li></ol><p>1번과 2번은 추후라도 꼭 해볼 내용<br>1번은 AI부분이나 빅데이터 부분을 배워야하기에 학습을 이룬 후에 1번과 2번을 위주로 할 계획</p><p>3~6번은 서비스에는 필요하나 학습 위주의 토이 프로젝트이기에 구현이 어렵지 않으므로 넘길 수 있음</p><p>2번의 배포는 Docker를 이용하고 CI/CD 자동화를 한 후에 가능하다면 <code>kubernetes</code>를 알아보고 적용해볼 계획</p><h2 id="프로젝트를-하며-느낀점"><a href="#프로젝트를-하며-느낀점" class="headerlink" title="프로젝트를 하며 느낀점"></a>프로젝트를 하며 느낀점</h2><p>현재까지 작성한 부분은 <code>영화 추천 서비스</code>를 하기 위해 기본적인 부분들을 만든 토이 프로젝트다.<br>다른 부분들을 하면서 시간이 날 때마다 조금씩 하다보니 집중력이 많이 들어간 프로젝트는 아닌 점이 아쉽다.<br>그래도 Front를 Vue와 Vuetify로 만들면서 정말 편하다는 점과 Back단만 고집했던 나 자신이 Full Stack으로 하면서 ‘하나의 기본적인 프로젝트를 완성할 수 있구나’라는 자신감을 느낄수 있었다.<br>서버단에서 RESTFUL을 이용할 때는 Django는 Serailizer를 이용해야하니 Django에서 바로 서비스를 만들때랑은 다르겠구나 하였는데, 기본은 어디에서나 쓰이고 기본이 튼튼해야함을 느낄 수 있었다.</p><h3 id="다른-프로젝트에서-적용해볼-내용"><a href="#다른-프로젝트에서-적용해볼-내용" class="headerlink" title="다른 프로젝트에서 적용해볼 내용"></a>다른 프로젝트에서 적용해볼 내용</h3><ul><li><p>JWT Token<br>현 프로젝트에서는 회원 정보를 JWT토큰으로 주고 받고 있지 않기에 JWT토큰에 대한 부분을 만들어 봐야겠다.</p></li><li><p>TDD 개발<br>TDD개발을 어떻게 하는지 감은 오는데 정확한 방법을 몰라 연습해 봐야겠다. 감 잡은 내용은 아래의 주소와 같다.</p></li></ul><p><a href="https://wikidocs.net/11057" target="_blank" rel="noopener">https://wikidocs.net/11057</a></p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] SMTP 이메일 보내기</title>
      <link href="/2019/11/10/python-smtp/"/>
      <url>/2019/11/10/python-smtp/</url>
      
        <content type="html"><![CDATA[<h2 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h2><p><strong>Simple Mail Transfer Protocol</strong></p><p>: 인터넷 상의 유효한 이메일 아이디로 이메일을 보내는데 사용되는 클라이언트</p><h2 id="IMAP-설정"><a href="#IMAP-설정" class="headerlink" title="IMAP 설정"></a>IMAP 설정</h2><img src="/2019/11/10/python-smtp/smtp01.png" class="slug"><p>설정안함을 설정함으로 바꿔주면 된다.<br>이 설정만 하면은 Gmail의 보안규칙을 다 지키진 못한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.gaierror: [Errno 11001] getaddrinfo failed</span><br></pre></td></tr></table></figure><p>무슨 문제인가 했더니, 다른 부분으로 설정하기도 하였고 <code>app password</code>를 사용하지도 않아 Gmail 정책 보안상 문제가 일어났던 부분이 있었던거 같다.</p><h2 id="APP-Password-설정"><a href="#APP-Password-설정" class="headerlink" title="APP Password 설정"></a>APP Password 설정</h2><img src="/2019/11/10/python-smtp/smtp02.png" class="slug"><p>계정설정으로 들어간 후, 보안에서 2차 비밀번호를 설정하고 앱 패스워드를 설정하면 된다.</p><img src="/2019/11/10/python-smtp/smtp03.png" class="slug"><p>앱 패스워드는 16자로 주워지며, Email에 대한 부분을 사용할 것이기에 필자는 <code>메일 / Windows 컴퓨터</code>로 설정하였다.<br>설정이 끝나서 받은 앱 패스워드를 이제 사용할 것이기에 잊어버리면 안된다.</p><h2 id="메일-보내기"><a href="#메일-보내기" class="headerlink" title="메일 보내기"></a>메일 보내기</h2><p>기본적인 설정이 끝났으니, 이제 메일을 보내도록 하겠다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="comment"># STMP 세션 생성</span></span><br><span class="line">smtp = smtplib.SMTP(<span class="string">'smtp.gmail.com'</span>, <span class="number">587</span>) <span class="comment">#Gmail Port: 587</span></span><br><span class="line"><span class="comment"># TLS 보안 start</span></span><br><span class="line">smtp.starttls()</span><br><span class="line"></span><br><span class="line">smtp.login(<span class="string">'gmail email'</span>, <span class="string">'app password'</span>)</span><br><span class="line"></span><br><span class="line">msg = MIMEText(<span class="string">'내용 : content'</span>)</span><br><span class="line">msg[<span class="string">'Subject'</span>] = <span class="string">'제목 : Title'</span></span><br><span class="line"></span><br><span class="line">smtp.sendmail(<span class="string">'발신자 이메일'</span>, <span class="string">'수신자 이메일'</span>, msg.as_string())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 세션 종료</span></span><br><span class="line">smtp.quit()</span><br></pre></td></tr></table></figure><h3 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h3><p> <a href="https://yeolco.tistory.com/93" target="_blank" rel="noopener">https://yeolco.tistory.com/93</a> </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> SMTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt] Middleware</title>
      <link href="/2019/10/29/nuxt-navigator/"/>
      <url>/2019/10/29/nuxt-navigator/</url>
      
        <content type="html"><![CDATA[<h2 id="Nuxt-universal-storage"><a href="#Nuxt-universal-storage" class="headerlink" title="Nuxt universal storage"></a>Nuxt universal storage</h2><p><small> <a href="https://github.com/nuxt-community/universal-storage-module" target="_blank" rel="noopener">https://github.com/nuxt-community/universal-storage-module</a> </small></p><blockquote><p>Nuxt의 서버랜더링에서는 클라이언트 부분에 접근할 수 없다.</p><p>middleware를 사용함에 있어서 LocalStorage와 같은 부분들에 접근할 수 없었고,</p><p>window 객체를 사용할 수도 없었다. 또한, context.store에 접근하여도 초기값을 가져오고 이후 변경된 값을 가져온다 하여도 F5로 새로고침 되거나 다른 페이지로 넘어가는 순간 다시 초기값이 되었다.</p><p>이를 해결하기 위해 Nuxt에서 LocalStorage를 사용할 수 있는 모듈을 설치하였다.</p></blockquote><p>nuxt mode에서는 <strong>spa</strong>와 <strong>universal</strong>이 있다.</p><ol><li><p>spa</p><blockquote><p>서버측 렌더링 없음(클라이언트 탐색만)</p></blockquote></li><li><p>universal</p><blockquote><p>동적 응용 프로그램(서버측 랜더링 + 클라이언트 탐색)</p></blockquote></li></ol><p><small>사이트:  <a href="https://nuxtjs.org/api/configuration-mode#the-mode-property" target="_blank" rel="noopener">https://nuxtjs.org/api/configuration-mode#the-mode-property</a> </small></p><h2 id="느낀점"><a href="#느낀점" class="headerlink" title="느낀점"></a>느낀점</h2><p>nuxt에 <code>process.browser</code>와 <code>process.server</code>가 있는 것으로 보아 브라우저일 때와 서버일 때가 나눠져 있다. 더 재미있는 사실은 두 개가 다 아닐 때도 있다. 이 설정이 nuxt.config.js에 env에 있는 것 같다.(정확히 파악은 하지 않음)</p><p>Middleware를 어떻게 쓸 것인가가 가장 큰 관건인데, 서버단에서 context를 이용하지 않은 store접근은 불가하다고 보는게 낫다. 그리고 기본적으로는 window도 사용할 수 없다.</p><p>redirect시에 store가 날라가는 위험성도 존재하니, 이를 보완하기 위해 storage나 cookie에 일부 데이터를 저장하고 비동기 통신을 통해서 가져오는 것이 어떠한가 생각한다.</p><p>현재로서의 결론] user의 id나 email정도를 저장소에 보관하고 axios를 통해 DB값을 가져와서 악의적 사용자가 발생하지 않도록 예방하기</p>]]></content>
      
      
      <categories>
          
          <category> Nuxt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nuxt </tag>
            
            <tag> Middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask] Rest Api</title>
      <link href="/2019/09/23/flask-rest-api/"/>
      <url>/2019/09/23/flask-rest-api/</url>
      
        <content type="html"><![CDATA[<h2 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h2><p>​Flask REST API를 만드는 방법에 대해서 학습해보고자 한다.</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br><span class="line">pip install flask_restful</span><br><span class="line">pip install flask-cors</span><br></pre></td></tr></table></figure><h2 id="Flask-Settings"><a href="#Flask-Settings" class="headerlink" title="Flask Settings"></a>Flask Settings</h2><p>​    먼저, Flask를 만들어보자.</p><p><a href="https://palletsprojects.com/p/flask/" target="_blank" rel="noopener">Flask Docs</a>를 보고 따라하면 된다. 먼저 아래의 소스를 <code>app.py</code>를 생성하여 넣어보자. 작성 후에 <code>python app.py</code>를 실행해보면 Flask 서버를 실행할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, escape, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">"name"</span>, <span class="string">"World"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Hello, <span class="subst">&#123;escape(name)&#125;</span>!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Connect-Database"><a href="#Connect-Database" class="headerlink" title="Connect Database"></a>Connect Database</h2><p>​    값을 가져오기 위해서 Database와 연동하자. DB는 Flask와 연결되어 있는 sqlite3를 사용하도록 하겠다. 다른 DB를 사용하고 싶으면 갈아 끼우고 그에 맞는 설정만 하면 그만이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># database 폴더가 없다면 생성</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">'database'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'database'</span>)</span><br><span class="line"></span><br><span class="line">conn = <span class="literal">None</span></span><br><span class="line">cur = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conn</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn = sqlite3.connect(<span class="string">'database/database.db'</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    </span><br><span class="line">    cur.execute(<span class="string">'''CREATE TABLE IF NOT EXISTS todos(</span></span><br><span class="line"><span class="string">        id INTEGER PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">        work TEXT,</span></span><br><span class="line"><span class="string">        create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="string">        )'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    cur = <span class="literal">None</span></span><br><span class="line">    conn = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_todos</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">'''</span></span><br><span class="line"><span class="string">        SEELCT * FROM todos;</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    data = cur.fetchall()</span><br><span class="line">    close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_todo</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">f'''</span></span><br><span class="line"><span class="string">        SELECT * FROM todos</span></span><br><span class="line"><span class="string">        WHERE id = <span class="subst">&#123;id&#125;</span>;</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    data = cur.fetchone()</span><br><span class="line">    close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_todo</span><span class="params">(work)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">f"""</span></span><br><span class="line"><span class="string">        INSERT INTO todos (work)</span></span><br><span class="line"><span class="string">        VALUES ('<span class="subst">&#123;work&#125;</span>');</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line">    close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put_todo</span><span class="params">(id, work)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">f"""</span></span><br><span class="line"><span class="string">        UPDATE todos</span></span><br><span class="line"><span class="string">        SET work = '<span class="subst">&#123;work&#125;</span>'</span></span><br><span class="line"><span class="string">        WHERE id = <span class="subst">&#123;id&#125;</span>;</span></span><br><span class="line"><span class="string">    """</span>)</span><br><span class="line">    close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_todo</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> conn, cur</span><br><span class="line">    conn()</span><br><span class="line">    cur.execute(<span class="string">f'''</span></span><br><span class="line"><span class="string">        DELETE FROM todos</span></span><br><span class="line"><span class="string">        WHERE id = <span class="subst">&#123;id&#125;</span>;</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    close()</span><br></pre></td></tr></table></figure><p>​    ORM형식으로 짠 것이 아니라 그런지, 발생한 이슈는 <code>Text</code>타입일 때 Insert나 Update SQL Query에서 <code>&#39;</code>싱글 쿼터나 더블 쿼터로 감싸주지 않아서 타입 오류가 발생하였다. 이에 대한 대응책도 하나 마련해야한다. 싱글 쿼터로 감싸주었는데 값에 싱글 쿼터가 있다면 SQL Injection이 발생하고 말 것이다. 여기에는 작성하지 않았지만, 이를 해결하기 위해서 python의 <code>replace문</code>을 사용할 수 있다.</p><h2 id="BASIC-RESTFUL-API"><a href="#BASIC-RESTFUL-API" class="headerlink" title="BASIC RESTFUL API"></a>BASIC RESTFUL API</h2><p>​    에러처리 없는 기본적인 REST API는 아래와 같다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, escape, request</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> reqparse, abort, Api, Resource</span><br><span class="line"><span class="keyword">import</span> database</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todos</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> database.get_todos()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'work'</span>, type=str, required=<span class="literal">True</span>)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        database.post_todo(args)</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> database.get_todo(id)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'work'</span>, type=str, required=<span class="literal">True</span>)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        database.put_todo(id, args[<span class="string">'work'</span>])</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        database.delete_todo(id)</span><br><span class="line"></span><br><span class="line">api.add_resource(Todos, <span class="string">'/todos'</span>)</span><br><span class="line">api.add_resource(Todo, <span class="string">'/todo/&lt;int:id&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">"name"</span>, <span class="string">"World"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Hello, <span class="subst">&#123;escape(name)&#125;</span>!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​    테스트 해보던 중에 한가지 문제가 발생하였다. get으로 가져온 다음에 F5를 누르면 해당 값이 <code>None</code>이 되면서 <strong>TypeError</strong>을 발생하는 것이었다. 데이터베이스 구조에서 <strong>close</strong>를 해주기에 생기는 문제였는데,  이는 sqlite3에서 발생하였다.  sqlite3는 동시성이 필요한 작업에서는 사용하지 않는 것이 좋다.</p><p>​    DB를 고려하지 않는다고 하였을 때도 새로운 문제가 발생한다. 다른 주소에서 접근을 할 수가 없는 문제있다. 이를 해결하기 위해서 CORS를 설정해주어야한다.</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p><strong>Cross-Origin Resource Sharing</strong></p><p>: 시스템 수준에서 타 도메인 간 자원 호출을 승인하거나 차단하는 것을 결정하는 것</p><h2 id="완성-RESTFUL-API"><a href="#완성-RESTFUL-API" class="headerlink" title="완성 RESTFUL API"></a>완성 RESTFUL API</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, escape, request</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> reqparse, abort, Api, Resource</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">import</span> database</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">CORS(app)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todos</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> database.get_todos()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'work'</span>, type=str, required=<span class="literal">True</span>)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        database.post_todo(args)</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = database.get_todo(id)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            data = abort(<span class="number">404</span>, message=<span class="string">f"Todo id:<span class="subst">&#123;id&#125;</span> doesn't exist"</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            database.get_todo(id)</span><br><span class="line">            parser = reqparse.RequestParser()</span><br><span class="line">            parser.add_argument(<span class="string">'work'</span>, type=str, required=<span class="literal">True</span>)</span><br><span class="line">            args = parser.parse_args()</span><br><span class="line">            database.put_todo(id, args[<span class="string">'work'</span>])</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            args = abort(<span class="number">404</span>, message=<span class="string">f"Todo id:<span class="subst">&#123;id&#125;</span> doesn't exist"</span>)</span><br><span class="line">        <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, id)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            database.get_todo(id)</span><br><span class="line">            database.delete_todo(id)</span><br><span class="line">            data = &#123;<span class="string">"message"</span>: <span class="string">"Delete"</span>&#125;</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            data = abort(<span class="number">404</span>, message=<span class="string">f"Todo id:<span class="subst">&#123;id&#125;</span> doesn't exist"</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">api.add_resource(Todos, <span class="string">'/todos'</span>)</span><br><span class="line">api.add_resource(Todo, <span class="string">'/todo/&lt;int:id&gt;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">"name"</span>, <span class="string">"World"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'Hello, <span class="subst">&#123;escape(name)&#125;</span>!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h3><p><a href="http://egloos.zum.com/sweeper/v/3052951" target="_blank" rel="noopener">SQLite 장단점</a></p><p><a href="https://flask-restful.readthedocs.io/en/0.3.5/quickstart.html" target="_blank" rel="noopener">Flask-Restful Docs</a></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> REST API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows] Hyper-V</title>
      <link href="/2019/08/25/hyper-v/"/>
      <url>/2019/08/25/hyper-v/</url>
      
        <content type="html"><![CDATA[<h3 id="Window10에서-Virtual-Box-구동시-Error"><a href="#Window10에서-Virtual-Box-구동시-Error" class="headerlink" title="Window10에서 Virtual Box 구동시 Error"></a>Window10에서 Virtual Box 구동시 Error</h3><br>> 제어판 -> 프로그램 -> 프로그램 및 기능<br>> -> Windows 기능 켜기/끄기<br><br>Hyper-V 설정이 켜 있는 경우 가상화 기능을 독점하기에 가상화를 사용하는 다른 프로그램과 충돌이 일어날 수 있다.<br><br>Docker를 Window버전으로 다운받아 쓰다가 VirtualBox를 써서 Linux를 사용하려고 하였는데 Hyper-V문제로 작동되지 않았다.<br>Hyper-V를 위의 경로로 찾아가 끄고 진행하였더니 블루스크린이 나오고 결국은 복원을 눌러 다시 On이 되었다.<br><br><br>Hyper-V가 윈도우 부팅시 자동으로 실행되지 않게 하기 위해<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><br><p>원래 설정으로 복원하기 위해서는</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure><br>명령어를 입력하면 된다.]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hyper-V </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python] Meta Class</title>
      <link href="/2019/08/08/meta-class/"/>
      <url>/2019/08/08/meta-class/</url>
      
        <content type="html"><![CDATA[<p>클래스 -&gt; 인스턴스 객체 생성</p><p>메타클래스 -&gt; 클래스 객체 생성</p><p><strong>type(name, bases, dict)</strong></p><blockquote><p><code>type()</code> 함수의 목적은 타입을 알아보는 것도 있지만,</p><p><strong>새로운 클래스를 만드는 메타클래스의 목적</strong>도 있다.</p><p>name : 만들 클래스 이름</p><p>bases : 부모 클래스의 튜플</p><p>dict : 속성 값을 정의하는 심볼 사전</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line">Klass = Klass()</span><br><span class="line">print(Klass) <span class="comment">#&lt;__main__.Klass object at 0x0...&gt;</span></span><br><span class="line"></span><br><span class="line">Klass2 = type(<span class="string">'Klass2'</span>, (), &#123;<span class="string">'a'</span>:<span class="number">10</span>, <span class="string">'b'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">print(Klass2) <span class="comment">#&lt;class '__main__.Klass2'&gt;</span></span><br><span class="line"></span><br><span class="line">print(Klass.a, Klass2.a) <span class="comment">#10 10</span></span><br><span class="line">print(type(Klass), type(Klass2)) <span class="comment">#&lt;class '__main__.Klass'&gt; &lt;class 'type'&gt;</span></span><br></pre></td></tr></table></figure><p><strong>-상속 구현</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Inheritance가 Klass를 상속받음</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inheritance</span><span class="params">(Klass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">inheritance = type(<span class="string">'Inher'</span>, (), &#123;&#125;)</span><br><span class="line">print(inheritance) <span class="comment">#&lt;class '__main__.Inher'&gt;</span></span><br><span class="line">print(inheritance.__bases__) <span class="comment">#(&lt;class 'object'&gt;,) -베이스 클래스 확인</span></span><br></pre></td></tr></table></figure><p><strong>-클래스 동적 구현</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(self.a)</span><br><span class="line"></span><br><span class="line">Dynamic = type(<span class="string">'Dynamic'</span>, (Klass,), &#123;<span class="string">'display'</span>:display&#125;)</span><br><span class="line">res = Dynamic()</span><br><span class="line">print(res.display) <span class="comment">#&lt;bound method display of &lt;__main__.Dynamic object at ...&gt;&gt;</span></span><br><span class="line">print(Dynamic.mro()) <span class="comment">#[&lt;class '__main__.Dynamic'&gt;, &lt;class '__main__.Klass'&gt;, &lt;class 'object'&gt;]</span></span><br></pre></td></tr></table></figure><p><strong>-메타클래스 생성</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubType</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        print(<span class="string">'__init__'</span>, name)</span><br><span class="line">        super().__init__(name, bases, class_dict)</span><br><span class="line"></span><br><span class="line">Sub1 = SubType(<span class="string">'SubMetaClass'</span>, (), &#123;&#125;) <span class="comment">#__init__ SubMetaClass</span></span><br><span class="line">print(Sub1) <span class="comment">#&lt;class '__main__.SubMetaClass'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Method가 있는 클래스 생성</span></span><br><span class="line">Sub2 = SubType(<span class="string">'SubMetaClass2'</span>, (), &#123;<span class="string">'foo'</span>:<span class="keyword">lambda</span> self: <span class="string">'bar'</span>&#125;) <span class="comment">#__init__ SubMetaClass2</span></span><br><span class="line">sub = Sub2()</span><br><span class="line">print(Sub2) <span class="comment">#&lt;class '__main__.SubMetaClass2'&gt;</span></span><br><span class="line">print(sub) <span class="comment">#&lt;__main__.SubMetaClass2 object at 0x...&gt;</span></span><br><span class="line">print(sub.foo()) <span class="comment">#bar</span></span><br></pre></td></tr></table></figure><p><strong>-메서드 자동 추가</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#__new__()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubType</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(class_object, name, bases, class_dict)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubType2</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        class_dict[<span class="string">'foo'</span>] = <span class="keyword">lambda</span> self: <span class="string">'bar'</span> <span class="comment">#add method</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(class_object, name, bases, class_dict)</span><br><span class="line"></span><br><span class="line">Sub = SubType2(<span class="string">'SubMetaClass'</span>, (), &#123;&#125;)</span><br><span class="line">res = Sub()</span><br><span class="line">print(res.foo()) <span class="comment">#bar</span></span><br></pre></td></tr></table></figure><p><code>type</code>을 <code>super</code>로 바꾸면 안됨.</p><p><code>__new__()</code> 메서드로 전달되는 클래스와 <code>__init__()</code>메서드로 전달되는 첫 인수는 다른 객체이다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubType</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        print(<span class="string">'[__new__]'</span>, class_object.__name__, name) <span class="comment">#[__new__] SubType SubMetaClass</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(class_object, name, bases, class_dict)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(class_object, name, bases, class_dict)</span>:</span></span><br><span class="line">        print(<span class="string">'[__init__]'</span>, class_object.__name__, name) <span class="comment">#[__init__] SubMetaClass SubMetaClass</span></span><br><span class="line">        type.__init__(class_object, name, bases, class_dict)</span><br><span class="line"></span><br><span class="line">Sub = SubType(<span class="string">'SubMetaClass'</span>, (), &#123;&#125;)</span><br></pre></td></tr></table></figure><p><code>__new__()</code> : 메타클래스</p><p><code>__init__()</code> : 클래스 객체</p><p>메타클래스에 정의된 모든 클래스는 첫 인수로 생성된 클래스 객체를 받는다.</p><p>-&gt; 메타클래스의 메서드는 생성된 객체(클래스)를 인수로 받기 때문</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Klass</span><span class="params">(type)</span>:</span> <span class="comment">#Meta Class</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">who_am_i</span><span class="params">(class_name)</span>:</span></span><br><span class="line">        <span class="comment">#class_name에 self를 써야하나 메타클래스의 메서드는 생성된 객체를 첫 인자로 받기에</span></span><br><span class="line">        print(<span class="string">f"I am <span class="subst">&#123;class_name&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">foo = Klass(<span class="string">'Foo'</span>, (), &#123;&#125;)</span><br><span class="line">print(foo.who_am_i) <span class="comment">#&lt;bound method Klass.who_am_i of &lt;class '__main__.Foo'&gt;&gt;</span></span><br><span class="line">foo.who_am_i() <span class="comment">#I am &lt;class '__main__.Foo'&gt;</span></span><br><span class="line">Klass.who_am_i(foo) <span class="comment">#I am &lt;class '__main__.Foo'&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Meta Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firebase] Colud Database 복합색인</title>
      <link href="/2019/08/08/firebase-colud-database/"/>
      <url>/2019/08/08/firebase-colud-database/</url>
      
        <content type="html"><![CDATA[<p>cloud database에서 사용자의 id를 기반으로 데이터를 가져오고자 하였다.</p><p>초기 소스는 아래와 같이 진행되었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getTodos() &#123;</span><br><span class="line">    <span class="keyword">const</span> todosCollection = firestore.collection(TODOS);<span class="comment">//+</span></span><br><span class="line">    <span class="keyword">return</span> todosCollection</span><br><span class="line">      .orderBy(<span class="string">"sequence"</span>, <span class="string">"asc"</span>)</span><br><span class="line">      .get()</span><br><span class="line">      .then(<span class="function"><span class="params">docSnapshots</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> docSnapshots.docs.map(<span class="function"><span class="params">doc</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> data = doc.data();</span><br><span class="line">          data.created_at = <span class="keyword">new</span> <span class="built_in">Date</span>(data.created_at.toDate());</span><br><span class="line">          data.id = doc.id;</span><br><span class="line">          <span class="keyword">return</span> data;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>이 결과는 다른 사람의 데이터까지 가져왔다.</p><p>개발을 모르는 사용자가 보았을 때는 아무 상관 없을 수도 있으나, 데이터가 많아진다면 다른 사람들의 데이터도 불러오기에 사용자 브라우저에 영향을 미칠 것이었다.</p><p>가져오는 데이터베이스에서 처리해야함을 깨닷고 찾아본 결과 <code>where</code>을 사용하면 되었다.</p><p>처음에는 구글링으로 example을 보면은 변수로 된 값을 비교한다기보단 string의 값 2개를 비교하여 잘 이해가 되지 않았는데, 자세히 보니 앞에는 사용하는 데이터 변수이름이었고 뒤에는 해당 값이었다.</p><p><code>.where(&quot;uid&quot;, &quot;==&quot;, this.store.state.user.email);</code>을 사용하여 데이터의 유저정보와 </p><p>현재 로그인 상태의 유저를 비교하여 해당 값만 가져오게 설계할 수 있었다.</p><p>설계에 1부분만 완성한다면 이제 원하는 값을 만날 수 있다.</p><p>console을 보면 처음 보는 오류가 있다. 그래도 친절하게 주소를 주어 해결방법으로 넘어가게 해준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Uncaught (<span class="keyword">in</span> promise) FirebaseError: The query requires an index. You can create it here: https://console.firebase.google.com/project/project_id/database/firestore/indexes?create_composite=...</span><br><span class="line">    at new FirestoreError (http://localhost:8080/app.js:2098:28)</span><br><span class="line">    at JsonProtoSerializer../node_modules/@firebase/firestore/dist/index.cjs.js.JsonProtoSerializer.fromRpcStatus (http://localhost:8080/app.js:7608:16)</span><br></pre></td></tr></table></figure><p>해당 <code>url</code>로 넘어가면 아래 사진과 같이 나오며, 진행해주면 문제가 해결된다.</p><img src="/2019/08/08/firebase-colud-database/firebase_cloud_error01.PNG" class="slug"><h3 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h3><p><a href="https://firebase.google.com/docs/firestore/query-data/queries?hl=ko#simple_queries" target="_blank" rel="noopener">https://firebase.google.com/docs/firestore/query-data/queries?hl=ko#simple_queries</a></p>]]></content>
      
      
      <categories>
          
          <category> Firebase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 복합색인 </tag>
            
            <tag> Cloud Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS] Drag &amp; Drop</title>
      <link href="/2019/08/07/drag&amp;drop/"/>
      <url>/2019/08/07/drag&amp;drop/</url>
      
        <content type="html"><![CDATA[<p>학습목표 :</p><p><strong>나의 Todo List를 <code>Todo, Doing, Finish</code>로 나누어 해당 상황에 맞게 옮겨 관리하기</strong></p><p>Element를 drag할 수 있게 속성 <code>draggable=&quot;true&quot;</code>를 설정해줘야 한다.</p><p><strong>ondragstart</strong></p><p>: drag할 데이터를 지정하는 drag(event)함수를 호출</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drag: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//()"text":데이터 유형, drag된 데이터의 값)</span></span><br><span class="line">    event.dataTransfer.setData(<span class="string">"text"</span>, event.target.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ondragover</strong></p><p>: drag한 데이터를 놓을 수 있는 위치 지정</p><p>기본적으로 데이터/요소는 다른 요소에 놓을 수 없기에, drop을 허용하려면 기본 처리를 방지해야한다.<code>preventDefault()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allowDrop: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//drop허용하기 위해 기본처리 방지</span></span><br><span class="line">event.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ondrop</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drop: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">this</span>.doto_type_list).includes(event.target.id))  &#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line"><span class="keyword">let</span> data = event.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line">event.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line"><span class="keyword">let</span> data = event.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line">event.target.parentNode.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="해결해나가야하는-문제"><a href="#해결해나가야하는-문제" class="headerlink" title="해결해나가야하는 문제"></a>해결해나가야하는 문제</h3><ol><li><code>appendChild</code>라서 다른 곳으로 전체를 이동 후, 마지막에 옮겨 맨 아래에 있는 요소를 해당 옮긴 라인 상위로 올릴 수가 없음.</li><li>DB와 연동하여 값이 읽고 쓰기가 가능해야함</li><li>dataTransfer.getData와 setData에 대해 알아보기</li></ol><h3 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h3><p><a href="https://www.w3schools.com/html/html5_draganddrop.asp" target="_blank" rel="noopener">https://www.w3schools.com/html/html5_draganddrop.asp</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Drag&amp;Drop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS] PWA</title>
      <link href="/2019/07/27/PWA/"/>
      <url>/2019/07/27/PWA/</url>
      
        <content type="html"><![CDATA[<p><strong>Progressive Web App</strong></p><p>웹과 네이티브 앱의 기능 모두의 이점을 갖도록 수 많은 특정 기술과 표준 패턴을 사용해 개발된 웹 앱.</p><h3 id="Intall-Setting"><a href="#Intall-Setting" class="headerlink" title="Intall Setting"></a>Intall Setting</h3><p>편리한 확인을 위해 <code>Chrome canary(개발자 크롬)</code>를 다운받아 진행.</p><p><code>Node.js</code> Download</p><h3 id="PWA의-등장-배경"><a href="#PWA의-등장-배경" class="headerlink" title="PWA의 등장 배경"></a>PWA의 등장 배경</h3><ul><li>모바일 시장 폭발적 성장</li><li>모바일 웹 보다는 모바일 애플리케이션 사용</li><li>모바일 앱영역 커버하기 위한 시도 -&gt; Hybrid App, React Native</li><li>Offline Web 필요성</li></ul><h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><ol><li>Responsive : 반응형</li><li>App-like</li><li>Discoverable</li><li>Engageable : 푸시 알림</li><li>Connectivity : 온/오프라인 연결성</li><li>Safe : HTTPS가 아니라면 PWA를 적용할 수 없음_보안을 위해서</li></ol><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><p><strong>Web App Manifest</strong></p><p> : Progressive Web App의 설치와 앱 구성정보를 담고 있는 json 형식의 설정 파일</p><pre><code>- 앱 아이콘, 화면 런처 방식, 배경색, 시작 페이지 등을 설정할 수 있는 JSON 파일</code></pre><blockquote><p>앱 관련 구성정보</p><ol><li>Start URL : 웹 앱이 시작되는 지점</li><li>Launch Image : 웹 앱 시작 화면</li><li>Display Type : 웹 앱의 화면 형태</li><li>Display Orientation : 웹 앱 화면 방향</li><li>App Icon : 앱 아이콘 이미지와 크기</li></ol></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/*Sample*/</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">"short_name"</span>: <span class="string">"앱 아이콘 이름"</span>,</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"하단 설치 배너 표기될 이름 / 앱 검색 키워드"</span>,</span><br><span class="line"> <span class="attr">"icons"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"src"</span>: <span class="string">"\/android-icon-36x36.png"</span>,</span><br><span class="line">   <span class="attr">"sizes"</span>: <span class="string">"36x36"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"image\/png"</span>,</span><br><span class="line">   <span class="attr">"density"</span>: <span class="string">"0.75"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"src"</span>: <span class="string">"\/android-icon-96x96.png"</span>,</span><br><span class="line">   <span class="attr">"sizes"</span>: <span class="string">"96x96"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"image\/png"</span>,</span><br><span class="line">   <span class="attr">"density"</span>: <span class="string">"2.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">"src"</span>: <span class="string">"\/android-icon-192x192.png"</span>,</span><br><span class="line">   <span class="attr">"sizes"</span>: <span class="string">"192x192"</span>,</span><br><span class="line">   <span class="attr">"type"</span>: <span class="string">"image\/png"</span>,</span><br><span class="line">   <span class="attr">"density"</span>: <span class="string">"4.0"</span></span><br><span class="line">  &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">"background_color"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line"> <span class="attr">"display"</span>: <span class="string">"standalone"</span>,</span><br><span class="line"> <span class="attr">"start_url"</span>: <span class="string">"./"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- manifest파일 등록 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"Path/manifest.json"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Launch Image</strong></p><p>App Web이 시작될 때 거치는 시작 화면 설정 가능</p><p>모바일 앱의 시작과 동일한 느낌</p><p>화면 조합 : 아이콘 + 배경색 + 아이콘 이름</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"background_color": "#ffffff",</span><br></pre></td></tr></table></figure><p>icon은 지정 이미지 중 128dp(192px)에 가장 가까운 크기로 지정되므로, 192px 이미지는 꼭 넣어줄 것</p><blockquote><p><strong>dp</strong></p><p>다양한 모바일 화면 크기에서 동일한 비율로 출력되게 하는 픽셀 단위</p></blockquote><p><strong>App Icon</strong></p><p>manifest에서 icon 미지정시 html파일의 <code>&lt;link rel=&quot;icon&quot;&gt;</code> 태그를 검색</p><blockquote><p><strong>브라우저 Safari 경우</strong> 아래 추가 필요</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"icon.png"</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"152x152"</span> <span class="attr">href</span>=<span class="string">"icon-152x152.png"</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"180x180"</span> <span class="attr">href</span>=<span class="string">"icon-180x180.png"</span>&gt;</span></span><br><span class="line">&gt; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"167x167"</span> <span class="attr">href</span>=<span class="string">"icon-167x167.png"</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS] Lambda Intro</title>
      <link href="/2019/07/22/aws-lambda-basic/"/>
      <url>/2019/07/22/aws-lambda-basic/</url>
      
        <content type="html"><![CDATA[<p><code>aws lambda</code>에서 함수 생성</p><p>새로 작성 -&gt; 기본정보</p><blockquote><p>함수 이름:</p><p>런타임: 본인 사용 언어</p><p>권한: 실행 역할 -&gt; 기존 역할 사용 or 새 역할</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#해당 내용에서는 Slack을 이용하여 오전 10시마다 정보를 전달해주는 함수를 생성</span></span><br><span class="line"><span class="comment">#기본적으로 Amazon CloudWatch Logs가 있기에</span></span><br><span class="line">CloudWatch Events를 만들어줘야 한다.</span><br><span class="line"><span class="string">'CloudWatch Events'</span>를 이용하여 평일 <span class="number">10</span>시마다 이벤트 발생</span><br><span class="line">일정을 <span class="string">'cron(0 1 ? * MON-FRI *)'</span>으로 하여 평일마다 진행하게 하여주고</span><br><span class="line">기본적으로 GMT시간을 따르는데 한국시간과 <span class="number">9</span>시간 차이나므로(GMT가 <span class="number">9</span>시간 전)</span><br><span class="line">한국시간으로 <span class="number">10</span>시를 해주기 위해서는 <span class="number">-9</span>를 해준 <span class="number">1</span>이 됨</span><br></pre></td></tr></table></figure><p>API Gateway를 이용해야할 때도 있으나, 현재 하는 부분에 대해서는 API Gateway가 불필요하여 사용해보지 않았음.</p><h3 id="Slack-설정"><a href="#Slack-설정" class="headerlink" title="Slack 설정"></a>Slack 설정</h3><p><code>Customize Slack</code>에서 설정</p><p>해당 workspace에 대한 권한이 있어야함을 기본으로 한다.</p><p><code>Configure Apps</code>에서 IFTTT를 만들고, 해당 aws연결할 app을 만들어 진행하면 된다.</p><h3 id="추후-해볼-내용"><a href="#추후-해볼-내용" class="headerlink" title="추후 해볼 내용"></a>추후 해볼 내용</h3><p>만든 프로젝트에서 실시간 데이터를 가져와줘야하는 부분 함수가 있다면 해당 함수만 시간에 따라 진행하도록 하는 방법</p><blockquote><p><strong>example</strong></p><p>영화 프로젝트에서 데이터를 가져오는 파싱 부분을 새벽00시를 기준으로 실행하여 데이터를 변경하는 방법 구현</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190629.md</title>
      <link href="/2019/06/30/20190629-md/"/>
      <url>/2019/06/30/20190629-md/</url>
      
        <content type="html"><![CDATA[<h1 id="2019-06-29-Sat"><a href="#2019-06-29-Sat" class="headerlink" title="2019.06.29(Sat)"></a>2019.06.29(Sat)</h1><h3 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h3><p>Javascript을 통해 이미지 업로드 파일을 미리 보기 기능을 구현하고자 하였다. 사용자 관점에서 <strong>올린 파일 확인</strong>을 통해 편리성을 제공하기 위해서였다.</p><p>목요일에는 JQuery를 통하거나 <code>멀티 파일</code>이 아닌 단일 파일로는 자료가 많다는 것을 확인할 수 있었다. 어떻게 돌아가는지 파악하기 위해서 다른 사람들의 소스를 확인하였다.</p><p>금요일에는 해당 소스들을 Javascript로 변환하고 멀티 파일로 바꾸는 작업을 하였다.</p><p>금요일에는 오랜만의 휴식을 즐기기 위해 많은 작업을 하진 못하였지만, <code>쉬면서도 이렇게 하면 되지 않을까?</code>라는 생각을 해보았다.</p><p>토요일에는 생각했던 부분들을 적용해보았지만, 작동 되지 않았다. <code>onclick</code>, <code>addEventListener</code>가 어떠한 상황속에서도 만들면 되는지 알았는데, FileReader 내부에서 안된다는 오류를 맞이하였다. 되게 신기한건 innerText일 때는 되었던게 innerHTML에서는 되지 않았다.</p><p>이에 대한 문제는 Front-end를 더 접하게 되는 날에 더 연구해봐야겠다. 지금은 만들고자 하는 목표를 빠르게 만드는 것이 중요할 때! 이미지들을 pdf로 변환해서 다운로드를 제공해주는 사이트를 만들려고 했는데… 이미 있긴 한거였지만… 내가 원했던 사이트와 너무 비슷한게 있었다. 이 사이트가 얼마나 많은 이미지들을 수용하고 몇 번의 횟수까지 제공해주는지는 정확힌 모르지만, 내 목표와 유사하게 제한이 없는 것 같았다.</p><p><a href="https://imagetopdf.com/ko/" target="_blank" rel="noopener">https://imagetopdf.com/ko/</a></p><p>위 사이트로서, 해당 사이트는 다국어 지원, 1시간 후 이미지 자료 삭제까지 된다.</p><p>Back-end 개발자를 꿈꾸지만, Front를 해보면서 <code>개발은 어렵구나</code> 라는 슬픔과 더 발전해나가야하는 도전의식을 얻었다.</p><p>아직 가야할길이 너무나도 멀다.</p><h3 id="거인의-어깨-위에-서있는-개발자가-되자"><a href="#거인의-어깨-위에-서있는-개발자가-되자" class="headerlink" title="거인의 어깨 위에 서있는 개발자가 되자!"></a>거인의 어깨 위에 서있는 개발자가 되자!</h3>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo] Git Blog</title>
      <link href="/2019/06/23/hexo/"/>
      <url>/2019/06/23/hexo/</url>
      
        <content type="html"><![CDATA[<ul><li>쉽고 빠른, 강력한 블로그 프레임워크</li><li>Markdown 지원</li><li>작업 환경 CLI(command line interface)방식</li><li>github의 pages 서비스를 활용하여 정적 사이트 생성 가능</li><li>웹 프로그래밍에 대한 기본적인 지식 필요</li></ul><h3 id="Install-node-js"><a href="#Install-node-js" class="headerlink" title="Install node.js"></a>Install node.js</h3><blockquote><p>다운로드 공식사이트</p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p></blockquote><h3 id="Setting-Hexo"><a href="#Setting-Hexo" class="headerlink" title="Setting Hexo"></a>Setting Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cil</span><br><span class="line">mkdir 폴더명</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> 폴더명</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="comment">#웹사이트 초기화</span></span><br><span class="line">npm install <span class="comment">#필요한 패키지 다운로드</span></span><br><span class="line"><span class="comment">#node_modules 폴더가 없을 시 생성</span></span><br><span class="line"><span class="comment">#현재 프로젝트의 package.json에 있는 패키지를 node_modules폴더에 설치</span></span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Jun's</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Jun's의</span> <span class="string">개발일지</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">TaeJune</span> <span class="string">Joung</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Seoul</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://TaeJuneJoung.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><h3 id="Git-repositories"><a href="#Git-repositories" class="headerlink" title="Git repositories"></a>Git repositories</h3><blockquote><p><code>계정명.github.io</code> 공개용 저장소 생성</p></blockquote><h3 id="Change-Theme"><a href="#Change-Theme" class="headerlink" title="Change Theme"></a>Change Theme</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line"><span class="comment">#어둡고 깔끔한게 마음에 들어서 해당 theme를 사용함</span></span><br><span class="line"><span class="comment">#theme마다 기본적으로 제공되는 부분들이 있으니 주의 선택</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/probberechts/hexo-theme-cactus.git</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#_config_yml line73</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: hexo-theme-cactus</span><br></pre></td></tr></table></figure><blockquote><p><strong>필요 패키지 다운로드 및 서버실행</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-theme-cactus</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line"><span class="comment">#서버실행</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="github에-배포하기"><a href="#github에-배포하기" class="headerlink" title="github에 배포하기"></a>github에 배포하기</h3><blockquote><p><strong>git 배포를 위한 패키지 설치</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote></blockquote><p><strong>배포(deployment)주소 수정</strong></p><blockquote></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/TaeJuneJoung/TaeJuneJoung.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>deployment</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="이미지-복사"><a href="#이미지-복사" class="headerlink" title="이미지 복사"></a>이미지 복사</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source/</span><br><span class="line">images/</span><br></pre></td></tr></table></figure><p><code>images</code>폴더에 넣어서 경로 설정으로 잡아주면 됨.</p><blockquote><p><strong>example)</strong></p><p>​    url: /images/파일명</p></blockquote><h3 id="페이지-및-파일-생성"><a href="#페이지-및-파일-생성" class="headerlink" title="페이지 및 파일 생성"></a>페이지 및 파일 생성</h3><blockquote><p><strong>페이지 생성</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 페이지명</span><br></pre></td></tr></table></figure><blockquote><p><strong>파일 생성</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new 파일명</span><br></pre></td></tr></table></figure><h3 id="이미지-작성법"><a href="#이미지-작성법" class="headerlink" title="이미지 작성법"></a>이미지 작성법</h3><blockquote><p style="color:#007bff;font-weight:bold">이미지 작성</p><p><strong>전역 Asset</strong></p><p><code>source/images</code>에 파일들을 넣고 <code>![](/images/image.jpg)</code>이와 같이 하면 해결</p><p><strong>Post Asset</strong></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">_config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>설정에서 post_asset_folder를 <code>true</code>로 한 후,</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img slug [title] %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>위와 같이 불러오면 된다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example)</span><br><span class="line">&#123;% asset_img slug testImg.PNG %&#125;</span><br></pre></td></tr></table></figure><h3 id="카테고리-및-태그-사용법"><a href="#카테고리-및-태그-사용법" class="headerlink" title="카테고리 및 태그 사용법"></a>카테고리 및 태그 사용법</h3><blockquote><p><strong>categories/index.md</strong></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">type: "categories"</span><br><span class="line">date: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p><strong>tags/index.md</strong></p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">type: 'tags'</span><br><span class="line">date: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><p>작성파일 예시)</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: oauth2</span><br><span class="line">date: 2019-06-23 22:16:35</span><br><span class="line">tags: ['oauth2', 'django']</span><br><span class="line">categories: ['django', 'oauth2']</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="해나가야할것들"><a href="#해나가야할것들" class="headerlink" title="해나가야할것들"></a>해나가야할것들</h3><ul><li><p>SEO</p><blockquote><p><strong>참고사이트</strong></p><p><a href="https://iseongho.github.io/posts/hexo-seo/" target="_blank" rel="noopener">https://iseongho.github.io/posts/hexo-seo/</a></p><p><a href="https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/" target="_blank" rel="noopener">https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/</a></p></blockquote></li><li><p>검색기능</p><blockquote><p><a href="https://elfinlas.github.io/2018/06/07/hexo-usea-lgolia/" target="_blank" rel="noopener">https://elfinlas.github.io/2018/06/07/hexo-usea-lgolia/</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django] OAuth2</title>
      <link href="/2019/06/23/oauth2/"/>
      <url>/2019/06/23/oauth2/</url>
      
        <content type="html"><![CDATA[<h2 id="Install-amp-Settings"><a href="#Install-amp-Settings" class="headerlink" title="Install &amp; Settings"></a>Install &amp; Settings</h2><p><strong>Install django-allauth</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-allauth</span><br></pre></td></tr></table></figure><p><strong>settings.py</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Specify the context processors as follows:</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="comment"># Already defined Django-related contexts here</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># `allauth` needs this from django</span></span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># Needed to login by username in Django admin, regardless of `allauth`</span></span><br><span class="line">    <span class="string">'django.contrib.auth.backends.ModelBackend'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># `allauth` specific authentication methods, such as login by e-mail</span></span><br><span class="line">    <span class="string">'allauth.account.auth_backends.AuthenticationBackend'</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># The following apps are required:</span></span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sites'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'allauth'</span>,</span><br><span class="line">    <span class="string">'allauth.account'</span>,</span><br><span class="line">    <span class="string">'allauth.socialaccount'</span>,</span><br><span class="line">    <span class="comment"># ... include the providers you want to enable:</span></span><br><span class="line">    <span class="string">'allauth.socialaccount.providers.kakao'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SITE_ID = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">LOGIN_REDIRECT_URL = <span class="string">"accounts:main"</span></span><br></pre></td></tr></table></figure><p> 필자는 django 2.2.1버전으로 진행하였고,</p><p> <code>AUTHENTICATION_BACKENDS</code>부터 추가하면 되었다.</p><p> <strong>urls.py</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'accounts/'</span>, include(<span class="string">'accounts.urls'</span>)),</span><br><span class="line">    <span class="comment">#allauth</span></span><br><span class="line">    path(<span class="string">'accounts/'</span>, include(<span class="string">'allauth.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p> <strong>accounts/views.py</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.forms <span class="keyword">import</span> AuthenticationForm</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> login <span class="keyword">as</span> auth_login, logout <span class="keyword">as</span> auth_logout</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'accounts/main.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        auth_id = request.POST.get(<span class="string">'auth_id'</span>)</span><br><span class="line">        auth_pwd = request.POST.get(<span class="string">'auth_pwd'</span>)</span><br><span class="line">        user = authenticate(request, username=auth_id, password=auth_pwd)</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            auth_login(request, user)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'accounts:main'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = AuthenticationForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'accounts/login.html'</span>, &#123;<span class="string">'form'</span>:form&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">    auth_logout(request)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'accounts:main'</span>)</span><br></pre></td></tr></table></figure><p> <strong>main.html</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load socialaccount %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AllAuth<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'accounts:main' %&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% if user.is_authenticated %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'accounts:logout' %&#125;"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'accounts:login' %&#125;"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;% if user.is_authenticated %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;request.user&#125;&#125;님, 로그인하셨습니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>학습 목적이기에 꾸며지지 않았습니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>login.html</strong></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load socialaccount %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">        &#123;% csrf_token %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"auth_id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"auth_pwd"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% provider_login_url 'kakao' method='oauth2' %&#125;"</span>&gt;</span>Kakao_login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Kakao"><a href="#Kakao" class="headerlink" title="Kakao"></a>Kakao</h2><p> Kakao Developers</p><p> <a href="https://developers.kakao.com/apps" target="_blank" rel="noopener">https://developers.kakao.com/apps</a></p><p> CallBack URL :</p><p> <a href="http://localhost:8000/accounts/kakao/login/callback/" target="_blank" rel="noopener">http://localhost:8000/accounts/kakao/login/callback/</a></p><h2 id="Image-부가설명"><a href="#Image-부가설명" class="headerlink" title="Image 부가설명"></a>Image 부가설명</h2><p>카카오 개발자 사이트에 들어가서 사용할 <code>내 애플리케이션</code>을 먼저 생성</p><img src="/2019/06/23/oauth2/kakao_allauth_1.PNG" class="slug"><p>생성을 하고나면 위와 같이 키를 준다. 필자가 사용하고자 하는 키는 <code>REST API키</code>이다.</p><img src="/2019/06/23/oauth2/kakao_allauth_2.PNG" class="slug"><p>사용자 관리를 들어가서 <code>사용자 관리 ON</code>을 해주고 받을 정보들을 설정해준다. 검수작업이 필요할 때도 있기에 이로 인해 사용가능 시간이 걸리는 것 같기도 하다…</p><img src="/2019/06/23/oauth2/kakao_allauth_2_2.PNG" class="slug"><p>가장 중요한 곳이다. 일반으로 들어가서 애플리케이션을 사용하고자 하는 곳을 설정. 필자는 웹으로 사용하기에 웹을 설정하고 local에서 진행하였기에 local주소를 설정하였다.<br><code>Redirect Path</code>는 정해져있다고 보면 된다.</p><img src="/2019/06/23/oauth2/kakao_allauth_3.PNG" class="slug"><p><code>고급설정</code>에서 Secret키를 가져온다. 위에 가져왔던 REST_API키와 Secret키로 아래 설정을 해주면 된다.</p><img src="/2019/06/23/oauth2/kakao_allauth_4.PNG" class="slug"><br><img src="/2019/06/23/oauth2/kakao_allauth_5.PNG" class="slug"><p>설정은 admin에 들어가서 해주면 되고, 아래는 설정이 끝난 다음 테스팅한 과정이다.</p><img src="/2019/06/23/oauth2/kakao_allauth_6.PNG" class="slug"><br><img src="/2019/06/23/oauth2/kakao_allauth_7.PNG" class="slug"><p>kakao_login을 누르면 아래와 같이 kakao 로그인 페이지가 나온다.</p><img src="/2019/06/23/oauth2/kakao_allauth_8.PNG" class="slug"><p>접속을 하면 개발자가 redirect시킨 곳으로 들어가게 된다.</p><img src="/2019/06/23/oauth2/kakao_allauth_9.PNG" class="slug"><p>이로 인하여 kakao_oauth2_REST KEY방식을 완성하였다.</p><h2 id="SourceCode"><a href="#SourceCode" class="headerlink" title="SourceCode"></a>SourceCode</h2><p><a href="https://github.com/TaeJuneJoung/Python/tree/master/library/oauth_project" target="_blank" rel="noopener">https://github.com/TaeJuneJoung/Python/tree/master/library/oauth_project</a></p><h3 id="참고사이트"><a href="#참고사이트" class="headerlink" title="참고사이트"></a>참고사이트</h3><p><a href="https://django-allauth.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://django-allauth.readthedocs.io/en/latest/</a></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
